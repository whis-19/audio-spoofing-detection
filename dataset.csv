report,type_blocker,type_regression,type_bug,type_documentation,type_enhancement,type_task,type_dependency_upgrade
The mention of Fix Super Stream Example in Docs and Back port of issue 3546 Closed by 7a92b41af refers to a documentation update in a software project This update addresses a previous issue 3546 which has been resolved and backported meaning the fix was applied to an earlier version of the software The specific change identified by the commit hash 7a92b41af likely involved correcting or improving an example related to the Super Stream functionality ensuring clarity and functionality in the documentation for users and developers Such updates are crucial for maintaining accurate and helpful documentation which supports effective use and development of the software,0,0,1,1,0,0,0
It seems like you need a concise summary related to machine learning However your request also mentions fixing a super stream example and removing Scope If you re referring to improving documentation or code here s a general approach to both For machine learning ensure the documentation explains key concepts such as data preprocessing model selection training evaluation and deployment Highlight the importance of feature engineering overfitting prevention and hyperparameter tuning Use examples to illustrate how models like neural networks or decision trees can be applied to specific problems Regarding the super stream example focus on clarity and simplicity Removing Scope might suggest simplifying the code Ensure that the example is easy to understand with clear comments and logical flow Verify that any dependencies or frameworks used are correctly configured and documented,0,0,1,1,0,0,0
The issue AMQP 838 opened by Gary Russell involves enhancing the JavaDocs for the setMessageConverter method in the Spring AMQP project This setter is primarily used with RabbitListener to pass a message converter to the listener adapter from the container factory The proposal suggests updating the documentation to clarify its usage and considers deprecating the setter The issue affects version 2 1 GA and has been backported to version 2 0 8 Additional context and discussions related to this can be found in a Stack Overflow thread and a related pull request on GitHub,0,0,1,1,0,0,0
I m unable to access external content directly including specific JIRA issues or GitHub pages However I can help you create a summary if you provide more details about the content of the issue related to Maven samples build and AMQP 835 Please share key points or excerpts and I ll assist you in summarizing them,0,0,1,1,0,0,0
In the discussion around AMQP 815 https jira spring io browse AMQP 815 redirect false Mallaiah Mejari identified an incorrect class reference in the Spring AMQP documentation specifically in the section RabbitConnectionFactoryBean and Configuring SSL The class should be updated to org springframework amqp rabbit connection RabbitConnectionFactoryBean instead of the incorrect org springframework xd dirt integration rabbit RabbitConnectionFactoryBean Artem Bilan acknowledged the typo and encouraged Mejari to submit a pull request for the correction providing a link to the contribution guide https github com spring projects spring amqp blob master CONTRIBUTING adoc Mejari requested further guidance on how to proceed with creating the pull request The correction was backported to version 1 7 8 https github com spring projects spring amqp milestone 187 closed 1,0,0,1,1,0,0,0
A spelling mistake was identified in the Spring AMQP reference documentation specifically in the comparison of the SimpleMessageListenerContainer and DirectMessageListenerContainer attributes The word configured was misspelled as condigured in the consumersPerQueue property description The issue tracked as AMQP 809 https jira spring io browse AMQP 809 affected version 2 0 2 of the documentation The error was reported by Divyansh Sharma and subsequently fixed by Artem Bilan through a commit to the Spring AMQP GitHub repository which was also applied to the 2 0 x branch,0,0,1,1,0,0,0
The AMQP 501 issue opened by Gary Russell focuses on enhancing the documentation for the ConsumerTagStrategy in the Spring AMQP project This update aims to provide a clear understanding of how to use the ConsumerTagStrategy to customize consumer tags The issue is linked to a related feature request 2049 that introduces the ability to set consumer tag values This enhancement will help developers better manage and identify consumers in message driven applications The changes referenced in the pull request on GitHub spring projects spring amqp pull 295 include detailed documentation updates to guide users in implementing the strategy effectively,0,0,1,1,0,0,0
The issue AMQP 485 involved a discrepancy in the Javadoc for the SimpleMessageListenerContainer s setConcurrentConsumers method The documentation incorrectly stated that concurrentConsumers cannot be less than maxConcurrentConsumers when it should have clarified that concurrentConsumers cannot exceed maxConcurrentConsumers This documentation error was identified by Attila Bukor and addressed in version 1 4 4 The fix was also backported to version 1 3 10 ensuring that users of both versions have accurate information,0,0,1,1,0,0,0
In section 3 7 1 of the Spring AMQP documentation there was an error indicating that the responseQueue should be set to amqp rabbitmq reply to which does not work The correct configuration is amq rabbitmq reply to as supported by spring boot starter amqp 1 2 1 BUILD SNAPSHOT Karl Andersson reported this issue resulting in a documentation update confirmed by Gary Russell The fix has been merged into the project For more details on the correct configuration refer to the official RabbitMQ documentation on direct reply to This change affects version 1 4 1 of Spring AMQP,0,0,1,1,0,0,0
In the issue AMQP 389 https jira spring io browse AMQP 389 Gary Russell highlights misleading documentation for the AmqpAppender in Spring AMQP The Javadoc incorrectly implies that setting log4j appender amqp contentEncoding to null is equivalent to its default state which actually means no encoding is applied Russell suggests a clearer headline to indicate which properties are available and their default values if not explicitly set This issue affects version 1 3 1 and is referenced in a related pull request https github com spring projects spring amqp pull 180 The goal is to improve documentation clarity to avoid confusion for users configuring the AmqpAppender,0,0,1,1,0,0,0
In AMQP 346 Gary Russell highlights a change in RabbitMQ behavior since version 2 7 0 where rejected messages are now placed at the front of the queue instead of the back This affects how message rollback is handled in RabbitMQ The issue has been documented and a pull request has been submitted to update the relevant Spring AMQP documentation to reflect this change The goal is to ensure that users are aware of the new message handling behavior and can adjust their implementations accordingly,0,0,1,1,0,0,0
Gary Russell opened AMQP 295 to address a hardcoded version issue in the QuickTour Maven snippet originally set to 1 0 0 RELEASE The version placeholder only expands in index xml and the task involves modifying the plugin to expand this placeholder in other files This issue duplicates 1847 which also concerns fixing the QuickStart Maven version A pull request for the docbook plugin has been submitted awaiting a build as referenced in this link https github com SpringSource gradle plugins pull 9 Additionally another pull request related to this fix can be found here https github com SpringSource spring amqp pull 80,0,0,1,1,0,0,0
In AMQP 216 Joris Kuipers reported an issue with the XSD documentation for the key attribute in a binding element within a direct exchange declaration in XML The documentation states that if the key attribute is not provided it defaults to the queue name However the DirectExchangeParser currently sets it to an empty string when not specified Kuipers suggests aligning the implementation with the documentation as defaulting to the queue name seems more appropriate This issue affects version 1 0 0 GA and Gary Russell referenced related issues 1765 and 1791,0,0,1,1,0,0,0
The reference guide for Spring AMQP version 1 0 0 RC1 still mentions AbstractRabbitConfiguration which is outdated This occurs in section 3 2 1 focusing on synchronous examples The issue affects versions 1 0 0 RC1 and 1 0 0 RC2 More details can be found in the linked JIRA issue opened by Kyle Smith,0,0,1,1,0,0,0
The issue AMQP 165 involves the AmqpAppender not shutting down cleanly when a web application is terminated This problem was addressed by implementing a Log4jConfigListener which ensures that appenders are properly closed Additionally in the Spring Rabbit module the solution involved manually closing the connection factory when the appender is closed The fix was applied to version 1 0 0 RC1 enhancing the shutdown process and preventing potential resource leaks,0,0,1,1,0,0,0
The issue reported in AMQP 164 involves exchange parsers not correctly handling anonymous queues in the Spring Rabbit project leading to test failures in the stocks sample application The failure occurs due to a lack of integration tests for binding parsers resulting in a BeanCreationException The exception arises when the RabbitAdmin bean fails to initialize triggered by an AmqpIOException caused by a missing exchange This is evidenced by a ShutdownSignalException indicating the absence of the tradeQueue exchange The problem affects version 1 0 0 GA and was resolved by creating a factory bean for bindings enhancing XML parser functionality,0,0,1,1,0,0,0
The document should clearly state that micrometer observations are not started for batch listeners Currently this is not mentioned leading to confusion for users who expect metrics to be created when observationEnabled is set Observations are only started for single elements not batches as indicated in the Spring AMQP source code This is because processing a batch involves multiple messages and it s up to the target handler implementation to handle observations per item The documentation will be updated to reflect this with a scheduled release next Monday Contributions to the documentation are welcome,0,0,0,1,1,0,0
David Moore reported multiple instances of a typo to to in the Spring AMQP documentation The errors appeared in sections related to RabbitTemplate ReturnCallback RabbitTemplate ConfirmCallback and connection listeners These typos were consistent across different parts of the documentation Artem Bilan acknowledged the issue encouraging contributions to fix it Gary Russell confirmed the typos were fixed and suggested that for minor issues like this contributors could directly submit a pull request without needing to sign a Contributor License Agreement,0,0,0,1,1,0,0
Christoph Dreis opened issue AMQP 683 https jira spring io browse AMQP 683 redirect false suggesting that with Java 8 support the API documentation should be updated using the latest Javadocs A proposal for this update has been attached This change is referenced in a pull request https github com spring projects spring amqp pull 519 on the Spring AMQP GitHub repository,0,0,0,1,1,0,0
The Jackson2JsonMessageConverter in Spring AMQP has an undocumented condition where it fails to convert messages if the content type does not include json as a substring This behavior is not documented and should either be documented or removed The issue affecting version 1 6 GA is discussed in a pull request with the suggestion to add documentation Artem Bilan comments that the reliance on a JSON content type should be obvious and aligns with standards and Postel s Law However there is an agreement to add a note about this requirement in the relevant section of the documentation,0,0,0,1,1,0,0
Thorben Heins reported that the Spring AMQP documentation incorrectly uses the x ha policy for RabbitMQ s HA features which was deprecated in version 3 0 The correct approach now involves configuring HA policies via separate policies and regex matching of queue names He suggested adding a version hint to clarify this change Gary Russell responded encouraging contributions and providing guidance on accessing and editing the documentation He mentioned that since RabbitMQ 3 0 is dated the old configuration should be omitted and suggested updating examples to include current practices such as dead letter exchange configuration Russell also recommended linking to the RabbitMQ HA page for clarity,0,0,0,1,1,0,0
In the context of using the QueueBinding annotation in Spring AMQP there is a tendency for redundant code when specifying the same exchange type across multiple annotations This repetition can lead to errors and inefficiencies The proposed solution involves creating meta annotations which encapsulate these repetitive configurations thus reducing boilerplate code By using a custom annotation such as MyRabbitListener developers can centralize the configuration for the exchange type making the code cleaner and less error prone This approach was validated through a test confirming its effectiveness and it meets the use case requirements Consequently it may also be documented for broader guidance,0,0,0,1,1,0,0
In AMQP 593 a problem was identified with RPC style communication using RabbitMQ where multiple RabbitTemplate instances shared a fixed reply queue leading to issues with message correlation Each message had the same correlation ID causing responses to be mismatched Logs showed message responses being sent to incorrect templates The solution involves using unique reply queues for each template to ensure accurate message processing This challenge arose from the limitations of RabbitMQ s message selection mechanism but recent RabbitMQ versions have addressed performance issues with the introduction of direct replyTo The documentation will be updated to emphasize the need for unique reply queues to avoid such problems,0,0,0,1,1,0,0
Apache Qpid Proton is an open source implementation of AMQP 1 0 offering Java C and JavaScript versions with bindings for other languages like Go and Python While AMQP 0 9 1 used by RabbitMQ is known for its rich features AMQP 1 0 provides a simpler more streamlined protocol suitable for basic messaging needs The Spring ecosystem supports various messaging protocols including AMQP 0 9 1 and Kafka and there is interest in integrating AMQP 1 0 support similar to spring kafka and spring amqp Users aim to transition from legacy systems like HornetQ to modern solutions such as Apache Artemis which supports AMQP 1 0 via Qpid Proton Despite initial skepticism Qpid Proton has improved and is used in projects like Apache Artemis and ActiveMQ The Spring community is exploring using spring jms with qpid jms leveraging AMQP 1 0 for messaging This aligns with Spring s focus on reactive programming and contributions to this integration are encouraged,0,0,0,1,1,0,0
The issue AMQP 574 https jira spring io browse AMQP 574 redirect false opened by Dominik Bartholdi highlights a lack of comprehensive documentation on deserializing JSON payloads to objects using Spring AMQP Although there is some guidance on using DefaultMessageHandlerMethodFactory with a validator it lacks explicit instructions for JSON deserialization The user configures RabbitTemplate with a Jackson2JsonMessageConverter but finds additional configuration necessary such as implementing MappingJackson2MessageConverter and integrating it with DefaultMessageHandlerMethodFactory This setup requires clarity especially regarding the use of different message converters The documentation should be updated to better explain the integration process Gary Russell notes that using SimpleRabbitListenerContainerFactory simplifies the configuration referring to issue 2130,0,0,0,1,1,0,0
The AMQP Appender documentation contains an error where the class used in the Log4j configuration is incorrectly listed as org springframework amqp log4j AmqpAppender It should be org springframework amqp rabbit log4j AmqpAppender This was highlighted by Jan Vladimir Mostert in issue AMQP 433 https jira spring io browse AMQP 433 A relevant pull request on GitHub which addresses this mistake has been merged as confirmed by Gary Russell For more details you can refer to the discussion on Stack Overflow and the associated pull request in the Spring AMQP GitHub repository,0,0,0,1,1,0,0
The issue AMQP 411 opened by Igor Berman highlights the need for improved documentation regarding thread configuration in Spring AMQP Users can configure threads and executors in multiple ways but it s unclear how these options differ and when each should be used Berman points out that different components such as consumers and connections might use distinct executors or thread factories He explains three main configurations setting a thread factory for the RabbitMQ connection using an executor in the AMQP connection factory and defining an executor for the SimpleMessageListenerContainer However the documentation does not clearly explain their differences or specific use cases Gary Russell comments that the RabbitMQ client uses a default thread pool for async calls while the Spring AMQP executor can replace this default The SimpleListenerContainer s executor handles message listener invocations Russell acknowledges the need for better documentation and clarifies that the RabbitMQ client and Spring AMQP handle threading differently which can lead to confusion,0,0,0,1,1,0,0
In order to programmatically configure a SimpleMessageListenerContainer with RabbitTemplate in Spring AMQP you need to replace XML configurations with Configuration classes This involves setting up a SimpleMessageListenerContainer and RabbitTemplate in a Java based configuration The original request was to provide such a configuration equivalent to the applicationContext xml described in the Spring AMQP documentation The issue identified as AMQP 320 was raised by Pulkit Singhal and included references to specific documentation URLs The goal was to facilitate request reply messaging without relying on XML Gary Russell contributed a pull request to address this which was merged by Gunnar Hillert For detailed guidance Pulkit provided notes accessible via a GitHub Gist This issue affects versions 1 1 4 and 1 2 0 M1,0,0,0,1,1,0,0
The issue AMQP 247 discusses allowing the configuration of queue names in Spring AMQP using SpEL Spring Expression Language expressions The requester Ittai Zeidman wants the queue name to be set as a configurable property from an external file but Spring 3 1 doesn t support SpEL for bean names causing issues due to the coupling of logical and operational entity names Gary Russell commented that using both the id and name attributes can decouple the bean name from the queue name resolving the issue This allows the id to be the bean name while the name serves as the queue name The documentation will be updated to clarify this and examples include using si test queue and someBean queueName for queue names A pull request has been issued to address this enhancement,0,0,0,1,1,0,0
The reference documentation for the receive method in AMQP was found to be misleading as it incorrectly described the implementation as synchronous and blocking This caused confusion among developers To address this updates to the Java documentation were proposed to clarify the method s behavior A related forum thread discussed the issue further Additionally a suggestion was made to introduce blocking semantics to RabbitTemplate receive by utilizing a QueueingConsumer However a new issue was opened to explore this enhancement separately,0,0,0,1,1,0,0
The Tracer functionality in the RabbitMQ client is essential for logging protocol calls aiding in diagnosing client issues It can help users and streamline support by making it easy to enable through Spring AMQP The suggestion is to include documentation on using the Tracer class which can trace connections and log frames This involves running the Tracer with parameters like port and host and configuring options for inbound and outbound heartbeats frame assembly and command body suppression The trace logs show detailed protocol interactions such as connection starts channel openings exchanges and queue declarations This approach avoids additional coding and focuses on enhancing the reference documentation,0,0,0,1,1,0,0
The document highlights an issue encountered in the Chaos Monkey for Spring Boot plugin when running Spring Boot 2 2 6 RELEASE The problem occurs when the management server port is set to a different port than the main application port Specifically the error responses differ depending on whether the management port is the same as the application port When the ports are the same the validation error responses are detailed providing specific information about the validation failure e g fields rejected values and error codes However when the management port is different the error response is more generic simply stating Bad Request with no additional details about the validation error The response format inconsistency is problematic for the plugin as it aims to provide the same error messages to its users regardless of the port configuration The issue seems related to how Spring Boot handles error responses in different port configurations When both the application and management ports are the same the errors are processed through the main DispatcherServlet while with different ports they follow a separate path leading to the loss of error details The document suggests that this might be linked to a previous issue 10560 and indicates that a regression may have occurred in 2 2 6 The Spring Boot team has re opened the related issue to address this before the release of 2 2 8 They have identified that the javax servlet error exception attribute was not being set properly when the ports differ causing the error details to be lost The team has since adjusted the CompositeHandlerExceptionResolver to ensure that the exception is correctly stored and handled,1,0,1,0,0,0,0
The document refers to a forward port of issue 18211 to Spring Boot 2 2 0 RC1 The issue involves a NullPointerException NPE caused by concurrent calls to EndpointRequest This problem occurs during request matching in Spring Security where the matches method is called before proper initialization leading to race conditions The forward port ensures that the fix for the NPE originally addressed in 2 1 8 is applied to version 2 2 0 RC1 to prevent similar issues in this release,1,0,1,0,0,0,0
The document describes an issue encountered after upgrading from Spring Boot 2 1 7 to 2 1 8 where concurrent calls to EndpointRequest can result in a NullPointerException NPE The stack trace points to the matches method in EndpointRequest AbstractRequestMatcher as the source of the exception This issue occurs in the Spring Security request matching process and causes failures during security checks for various requests The problem seems difficult to reproduce locally but reverting to 2 1 7 resolves the issue suggesting a regression introduced in 2 1 8 The document notes that this might be related to previous issues 12380 and 14161 and there is a possibility of a race condition in ApplicationContextRequestMatcher Specifically it appears that the matches method might be called before the matcher has been fully initialized leading to the NPE Further investigation is required to determine if this is indeed a race condition and to ensure proper initialization before the matches method is invoked,1,0,1,0,0,0,0
The document discusses a potential bug in Spring Boot s configuration binding related to the ConfigurationPropertyName equals method The issue raised by snicoll occurs when dashed property names are used Specifically in a test case related to WebFlux metrics removing the final s character from the property name e g changing requests to request results in the test passing unexpectedly indicating an incorrect binding The bug seems to cause binding to succeed regardless of whether the property name includes the final s or not which is unexpected behavior The issue could not be reproduced in an isolated test case but was observed in the Spring Boot codebase The problem appears to only affect the master branch while Spring Boot 2 1 x does not seem to be impacted The team acknowledges that such issues can easily arise due to the complexity of the equals method logic,1,1,1,0,0,0,0
The document references a forward port of issue 16490 to Spring Boot 2 2 0 M2 The issue concerns the dependency management for solr uima where solr uima was mistakenly assigned a version 7 7 1 even though this version does not exist because UIMA was removed in Solr 7 5 This caused build failures when referencing the dependency in Spring Boot The forward port ensures that the fix for this issue is applied in the 2 2 0 M2 milestone addressing the problem in future versions of Spring Boot,1,0,1,0,0,0,0
The document highlights an issue with Spring Boot s dependency management for solr uima As part of the changes in https github com spring projects spring boot issues 16273 the version for solr uima was set to 7 7 1 using a shared solr version property However the problem is that no such version 7 7 1 exists for solr uima as it was removed in Solr 7 5 As a result builds fail if this dependency is referenced in spring boot dependencies 2 1 4 The user points out this discrepancy and asks for clarification questioning if something was missed The document concludes by acknowledging that UIMA was indeed removed and notes that Spring Boot intentionally upgraded from Solr 7 4 directly to 7 7 1 in a maintenance release which led to this issue,1,0,1,0,0,0,0
The document outlines an issue with the Spring Boot Gradle plugin which no longer writes certain required manifest entries that are necessary for Java buildpack detection of Spring Boot archives In previous versions using the Maven plugin these manifest entries were written by the Repackager class However starting with Spring Boot 2 0 the Gradle plugin stopped using this class causing the loss of these critical manifest entries The document suggests that the issue can likely be resolved by modifying specific lines in the Gradle plugin s code particularly in BootArchiveSupport A contributor offers to provide a pull request PR to fix the issue and asks if the maintainers philwebb and rhamedy are already working on it The issue is also presented as a possible opportunity for a first time contributor to address The goal is to ensure that the required manifest entries are correctly written when building Spring Boot archives with the Gradle plugin similar to how it s handled in the Maven plugin,1,0,1,0,0,0,0
The document describes an issue that arises after upgrading to Spring Boot 2 1 concerning how configuration properties are mapped to Java representations when the property keys are uppercase and similar In the provided example two keys in the application yml file MY KEY and MY KEY WITH OTHER VALUE are both mapped to the same value value1 even though they should have distinct values In Spring Boot 2 0 and 1 5 this issue did not occur and the keys were mapped correctly However in 2 1 the equality check for configuration property names fails when the keys start with the same uppercase letters This behavior results from changes introduced in Spring Boot 2 1 for improved property name adaptation The Spring Boot team points out that the documented requirements for property keys specify that only lowercase alphanumeric characters and hyphens should be used To preserve the original key values users should wrap keys containing uppercase or special characters in square brackets as per the recommended practice The document concludes with a proposed fix for the equality check logic in ConfigurationPropertyName but the team is debating whether to implement it While the fix would resolve the issue for non compliant keys it might encourage usage of property names that do not follow the documented guidelines The team leans towards making such cases fail rather than allowing confusing behavior where incorrect values are bound to map keys,1,0,1,0,0,0,0
The document describes an issue in Spring Boot 2 0 6 where resource versioning strategies such as GZip or content versioning stop working if the Actuator starter dependency is included in the project This issue is caused by changes in the resourceUrlEncodingFilter which is now wrapped inside a FilterRegistrationBean The problem arises because the ConditionalOnMissingBean annotation on the FilterRegistrationBean does not check for generic types and thus it mistakenly matches when any other FilterRegistrationBean e g from Actuator is present In Spring Boot 2 0 5 the resource strategies work as expected but after upgrading to 2 0 6 they stop being invoked The root cause is traced to a conflict with the Actuator s webMvcMetricsFilter which leads to the ConditionalOnMissingBean condition failing inappropriately To work around the issue the user can manually register the ResourceUrlEncodingFilter as a bean in their SpringBootApplication class javaCopy Beanpublic FilterRegistrationBean ResourceUrlEncodingFilter resourceUrlEncodingFilter FilterRegistrationBean ResourceUrlEncodingFilter registration new FilterRegistrationBean new ResourceUrlEncodingFilter registration setDispatcherTypes DispatcherType REQUEST DispatcherType ERROR return registration The Spring Boot team acknowledges the issue and suggests reverting to the behavior in 2 0 5 by relying on ConditionalOnBean ResourceUrlEncodingFilter They are considering long term solutions such as checking for a specific bean name,1,1,1,0,0,0,0
The document discusses an issue where Spring Boot s endpoint IDs do not support camelCase or PascalCase which leads to errors when used in configuration properties or JMX names For example attempting to define an endpoint with an ID like camelCase results in an error as Spring Boot enforces a canonical format of lowercase kebab case separated for property names and other configurations The issue was raised when testing with Spring Boot versions 2 0 5 and 2 1 0 M4 where a configuration property such as management endpoint camelCase cache time to live would fail with an error indicating invalid characters in the configuration name The document explains that this is due to the fact that the ID is used in various places such as configuration properties and JMX names and must adhere to a specific format There is a debate about whether endpoint IDs should support camelCase as they are valid URL paths but the current restriction is due to ensuring consistency across configuration properties The document suggests possible solutions such as introducing a way to clean configuration names to comply with the canonical format or allowing for custom mappings between endpoint IDs and their paths Ultimately the document highlights the need to balance predictability in endpoint IDs with flexibility for user defined formats The discussion also mentions potential changes including adding support for characters like dots in IDs or converting endpoint IDs to a canonical format automatically However there are concerns about breaking existing applications especially in Spring Cloud where some endpoints like hystrix stream use dots in their IDs The document concludes with the idea of creating an EndpointId class to handle various ID formats and produce a canonical version when needed,1,0,1,0,0,0,0
The document discusses an issue with SpringApplication setApplicationContextClass not correctly identifying a reactive web application causing the SpringApplication to have webApplicationType NONE in integration tests This discrepancy occurs because GenericReactiveWebApplicationContext is not considered a WebApplicationContext as WebApplicationContext is tied to the Servlet API The document suggests that although this issue doesn t cause problems in existing applications it is inconsistent and needs to be addressed The issue can be reproduced by adding a listener that prints the WebApplicationType Despite the application context being reactive the type is displayed as NONE instead of REACTIVE The document also touches on how integration tests may use a mock server leading to the use of GenericReactiveWebApplicationContext rather than ReactiveWebServerApplicationContext This seems to cause confusion about the correct WebApplicationType to be assigned The issue was reopened to address the problem reported in a previous commit which involves ensuring proper support for ConfigurableReactiveWebEnvironment in OnWebApplicationCondition,1,0,1,0,0,0,0
The document describes a security issue when using Spring Boot Actuator endpoints with Spring Security Specifically when the EndpointRequest toAnyEndpoint matcher is used to secure Actuator endpoints the actuator path is correctly secured but the actuator path with a trailing slash is not In the provided example an application is configured with Spring Boot 2 0 3 RELEASE Spring Security and Actuator and exposes all Actuator endpoints via the configuration management endpoints web exposure include When accessing actuator the user receives an access denied error as expected due to authentication being required but accessing actuator successfully returns the endpoint output bypassing the security restrictions This issue likely stems from the way Spring Security handles path matching where actuator and actuator are treated differently The document suggests that this discrepancy could lead to unintended exposure of sensitive information via the unsecured actuator path,1,0,1,0,0,0,0
The document highlights a change in the EnvironmentEndpoint where it no longer supports the setKeysToSanitize method Previously EnvironmentEndpoint was annotated with ConfigurationProperties which allowed for the configuration of keys to sanitize sensitive information However this annotation was removed during a refactor resulting in the inability to configure setKeysToSanitize This change affects the ability to sanitize specific environment variables in the endpoint s output,1,0,1,0,0,0,0
The document addresses an issue in the Spring Boot 1 5 5 RELEASE where a snapshot dependency spring data mongodb log4j version 1 10 5 BUILD SNAPSHOT was mistakenly included This causes problems with release plugins as snapshot dependencies are not allowed in release builds The problem originated from Spring Data s BOM and the enforcer rules in Spring Boot did not catch it because spring data mongodb log4j is not directly used A fix is planned for Spring Boot 1 5 6 which will be released soon to address this issue In the meantime users affected by this can manually resolve the issue by adding the following to their pom xml to override the snapshot version xmlCopy dependencyManagement dependencies dependency groupId org springframework data groupId artifactId spring data mongodb log4j artifactId version 1 10 5 RELEASE version dependency dependencies dependencyManagement Additionally olivergierke is requested to release an Ingalls SR5 2 BOM to permanently resolve the issue,1,0,1,0,0,0,0
The document describes a ClassCastException encountered during the parsing of a YAML configuration file in Spring Boot 2 0 0 BUILD SNAPSHOT The error occurs when OriginTrackedValue OriginTrackedCharSequence is incorrectly cast to a String during the YAML processing specifically in YamlProcessor buildFlattenedMap The issue arises when certain YAML keys such as group are represented as CharSequence rather than String This problem is not present in Spring Boot 1 5 x where the same configuration works correctly The document includes example configurations where this issue occurs and references an open bug 8011 that is related to the same problem To resolve the issue a change was suggested in the OriginTrackedYamlLoader OriginTrackingConstructor to ensure that keys are properly converted to strings when constructing the YAML mapping The document also notes that the same issue is reproducible in other projects using spring boot 2 0 0 BUILD SNAPSHOT,1,0,1,0,0,0,0
The document discusses a security issue in Spring WebFlux where the ResourceWebHandler in WebFlux exposes all resources in the classpath including sensitive files like application properties by default This behavior contrasts with Spring MVC which only exposes specific directories such as static thereby preventing access to sensitive resources The issue can be reproduced by running a sample WebFlux application and accessing http localhost 8080 application properties which unexpectedly allows the browser to download the file In contrast doing the same in a Spring MVC application results in a 404 error as expected The document highlights that this inconsistency poses a security risk for developers who are familiar with Spring MVC and may not realize that WebFlux behaves differently The core of the problem lies in the way EmbeddedReactiveWebApplicationContext handles resource loading falling back to DefaultResourceLoader which inadvertently exposes all classpath resources The proposed solutions include either stripping the list of default resource locations in WebFlux or enhancing EmbeddedReactiveWebApplicationContext to handle this case more securely,1,0,1,0,0,0,0
The document describes an issue with Couchbase auto configuration in Spring Boot A recent commit broke the functionality specifically with SpringBootCouchbaseDataConfiguration Initially the configuration class was expected to extend AbstractCouchbaseConfiguration but the Spring Boot team clarified that this is not necessary thanks to collaboration with the Couchbase team However users experienced problems with stale dependencies and cyclic dependencies when attempting to run Couchbase based applications Multiple users reported issues involving failed bean creation and circular dependencies particularly when using Spring Boot snapshots The problem seemed related to the springBootCouchbaseConfigurer bean and the issue persisted despite cleaning the Maven repository and updating dependencies After some investigation it was confirmed that the fix had been merged into the Spring Data Couchbase 3 0 x branch Users were advised to ensure their dependencies were up to date Eventually the problem was resolved for some users after updating their environments but others continued to face issues possibly due to stale or incorrect snapshots The document concludes with a request for affected users to provide sample projects or share more details for further investigation,1,0,1,0,0,0,0
The document discusses an issue with the Spring Boot configuration processor having a compile time dependency on spring core when it should be a test scope dependency Key Points The configuration processor incorrectly has a compile time dependency on spring core rather than being scoped to test philwebb acknowledges that there is no reason this issue wasn t fixed in 1 4 x snicoll suggests reopening the issue and backporting the fix for version 1 5 The issue has been present for a while but a fix is planned for 1 5 This issue highlights a dependency management problem in Spring Boot that is planned to be corrected in future releases by adjusting the scope of the spring core dependency,1,0,1,0,0,0,0
The document describes a security issue in Spring Boot 1 4 3 when using DevTools where every file on the classpath is exposed as a static file that can be downloaded even in production mode Key Points DevTools in Spring Boot 1 4 3 exposes all files on the classpath making them accessible for download including sensitive files like application properties The issue occurs even when the application is run with java jar which should disable DevTools in production mode according to the documentation A demo project is provided to illustrate the issue where files such as application properties can be accessed via an HTTP request Downgrading to Spring Boot 1 4 2 resolves the issue suggesting it is a regression introduced in 1 4 3 The root cause is related to the ClassLoaderFilesResourcePatternResolver which incorrectly resolves classpath resources instead of servlet resources A fix was applied in 7752 and additional tests are being added to prevent this from happening again The problem is considered a serious security issue as classpath files may contain sensitive information like production passwords This issue highlights a critical security vulnerability in Spring Boot 1 4 3 with DevTools where classpath resources are unintentionally exposed posing risks to production environments,1,1,1,0,0,0,0
The document refers to a Duplicate MBean registration issue related to audit events in a Spring Boot application using actuators The error occurs when trying to register an MBean for AuditEventsJmxEndpoint which results in a javax management InstanceAlreadyExistsException Key Points The error occurs during MBean registration for AuditEventsJmxEndpoint stating that an instance with the key abstractEndpointMBean already exists The issue is likely related to changes introduced in 6579 which manually registers an MBean while another one is being registered automatically by EndpointMBeanExporter The exception is thrown by MBeanExporter indicating that the MBean is being registered twice The error message suggests a conflict in the JMX endpoint registration for audit events This issue highlights a conflict where MBeans are being registered both manually and automatically causing duplication and preventing the application from starting correctly,1,0,1,0,0,0,0
The document describes a ClassCastException that occurs when performing an OPTIONS request on a secured heapdump endpoint using Spring Boot 1 5 0 BUILD SNAPSHOT The error results in a HTTP 500 response but the issue does not occur when security is disabled Key Points The issue happens when making an OPTIONS request to the secured heapdump endpoint A ClassCastException is thrown causing a HTTP 500 error The exception is related to casting HttpOptionsHandler to MvcEndpoint in MvcEndpointSecurityInterceptor The problem does not occur when security is disabled for the endpoint A sample project and curl command are provided to reproduce the issue This issue appears to be related to how Spring Boot handles secured actuator endpoints particularly with heap dumps and OPTIONS requests,1,0,1,0,0,0,0
The document discusses an issue where Couchbase cannot be auto configured without Spring Data Couchbase in Spring Boot A BeanCreationException occurs when running a project with CouchbaseAutoConfiguration due to a missing Spring Data Couchbase dependency The problem stems from improper handling of conditions in CouchbaseAutoConfiguration Key Points The issue arises when Couchbase is being auto configured but Spring Data Couchbase is not present causing a TypeNotPresentExceptionProxy The root cause is the ConditionalOnMissingBean annotation on CouchbaseAutoConfiguration CouchbaseConfiguration which lacks necessary class condition checks A workaround is to add Spring Data Couchbase explicitly as a dependency The ideal solution is to ensure Couchbase can be auto configured without requiring Spring Data Couchbase by checking for the presence of CouchbaseConfigurer or CouchbaseConfiguration beans The conditions and checks need to be adjusted to allow auto configuration without breaking existing functionality,1,0,1,0,0,0,0
The document discusses an issue with Spring Boot s configuration meta data where types with generics are written in full making the output more complex For example the meta data for InfoPropertiesInfoContributor Mode includes generic type T leading to jsonCopy name management info git mode type org springframework boot actuate info InfoPropertiesInfoContributor T Mode description Mode to use to expose git information sourceType org springframework boot actuate autoconfigure InfoContributorProperties Git The suggestion is to use the raw class for both type and sourceType simplifying the meta data for better readability and maintainability,1,0,1,0,0,0,0
The document describes an issue encountered after upgrading to Spring Boot 1 4 where overriding a primary ConnectionFactory and creating a secondary ConnectionFactory causes a NoSuchBeanDefinitionException The issue occurs when trying to define both a primary and a secondary ConnectionFactory in the application which worked in previous versions but fails in 1 4 Key Points Working scenarios Only creating a secondary ConnectionFactory works Overriding the primary ConnectionFactory without a secondary one also works Failing scenario Overriding the primary ConnectionFactory and creating a secondary ConnectionFactory The root of the problem seems to involve the ConditionalOnSingleCandidate annotation introduced in Spring Boot 1 4 This annotation checks for a single autowire candidate for ConnectionFactory but when multiple ConnectionFactory beans exist the condition fails leading to the exception Suggested Workaround Using spring rabbit 1 6 1 RELEASE instead of spring cloud starter bus amqp resolves the issue indicating a potential incompatibility between Spring Boot 1 4 and Spring Cloud Brixton The issue was traced to changes in Spring Boot autoconfiguration behavior which may not be fully backward compatible with previous Spring Cloud versions Further investigation and potential fixes are needed involving coordination between the Spring Boot and Spring Cloud teams,1,0,1,0,0,0,0
The document describes an issue where the Spring Boot init script changes the ownership of the var run directory when starting an application causing other services to fail when writing their PID files This happens because the script sets PID FOLDER to var run and during startup chown myappuser var run is executed changing the ownership of the entire directory from root to myappuser preventing other services from writing PIDs Key Points The issue occurs when APP NAME is not defined leading to incorrect PID file handling A workaround is to set the APP NAME variable which prevents this behavior A more permanent fix is proposed such as ensuring permissions are not changed if PID FOLDER is var run or only changing the permissions of subdirectories The fix is expected to be implemented in Spring Boot 1 5 This issue could affect any system relying on var run to store PID files if the init script inadvertently changes ownership,1,0,1,0,0,0,0
The document discusses an issue where the FixedAuthoritiesExtractor in Spring Boot uses an incorrect key The relevant commit adb42ed introduced this problem affecting how authorities are extracted likely leading to incorrect handling of user roles or permissions in security contexts The issue is tied to the mapping of authorities from OAuth or authentication tokens and using the wrong key could result in the application not properly assigning roles or failing security checks,1,0,1,0,0,0,0
The document describes an issue in Spring Boot 1 4 0 M3 and earlier versions where Servlet Container Beans such as Filters Servlets etc are initialized too early in the application lifecycle This eager initialization can lead to several problems such as Inconsistent behavior between unit tests and integration tests Ordering issues when working with AOP or other components that depend on the correct initialization order Key Points The problem originates from AbstractApplicationContext invoking onRefresh which causes EmbeddedWebApplicationContext to call createEmbeddedServletContainer starting Tomcat and initializing all Servlet related beans in the process This early initialization can cause issues because Servlet Beans e g Spring MVC or Spring Security may depend on other beans that aren t fully initialized yet The expected behavior is that Servlet Container Beans should be initialized during finishBeanFactoryInitialization but that approach is not feasible because Tomcat throws an IllegalStateException if Servlets are added after the context is initialized Conclusion The issue has been partially addressed in Spring Boot 1 4 with changes to the initialization sequence However due to limitations with Tomcat and the timing of the Servlet initialization a complete fix can t be applied as part of the finishBeanFactoryInitialization stage The changes are not backported to 1 3 x and this fix will be part of 1 4 only,1,0,1,0,0,0,0
The document outlines a problem encountered after upgrading from Spring Boot 1 3 3 to 1 4 0 M2 The issue arises when packaging an application that uses orm xml for defining JPA mappings but does not scan for entities in the classpath Specifically when the application is packaged into an executable JAR or WAR it throws an odd error class path resource cannot be resolved to URL because it does not exist However the error does not occur if at least one entity is scanned using JPA annotations Key Points The issue only occurs when the application is packaged into an executable JAR or WAR and does not scan for entities relying solely on orm xml The problem does not occur when the application is run via the main method or deployed to Tomcat It seems to be related to an older similar issue 420 A FileNotFoundException is thrown indicating that the class path resource cannot be resolved Example The issue can be reproduced using the provided example project Steps to reproduce mvn clean installjava jar sample spring boot app jarAlternatively change the packaging to WAR and activate the executable war profile Additional Information The issue may be related to changes in Spring Boot s class loader and how JAR files are handled particularly when JarURLConnection is involved A potential fix has been linked to SPR 14246 which will be addressed in future Spring Boot and Spring Framework releases,1,0,1,0,0,0,0
The document describes a build failure issue in the Spring Boot CLI on Windows The root cause of the failure is traced to how fully qualified Windows paths containing a colon are handled These paths are mistakenly treated as explicit URLs e g file classpath or classpath leading to incorrect behavior compared to Unix like platforms The failure occurs when the URLClassLoader or LaunchedURLClassLoader tries to resolve a resource using a fully qualified Windows path A MalformedURLException is thrown when the class loader attempts to create a URL with the Windows path which results in an IllegalArgumentException because of an unknown protocol e g c Key Points The issue is similar to 486 where a workaround was applied However the user prefers to avoid reinstating this workaround and seeks a permanent fix The exception occurs in the following scenario javaCopyLaunchedURLClassLoader loader new LaunchedURLClassLoader new URL new URL jar file src test resources jars app jar getClass getClassLoader loader getResource c Users user bar properties Throws IllegalArgumentExceptionThe error is specific to Windows paths and does not occur with Unix like paths A test case confirms that a regular URLClassLoader fails similarly when used with the same class path Conclusion The failure stems from differences in how URLClassPath behaves when handling Windows paths The document suggests that a more robust solution needs to be implemented to handle Windows paths correctly preventing the IllegalArgumentException in the Spring Boot CLI build process on Windows systems,1,1,1,0,0,0,0
The document describes an issue where an infinite redirect loop occurs when accessing the root actuator endpoint in Spring Boot 1 3 1 with a custom management context path The configuration provided is yamlCopymanagement port 8084 address 127 0 0 1 context path supervisionAttempts to access the endpoint result in the following loop http localhost 8084 supervision redirects to http localhost 8084 supervision http localhost 8084 supervision redirects back to http localhost 8084 supervisionThis issue is linked to a previous problem 4575 but appears to persist under certain conditions While the problem does not always occur without setting management context path it has been reproduced in projects that include spring data rest hal browser in the classpath Removing this dependency resolves the issue The user provides a sample project to reproduce the problem which can be found on GitHub sixrandanes error redirection actuator The issue seems to be related to how Spring Boot handles redirects potentially reversing typical servlet container behavior by redirecting from context path to context path instead of the other way around,1,1,1,0,0,0,0
The document describes an issue where Undertow does not shut down properly when the application context is closed Specifically creating an AccessLogHandler results in the creation of a new XNIO worker that is never stopped leaving non daemon threads running which prevents the JVM from exiting cleanly A proposed fix involves adding a ServletContextListener to track contextDestroyed so that the AccessLogReceiver and XnioWorker can be properly closed However the listeners are not triggered as expected because undeploy needs to be called after stop to ensure they fire While this fix resolves the shutdown problem it introduces a new issue calling DefaultAccessLogReceiver close triggers a NullPointerException NPE during the next run when no file is open This behavior is suspected to be a bug in Undertow The document references a branch with the attempted fix https github com philwebb spring boot tree gh 4793,1,1,1,0,0,0,0
The document reports a SpEL injection vulnerability associated with Spring Boot s whitelabel error page The issue occurs when a user input containing a SpEL Spring Expression Language expression is included in an error message If the input is not properly validated and the whitelabel error page is enabled the SpEL expression can be executed server side leading to a security risk The example provided involves a RESTful service expecting a boolean parameter exactMatch true false If the input is manipulated to include a SpEL expression such as exactMatch test SPEL test it would be evaluated and executed if requested over text html resulting in an error message like java lang IllegalArgumentException Invalid boolean value test SPEL test The recommendation is to disable the whitelabel error page but the issue is acknowledged as needing a fix A potential solution is mentioned and the document requests further testing of the latest snapshot version to verify the fix,1,0,1,0,0,0,0
The document details an issue where Spring Security 4 0 3 snapshots break Spring Boot s default security configuration Specifically the SecurityAutoConfigurationTests are fragile because they check the number of filters in the security filter chain rather than verifying that the expected filters are present This approach is problematic because changes in Spring Security such as those in the latest snapshots can alter the filter chain causing tests to fail The issue also involves the presence of an error controller which interferes with the configuration of the security filter chain preventing certain patterns from being applied Disabling the error controller and setting security ignored none switches off security as expected Additionally multiple filter chains are being created for static content and other requests which is not the intended behavior The problem appears to be a regression in Spring Security and the document suggests that a new Spring Security snapshot should resolve the issue The conversation concludes by noting that this should be fixed on Spring Security s side with the test showing correct behavior after the fix,1,0,1,0,0,0,0
The document highlights that the launch script s restart function does not comply with the Linux Standard Base LSB Core Specification According to the specification the restart function should stop and restart the service if it is already running and start the service if it is not However the current implementation aborts if the service is not running The document suggests reverting commit 9dec0971d62483422f2bdcb970bf68a0a49213fd which introduced this behavior Additionally it mentions that some of the exit codes used are not aligned with the LSB specification and these will be corrected as well,1,0,1,0,0,0,0
The document reports that the spring boot actuator docs jar for version 1 3 0 M5 includes an application properties file with the following contents Copy management context path adminlogging path target logsThis file along with class files related to tests used to produce the documentation should not be included in the final jar package The suggestion is to exclude these unnecessary files from the package to avoid potential issues or confusion,1,0,1,0,0,0,0
The document details a ClassNotFoundException that occurs when setting management security role in a Spring Boot application without Spring Security If a vanilla app with the actuator is created and management security role is specified an error is thrown due to the absence of the SessionCreationPolicy class from Spring Security The root cause is that when the management security property is bound Spring Boot attempts to create a default value for it before checking if it can actually set the value resulting in a NoClassDefFoundError The proposed solutions include creating a new bean ManagementSecurityProperties or using an enum for SessionCreationPolicy to avoid the direct dependency on Spring Security However implementing a proper fix is suggested to be postponed to a future version 1 4 or 2 0 as addressing it in 1 3 would require breaking the current behavior of ignoring unknown fields The discussion also mentions attempts to reproduce the issue via integration tests and a workaround involving moving the security aspects of the actuator to a separate auto configuration element,1,0,1,0,0,0,0
The document describes an issue where ServerProperties is created by both ServerPropertiesAutoConfiguration and SessionAutoConfiguration in a Spring Boot application using Spring Session within a hierarchical context This results in duplicate bean definitions with different names and conditions which can lead to failures in Autowired dependencies elsewhere The user reports that this bug is preventing their server from starting while attempting to upgrade from Spring Boot 1 2 5 to 1 3 A resolution is mentioned stating that the issue has been fixed in the latest snapshots The user switched to the BUILD SNAPSHOT version of Spring Boot which resolved the problem The document ends with a thanks confirming that the workaround was successful,1,0,1,0,0,0,0
The document describes a NullPointerException encountered in DataSourceAutoConfiguration when the EnableCaching annotation is used without manually declaring a CacheManager bean in a Spring Boot application The issue arises because in such cases the DataSourceProperties is not initialized properly leading to the DataSourceAutoConfiguration NonEmbeddedConfiguration constructor receiving a null value for the properties which then causes a cascade of failures The problem can be resolved by manually declaring a CacheManager bean which ensures that the DataSourceProperties is processed before the DataSourceAutoConfiguration is invoked The document also suggests that the issue might be related to an early initialization of beans triggered by a faulty code path in CacheManagerValidatorPostProcessor The issue persists in Spring Boot version 1 3 0 M1 and the user provides a simplified project on GitHub to showcase the problem The conversation also mentions attempts to troubleshoot by removing spring boot devtools and testing against a 1 3 0 BUILD SNAPSHOT,1,0,1,0,0,0,0
The document outlines an issue introduced by a change in commit db1f4891e3e 3290 which brings in a version of json jar that is compiled for Java 8 As a result the configuration processor becomes unusable with older versions of Java such as Java 7 or 6 The conversation suggests setting up a master build with Java 7 to avoid such issues and offers help with configuring Continuous Integration CI for this Additionally there is a realization that the Java 8 API was unintentionally used complicating the situation further,1,0,1,0,0,0,0
The document describes an issue encountered when deploying a Spring Boot application to Azure The problem started after a recent update and causes the app to fail on startup The root cause appears to be related to the LoggingApplicationListener which improperly processes the LOGGING CONFIG environment variable set by Azure The variable contains the value Djava util logging config file d home site wwwroot bin apache tomcat 7 0 52 conf logging properties and Spring Boot attempts to treat this as a relative file path leading to an error where it looks for the file in D Windows system32 Rolling back to Spring Boot 1 3 0 M1 resolves the issue while the problem persists in later snapshots The document discusses debugging efforts including reproducing the issue on Azure and identifying that the LOGGING CONFIG environment variable is misinterpreted by Spring Boot causing it to look for the logging configuration file in the wrong location Further investigation is planned to determine the exact commit that introduced the problem,1,0,1,0,0,0,0
The document discusses a problem with EnvironmentTestUtils where it fails to correctly parse key value pairs if the value contains a colon This is because the utility uses as the delimiter to separate keys and values For example foo bar baz is correctly split into foo and bar baz but foo bar baz is incorrectly split into foo bar and baz causing confusion when tests fail due to incorrect value injection The conversation revolves around whether to fix this issue or revert it in Spring Boot 1 2 5 and move the fix to 1 3 0 There are concerns that changing the behavior might break existing tests that rely on the current parsing logic The suggestion is to either revert the change and document the behavior or allow or to be part of the key and handle the parsing accordingly The goal is to avoid confusion in tests especially when backporting changes between versions,1,0,1,0,0,0,0
The document describes an issue in Spring Boot 1 2 2 RELEASE where disabling all endpoints globally endpoints enabled false does not fully disable specific sub paths of endpoints allowing access to sensitive information For example while accessing admin env returns a message indicating that the endpoint is disabled accessing a sub path like admin env management port still exposes information This behavior is highlighted as a potential security concern as other endpoints such as metrics exhibit the same issue The discussion suggests using a custom condition to handle endpoints enabled more thoroughly possibly in combination with ConditionalOnProperty Additionally it is noted that using SpEL Spring Expression Language for such conditions can result in slower execution compared to property based checks The issue is considered similar to a previously reported problem 2476 and there is a suggestion to reinstate support for relaxed property binding to address the incomplete endpoint disabling,1,0,1,0,0,0,0
The document discusses a security issue where requests to the JolokiaMvcEndpoint in Spring Boot bypass the security filter allowing unauthenticated remote access to JMX The application s configuration includes management security enabled true and endpoints jolokia sensitive true expecting that these settings would secure the jolokia endpoint However while the root jolokia URL is secured more specific paths like jolokia list java lang type Memory remain unprotected The user notes that enabling endpoints jolokia sensitive was necessary to apply any protection to the jolokia endpoint which was unexpected as the documentation suggests that this property defaults to true The security filter logs indicate that while the jolokia endpoint itself is protected deeper paths are not matched by the filter chain leaving sensitive data exposed The document raises the question of whether a blacklist approach i e selectively securing certain paths is an effective strategy for securing management APIs The response from the Spring team indicates that the default for endpoints jolokia sensitive should indeed be true and they plan to align the code with the documentation to ensure consistent behavior,1,0,1,0,0,0,0
The document describes an issue with the endpoints enabled property introduced in Spring Boot 1 2 0 This property is intended to enable or disable all endpoints globally but it does not work as expected The root cause of the issue is a missing return statement in the isEnabled method of the AbstractEndpoint class This bug prevents the proper functioning of the endpoints enabled feature,1,0,1,0,0,0,0
The document discusses an issue in Spring Boot 1 2 where setting the endpoints health sensitive true property no longer protects the health endpoint as it did in version 1 1 x Even though the sensitive property is correctly set verified through debugging the health endpoint remains unprotected Other endpoints such as info continue to function as expected The issue can be reproduced simply by running an application with the argument endpoints health sensitive true In Spring Boot 1 2 despite setting this flag the health checks still return full details when accessed without protection A fix for this issue was merged into the master branch see issue 2120 but the latest 1 2 1 BUILD SNAPSHOT version still exhibits the problem The user who is utilizing Spring Security provides a sample project https github com lbeuster spring boot 2211 to demonstrate the issue The key observation is that the health endpoint itself is not protected but the health checks behave differently when accessed in protected vs unprotected mode Protected mode status UP Unprotected mode status UP diskSpace status UP free 315442941952 threshold 10485760 The conversation suggests that this inconsistency in behavior is related to Spring Security s interaction with the health endpoint in Spring Boot 1 2,1,0,1,0,0,0,0
The document outlines an issue where a custom banner txt is no longer displayed after upgrading to Spring Boot 1 2 0 The user encounters a NullPointerException which is traced to the ResourceBanner getApplicationVersion method The problem arises because the application is in the default package i e no package declaration which causes the code to fail when trying to read the application s version information Moving the application to a named package resolves the issue Although the Spring Boot reference guide section 14 1 discourages using the default package it does not explicitly disallow it The user suggests that the documentation should be updated to be clearer or stricter about avoiding the default package as this is what caused the issue to go unnoticed in their prototype application The conversation concludes with agreement that updating the documentation to strongly discourage using the default package would be beneficial,1,1,1,0,0,0,0
The document highlights an issue encountered when trying to disable the DataSourceHealthIndicator after upgrading from Spring Boot 1 1 9 to 1 2 0 In 1 1 9 the DataSourcesHealthIndicatorConfiguration was controlled by the property health db enabled false but in 1 2 0 it has been changed to management health db enabled false However attempting to set this new property results in a startup error due to a NotReadablePropertyException as ManagementServerProperties does not allow unknown fields ignoreUnknownFields false The user points out the problem and it is acknowledged as a good catch The developers admit that tests missed this issue due to incomplete context and added a missing entry in the release notes to clarify the change in health properties,1,0,1,0,0,0,0
The document discusses an issue where placeholders used in the ConfigurationProperties prefix are not correctly resolved in the generated meta data This problem was identified and addressed in commit 3ad43e0d445d15f03f92f758ced5ee5c64484806 but the change was reverted for now The issue remains unresolved indicating that further work is needed to ensure placeholder resolution works correctly in the context of meta data generation for ConfigurationProperties,1,0,1,0,0,0,0
The document highlights a deployment issue when attempting to run a Spring Boot application on WildFly The error is a NoSuchBeanDefinitionException specifically indicating that no qualifying bean of type org springframework boot autoconfigure jms JmsProperties is found This bean is required for autowiring but the Spring framework cannot resolve it leading to the application failing to deploy The stack trace points to the DefaultListableBeanFactory being unable to resolve the required dependency which is annotated with Autowired This issue suggests that the necessary JMS configuration or properties are missing or not correctly loaded during the deployment on WildFly,1,0,1,0,0,0,0
The document addresses an issue encountered when using Spring Boot 1 2 0 RC2 with Jetty 9 where an IllegalArgumentException Inappropriate listener type is thrown The error occurs when trying to register a ServletContextListener which Jetty 9 deems inappropriate The problem was initially thought to be related to an older bug 1186 which was supposed to be fixed in RC2 The author also attempted to use Jetty 8 but faced issues with missing WebSocket JARs from the repository A workaround involving excluding WebSocket dependencies from the POM was provided which resolved the issue Further investigation revealed that multiple servlet APIs were included which caused the initial error The conversation also touches on a separate SecurityException related to mismatched signer information in the HttpSessionIdListener class likely related to classloader issues After applying the fixes the user confirmed that the application now works properly The document references updates to Spring Boot documentation and highlights the need to synchronize the documentation between different versions,1,0,1,0,0,0,0
The document addresses an issue with the new OnBeanCondition s TypeRegistry specifically the OptimizedBeanTypeRegistry It fails when placeholders are used as class names as it does not handle CannotLoadBeanClassException and BeanDefinitionStoreException in the same way that DefaultListableBeanFactory doGetBeanNamesForType does This issue was initially raised in XD 2352 and the failure in handling these exceptions leads to problems when dealing with certain bean definitions,1,0,1,0,0,0,0
The document discusses an issue encountered in the Spring 1 1 0 M1 release where Spring Security dependencies fail to resolve their version numbers when using BOM Bill of Materials imports in Gradle The same issue is expected to occur with Spring Data dependencies As a temporary workaround the BOM has been removed to provide more time to address the problem A reference is made to issue 825 which is expected to provide a permanent fix The message also includes a mention of filtering that will eventually remove these dependencies,1,0,1,0,0,0,0
The document highlights an issue where the shutdown endpoint in Spring Boot was open by default without any security making it accessible during training sessions Attempts to disable it through the application properties file using endpoints shutdown enabled false did not work initially This was identified as a bug which has since been fixed in a later snapshot version The user asks whether this fix is included in version 1 0 0 RC3 and it seems that the issue is resolved in the snapshot version Additionally the user reports testing other endpoints like dump env health info metrics and trace which also exhibited similar issues with disabling but these too appear to be addressed,1,0,1,0,0,0,0
In Spring Boot 2 0 0 M3 the documentation previously referenced an executable property in the Spring Boot extension which is now outdated This property no longer exists as confirmed by updates in the release The documentation specifically section 60 requires revision to reflect these changes accurately The issue was discussed in a Stack Overflow thread highlighting the need for users to adapt their configurations due to this removal It s important for developers to refer to the latest documentation or community discussions to ensure their applications are built with the correct properties and settings,0,0,1,1,0,0,0
The Spring Boot documentation incorrectly lists org springframework boot actuate autoconfigure EndpointWebMvcConfiguration as the key for adding custom endpoints The correct key is org springframework boot actuate autoconfigure ManagementContextConfiguration as updated in a specific commit Additionally the configuration class defining custom endpoints should use the ManagementContextConfiguration annotation This ensures proper registration and functionality within the management context,0,0,1,1,0,0,0
The issue on the Spring Boot GitHub discusses the need for proper Gradle configuration to ensure annotation processors work correctly Annotation processors require specific dependencies and configurations in the build gradle file To address this you should declare the processors under the annotationProcessor configuration This setup ensures that the necessary classes are generated during the build process avoiding runtime issues Proper configuration helps integrate tools like Lombok and MapStruct which rely on annotation processing to generate code Adjusting the Gradle build script as per the guidelines in the discussion will facilitate seamless integration and functionality of these processors,0,0,1,1,0,0,0
The issue involves improper handling of 404 errors when a Spring Boot application is deployed as a WAR to IBM WebSphere 8 0 0 9 resulting in an HTTP 200 response with a blank page instead of the expected error page This problem occurs with specific versions 1 1 5 RELEASE and 1 2 0 BUILD SNAPSHOT and is not present when deployed on Tomcat The root cause is related to the response being prematurely committed by WebSphere preventing further error handling by ErrorPageFilter Attempts to address this include modifying server configurations to prevent automatic buffer flushing Suggestions also involve wrapping response objects to handle errors more gracefully although these solutions have limitations and may not work in all scenarios The issue highlights potential bugs in WebSphere s handling of servlet responses,0,0,1,1,0,0,0
The reference guide incorrectly describes a message about the default password for shell access It claims a specific message appears but only the message for application endpoint access is shown This has led to confusion because users expect a second differently worded message that never appears The issue stems from the shell defaulting to Spring security when it s in the classpath applying management properties instead To see the described log you must set shell auth simple in your configuration The documentation and log statement need correction to reflect this behavior accurately,0,0,1,1,0,0,0
In a Spring Boot application using HibernateJpaAutoConfiguration with an in memory database on the classpath can lead to tables being dropped from external databases e g Oracle This occurs because HibernateJpaAutoConfiguration getDefaultDdlAuto defaults to create drop impacting databases even if hibernate hbm2ddl auto none is set The automatic configuration creates a default EntityManager scanning for Entity classes and applying create drop during startup To prevent this it s advised to use spring jpa hibernate ddl auto none or explicitly define the EntityManagerFactory bean to avoid unintended table drops Excluding HibernateJpaAutoConfiguration can also mitigate this issue This behavior has been a point of discussion in the community highlighting the need for careful configuration to avoid accidental data loss especially in production environments,0,0,1,1,0,0,0
In a Spring application context properties have a specific order of precedence which determines how values are overridden The external environment and config files hold the lowest priority Higher precedence is given to properties declared in TestPropertySource followed by those specified in test annotations like IntegrationTest The test case provided demonstrates this hierarchy values from IntegrationTest override those from TestPropertySource which in turn override config file values The confusion arises from the unclear documentation regarding the precedence when TestPropertySource and IntegrationTest are used concurrently The issue highlights that properties inlined in TestPropertySource should take precedence over external properties and similar rules are suggested for SpringBootTest This behavior is expected to be standardized in future Spring versions aligning with existing practices in spring test,0,0,1,0,1,0,0
In Java web applications using ServletRegistrationBean requires a URL mapping because servlets need a specific path to handle HTTP requests By default if no URL mapping is provided is assigned allowing the servlet to intercept all requests This setup ensures that the servlet can process requests without explicit mapping maintaining functionality However in certain cases like using ServletContext getNamedDispatcher servlets may not need direct URL access as they are invoked programmatically For instance when using a Jetty proxy servlet as a handler for a DispatcherServlet the servlet can be mapped to a dummy URL and secured which is a workaround to prevent direct access While this approach works it highlights the potential for flexibility improvements such as adding a flag to bypass default mappings accommodating unique use cases more effectively,0,0,1,0,1,0,0
Disabling EmbeddedServletContainerAutoConfiguration in a Spring Boot application disrupts request routing in non embedded containers A sample application demonstrates this issue By excluding this auto configuration the app fails to route requests properly when deployed to an existing Tomcat server resulting in a 404 error Reintroducing the auto configuration resolves the problem suggesting that critical servlet setup is only performed with this configuration Updating the Spring Boot version also fixes the issue indicating improvements in newer releases This highlights the importance of appropriate auto configuration even when not using an embedded container,0,0,1,0,1,0,0
The document outlines a binary compatibility issue introduced in Spring Boot 2 1 0 M4 regarding the ApplicationConversionService getSharedInstance method Previously this method returned a ConversionService but in the new version it returns an ApplicationConversionService which extends ConversionService While this change may seem minor it breaks binary compatibility with Spring Boot 2 0 x meaning client code that calls ApplicationConversionService getSharedInstance must be recompiled to work with Spring Boot 2 1 x This has already affected libraries like jasypt spring boot The document questions whether this breaking change is necessary and suggests that the methods requiring the ApplicationConversionService could still work with a ConfigurableConversionService The commit that introduced this change was intended to register the shared ApplicationConversionService with the BeanFactory and Environment In response the Spring Boot team acknowledges the issue and has pushed a fix to restore binary compatibility with 2 0 x,0,1,1,0,0,0,0
The document discusses a breaking change introduced in Spring Boot 2 1 0 RC1 related to message resolution when using DevTools After upgrading a Spring Boot application with a default messages properties file in src main resources stopped resolving messages when started from an IDE This issue is linked to the enabling of spring messages reloadable true for DevTools which was introduced in 14699 The problem arises because ReloadableResourceBundleMessageSource does not resolve the default basename messages from the classpath unless explicitly prefixed with classpath However even setting spring messages basename classpath messages doesn t resolve the issue due to a custom ResourceBundleCondition that incorrectly processes the basename searching for classpath classpath messages properties The document outlines three main issues Enabling spring messages reloadable true breaks the default basename messages Using classpath messages should work but fails due to the custom condition DevTools introduces this broken behavior by default As a result the Spring team decided to revert the changes introduced in 14699 and 13377 recognizing that the approach caused more issues than it solved These changes will be reconsidered for a future release as they won t be included in the upcoming 2 1 0 RELEASE,0,1,1,0,0,0,0
The document discusses a bug related to PropertySourcesKey in Spring Cloud where it fails to recognize a replaced property source with the same name This issue was introduced in version 2 0 with the new ConfigurationPropertySource code and does not exist in version 1 5 The problem was reported in issues 328 and 290 The issue has been resolved in version 2 0 1 BUILD SNAPSHOT and users have confirmed the fix There was also a request to backport the fix to version 1 5 but a new issue was created instead Additionally the document mentions possible improvements to how changes in property sources are tracked by keeping a reference to the original source and ensuring that change events are properly fired,0,1,1,0,0,0,0
The document discusses a recurring issue with a NoClassDefFoundError warning during WildFly deployment when using Spring Boot and Spring Security The error originates from the import of ServerHttpSecurityConfiguration which implements WebFluxConfigurer This problem occurs because the WebFluxConfigurer class is missing due to an optional dependency causing the deployment to fail with a NoClassDefFoundError The issue was initially thought to have been fixed in Spring Boot 2 0 0 but reappeared in later versions specifically 2 0 9 RELEASE The document further explains that the problem arises when JBoss loads all classes during bootstrapping encountering the missing WebFluxConfigurer A potential workaround involves updating to newer versions of Spring Security 5 2 1 RELEASE which resolves the issue However adding the missing dependency can introduce another bug such as the CSRF token error in REST communication The document suggests upgrading to Spring Boot 2 2 x which manages Spring Security 5 2 x as a long term solution It also recommends filing a new bug report if the issue persists with a sample project to reproduce the failure,0,1,1,0,0,0,0
The document highlights an issue where spring boot test support is incorrectly included as a transitive dependency of spring boot loader The problem arises because the dependency is missing the scope test scope declaration which means it is included in non test builds as well This unintended inclusion could lead to unnecessary dependencies being pulled into runtime or production environments The fix would involve properly setting the dependency s scope to test ensuring it is only available during the testing phase and not in production builds,0,1,1,0,0,0,0
The document describes an issue where context caching is prevented when two test classes which are otherwise identically configured are located in different packages This problem occurs during context initialization in Spring Boot tests specifically when the AutoConfigureMockMvc annotation is used In the provided example two test classes FooTests and BarTests are located in different packages com example foo and com example bar Despite having the same configuration the Spring context is loaded twice This happens because AutoConfigurationPackages Registrar returns a PackageImport based on the test class s package and since the packages differ the cache keys do not match The issue was introduced in Spring Boot 1 5 due to changes made in commit fa6a13859871b418d1e01fe3f8579b1bf8c5825e for issue 7953 which modified how package imports are determined inadvertently affecting context caching,0,1,1,0,0,0,0
The document describes an issue encountered when upgrading a Spring Boot project from version 1 4 1 to 1 5 2 and deploying it on Google AppEngine The deployment fails with a java security AccessControlException caused by the usage of threads in the OnClassCondition getOutcomes method Google AppEngine enforces security restrictions that prevent applications from modifying thread groups which results in a failure when Spring Boot tries to create threads during the class condition check The root cause appears to be the use of threads in the OnClassCondition class specifically in OnClassCondition GetOutcomesThread Since AppEngine does not allow thread creation within applications this leads to the AccessControlException The document suggests the need to either eliminate the use of threads in getOutcomes or make their usage configurable allowing the application to run without violating AppEngine s security policies A reference is made to a previous similar issue 4662 that was resolved indicating that this problem might require a similar solution,0,1,1,0,0,0,0
The document describes an issue where disabling the ErrorPageFilter through the setRegisterErrorPageFilter false method in a SpringBootServletInitializer configuration does not prevent the filter from being loaded Despite the configuration the filter is still registered due to a Configuration class in SpringBootServletInitializer that explicitly loads the ErrorPageFilter The user suggests that the filter should not be loaded when setRegisterErrorPageFilter false is used but currently the only way to fully disable the filter is by manually configuring a FilterRegistrationBean and setting its enabled property to false This behavior is seen as unexpected as the user believes the filter should not require such explicit configuration to be disabled The problem seems to have been introduced in a specific commit linked in the document,0,1,1,0,0,0,0
The document highlights an issue with the HealthMvcEndpoint in Spring Boot It notes that the isUserInRole method only checks for roles not authorities which can cause problems when trying to expose detailed health information even if the user has the correct authority This issue is related to another reported problem 8255 where similar role versus authority discrepancies were discussed The suggestion implies that users with proper authorities should be able to access detailed health information but the current implementation only checks for roles,0,1,1,0,0,0,0
The document discusses an issue encountered with Spring HATEOAS s ControllerLinkBuilder methodOn when using Spring Boot s hot restart feature DevTools The user describes that after modifying and saving some code the application triggers a hot restart leading to a ClassCastException The exception occurs because the proxied controller instance created by CGLIB cannot be cast to the original controller class The problem does not occur on the first run but rather after a hot reload triggered by DevTools The stack trace shows that the error happens when attempting to cast the proxied controller returned by methodOn to the original controller class The user tried removing Spring HATEOAS to confirm the issue which made the exception disappear indicating that the problem is related to HATEOAS A potential fix mentioned by a Spring developer involves customizing the restart class loader to avoid classloader conflicts though the user expresses concerns that excluding all sources from DevTools would defeat its purpose A reference to a possible regression in Spring HATEOAS is also raised as similar issues were previously reported and closed The document concludes with the user confirming that the issue was eventually fixed and the final solution involved addressing the caching mechanism in Spring DevTools for HATEOAS related classes,0,1,1,0,0,0,0
The document addresses issues with configuring Spring Boot Actuator security after upgrading to version 1 5 1 from 1 4 x The user is experiencing difficulties with securing Actuator endpoints specifically around roles and permissions In Spring Boot 1 5 1 the management security roles property behaves differently than in previous versions In 1 4 x authorities were accepted without the ROLE prefix but in 1 5 1 the property strictly interprets roles causing access denial even when proper authorities are assigned To resolve this the user tried disabling management security management security enabled false but this wasn t a proper solution as it removed all security checks from Actuator endpoints The suggested workaround involves giving the WebSecurityConfigurerAdapter higher precedence by using Order ManagementServerProperties ACCESS OVERRIDE ORDER and properly configuring roles with the ROLE prefix Another proposal is to introduce a new property management security authorities to handle authorities without ROLE prefixes allowing more flexibility Though the user was able to access the actuator health endpoint it only returned minimal information even for authenticated users The document concludes by referencing a sample project on GitHub that reproduces the issue and outlines the changes in behavior from Spring Boot 1 4 x to 1 5 1,0,1,1,0,0,0,0
The document describes an issue where the BasicBatchConfigurer class in Spring Batch throws a NoClassDefFoundError if the JpaTransactionManager class is not present in the classpath The problem arises because BasicBatchConfigurer directly references JpaTransactionManager creating an unnecessary hard dependency on it even in environments where JPA is not used The recommendation is to delegate the use of JpaTransactionManager to an inner class similar to how LocalValidatorFactoryBean HibernateValidatorDelegate avoids hard dependencies by only using the class when needed The document includes a detailed discussion between developers analyzing why the issue occurs and investigating JVM behavior related to class loading and verification The issue is related to how the JVM verifies class types and in some environments this verification can cause JpaTransactionManager to be loaded unnecessarily leading to the error A workaround involves running the application with the noverify JVM option but this is not a complete solution The document also includes a sample project and stack trace to illustrate the issue and concludes by asking for more information to fully resolve the problem,0,1,1,0,0,0,0
The document discusses a bug in Spring Boot s TestRestTemplate that causes URL percent encoding to be applied twice when sending requests with parameters that need encoding For example when sending a GET request to http localhost param something the expected encoded URL should be http localhost param 7Bsomething 7D but instead it ends up as http localhost param 257Bsomething 257D indicating double encoding This issue is demonstrated through a Groovy test script using RequestEntity and UriComponentsBuilder The bug is traced back to a method called createRequestEntityWithExpandedUri which first converts the URL to a string and then re parses it causing the double encoding The problem was introduced in Spring Boot versions 1 4 4 and 1 5 1 while it worked correctly in 1 4 3 The document also mentions that the bug affects methods that take a URI as input but there is a suggestion that methods accepting String URLs may also be impacted The author encourages users experiencing similar problems with String URLs to open a new issue as this may require a separate fix,0,1,1,0,0,0,0
The document describes an issue encountered after upgrading to Spring Boot 1 5 1 RELEASE where the application fails to start when a bean of type Map is annotated with ConfigurationProperties and a prefix This issue did not exist in Spring Boot 1 4 4 RELEASE The exception points to an Invalid target for Validator error during bean creation The problem is specific to how Spring Boot 1 5 1 binds properties to a Map or HashMap bean using the ConfigurationPropertiesBindingPostProcessor An example setup is provided including the pom xml Application java and application yml files The error occurs when the properties are bound to a Map or Properties object even though the same code worked in previous versions of Spring Boot The document includes detailed error logs and additional examples of beans using a Map or Properties object with the ConfigurationProperties annotation all resulting in similar binding failures in Spring Boot 1 5 1 RELEASE,0,1,1,0,0,0,0
The document discusses an issue experienced after upgrading Spring Boot from version 1 4 3 RELEASE to 1 5 1 RELEASE where the Actuator s beans endpoint returns an empty array when the application is launched using Spring Tool Suite STS This issue does not occur when the application is run as a regular Java application or from the command line The problem seems to be related to the MBean property configuration where the property LiveBeansView MBEAN DOMAIN PROPERTY NAME returns an empty string instead of null The author provides steps to reproduce the problem including creating a Spring Boot starter project with the spring boot starter actuator and spring boot starter web dependencies and disabling security with management security enabled false They also note that other Actuator endpoints work fine and offer to provide a sample if necessary The document ends by showing a successful curl request that returns the expected beans data when the issue is resolved,0,1,1,0,0,0,0
The document discusses an issue with resource duplication when using classpath xml patterns in a Spring Boot fat jar When searching for resources two URLs are used for the classpath LaunchedUrlClassLoader jar file target app jar BOOT INF classes System classloader jar file target app jar Both loaders find the same resources leading to duplication The problem arises because the system classloader doesn t ignore resources inside BOOT INF which should be handled exclusively by the LaunchedUrlClassLoader The issue persists in Spring Boot 1 4 3 and Spring 4 3 5 snapshots with resources being detected twice once from relative and once from absolute paths The problem has been acknowledged and although a potential fix was tested it hasn t fully resolved the issue yet Developers are working on backporting the fix to the Spring 4 3 x line,0,1,1,0,0,0,0
The document describes a build failure related to port conflicts in LocalDevToolsAutoConfigurationTests Four tests are failing because they attempt to start Tomcat on port 8080 which is already in use by another process likely httpd on the user s machine This issue appears to be caused by a recent change as the user previously didn t encounter this problem with httpd running on port 8080 Key Points Tests affected 4 tests from LocalDevToolsAutoConfigurationTests Error ConnectorStartFailedException due to Tomcat failing to start on port 8080 Tomcat s embedded servlet container cannot bind to port 8080 for the tests leading to build failures The issue seems to have been introduced in Spring Boot 1 5 The problem was resolved and the user confirmed that the build works correctly again after a fix,0,1,1,0,0,0,0
The document describes an issue encountered after upgrading Spring Boot from 1 4 0 to 1 4 1 where the META INF orm xml file is no longer being loaded This file is critical for managing JPA entity mappings especially when annotations are not used and instead XML based configurations are relied upon Key Points In Spring Boot 1 4 0 the META INF orm xml file was successfully detected and loaded during application startup After upgrading to 1 4 1 the orm xml file is no longer loaded as evidenced by the missing mapping files in the logs Debugging shows that the PU root URL Persistence Unit root URL in Spring Boot 1 4 1 now points to a different location the Gradle cache for Spring Boot auto configuration which might be the cause of the issue The problem may be linked to a regression caused by changes made to fix another issue 6635 Analysis The PU root URL is different between 1 4 0 and 1 4 1 pointing to a project directory in 1 4 0 but to the Spring Boot auto configuration jar in 1 4 1 The META INF orm xml file is not being located correctly in the new setup The problem may also be related to Spring ORM rather than Spring Boot itself as suggested by the debug investigation Workaround A temporary workaround is provided by adding a custom configuration class that manually configures the EntityManagerFactoryBuilder to ensure the persistence unit root location is set correctly javaCopy Configurationpublic class PersistenceUnitRootWorkaroundConfiguration Bean public EntityManagerFactoryBuilder entityManagerFactoryBuilder JpaProperties properties JpaVendorAdapter jpaVendorAdapter ObjectProvider PersistenceUnitManager persistenceUnitManagerProvider return new EntityManagerFactoryBuilder jpaVendorAdapter properties getProperties persistenceUnitManagerProvider getIfAvailable null Conclusion This issue seems to be a regression introduced in Spring Boot 1 4 1 For the time being the provided workaround ensures that META INF orm xml is correctly loaded However a more permanent fix is needed in future releases to address this problem,0,1,1,0,0,0,0
The document discusses a problem encountered when switching to spring boot starter jetty in a Spring Boot application that also uses Spring Data JPA The application works fine with Tomcat and Undertow but fails when running with Jetty throwing a ValidationException The exception indicates that javax el ExpressionFactory could not be loaded suggesting that an EL Expression Language implementation is missing from the classpath Root Cause The issue stems from the removal of the spring boot starter validation dependency in Spring Boot 1 4 which used to be included transitively via spring boot starter web In addition jetty jsp was removed which also removed the EL API dependency required for Spring Data JPA validation Suggested Fixes Update Dependency Exclusion The user mistakenly marked Tomcat as provided instead of fully excluding it Properly excluding Tomcat from the dependencies would help avoid potential classpath conflicts The correct approach is documented in the Spring Boot reference guide Add Missing EL API Dependency Adding the EL implementation manually to the project resolves the javax el ExpressionFactory issue The following dependency should be added to the pom xml file xmlCopy dependency groupId org glassfish web groupId artifactId javax el artifactId version 3 0 0 version dependency Conclusion The issue is due to missing dependencies when using Jetty with Spring Data JPA The EL API dependency was removed unintentionally when jetty jsp was excluded Adding the necessary EL dependency should resolve the issue,0,1,1,0,0,0,0
The document describes an issue in Spring Boot 1 4 that breaks Tomcat load balancing using mod jk for AJP Apache JServ Protocol with sticky sessions In previous versions of Spring Boot the JSESSIONID cookie was correctly appended with the JVM ROUTE allowing load balancers to route traffic appropriately However in Spring Boot 1 4 this behavior is broken causing mod jk to fail and resulting in round robin routing instead of sticky sessions Root Cause The issue is tied to the new LazySessionIdGenerator introduced in Spring Boot 1 4 which is created as a stateless object This results in improper initialization of the jvmRoute and other session related attributes that were previously initialized in ManagerBase startInternal Workaround A custom bean can be used to fix the issue in Spring Boot 1 4 by ensuring that the session ID generator is correctly configured when Tomcat starts javaCopy Beanpublic EmbeddedServletContainerCustomizer tomcatCustomizer return container if container instanceof TomcatEmbeddedServletContainerFactory TomcatEmbeddedServletContainerFactory container addContextCustomizers context context addLifecycleListener event if event getType equals Lifecycle START EVENT Context event getSource getManager getSessionIdGenerator setJvmRoute ManagerBase context getManager getJvmRoute Proposed Fix Modify the LazySessionIdGenerator to handle the jvmRoute and other attributes correctly either by adding a constructor that accepts StandardSessionIdGenerator or by adjusting the initialization process The document suggests that while downgrading Tomcat did not resolve the issue this workaround bean should help restore the desired behavior in Spring Boot 1 4,0,1,1,0,0,0,0
The document highlights an issue with Spring Boot 1 4 0 RELEASE using embedded Tomcat where the access log is not flushed regularly In previous versions like 1 3 7 the access log was flushed within seconds or minutes but now it only flushes on log rotation or after several hours leading to significant delays or missing logs The problem is tied to changes in the way the access log valve is handled in Tomcat Previously the context s background processor performed the log flushing every 30 seconds However the access log was moved to the engine in Spring Boot 1 4 and the engine s backgroundProcessorDelay is set to 1 by default meaning no regular flushing occurs Workaround To resolve the issue users can add a bean to manually set the backgroundProcessorDelay for the Tomcat engine to 30 seconds ensuring regular flushing javaCopy Beanpublic TomcatEmbeddedServletContainerFactory tomcatFactory return new TomcatEmbeddedServletContainerFactory Override protected TomcatEmbeddedServletContainer getTomcatEmbeddedServletContainer Tomcat tomcat tomcat getEngine setBackgroundProcessorDelay 30 return super getTomcatEmbeddedServletContainer tomcat This issue appears to be an unintended side effect of the changes introduced in 6311 and could be addressed in future releases,0,1,1,0,0,0,0
The document discusses an issue in Spring Boot where the SampleHypermediaJpaApplication fails to start due to a NullPointerException The exception occurs in the curieProvider method of the EndpointWebMvcHypermediaManagementContextConfiguration class The root cause is that server getPort can be null which was overlooked while fixing 4502 This regression did not affect the CI tests since they passed possibly because the tests didn t catch the scenario where server getPort was null The oversight highlights the importance of handling potential null values especially when applying changes like those in 4502,0,1,1,0,0,0,0
The document discusses a regression in Spring Boot 1 4 0 SNAPSHOT where Jersey JAXB and Jackson no longer honor the XmlTransient annotation causing issues such as infinite recursion in JSON serialization In Spring Boot 1 3 5 XmlTransient was correctly respected but after upgrading to 1 4 0 the annotation is ignored leading to incorrect JSON output and potential serialization exceptions The root cause is a change in how Jersey is configured with Jackson s ObjectMapper which no longer processes JAXB annotations properly A suggested fix involves adding the jackson xc library and registering the JAXB annotation introspector to restore the expected behavior,0,1,1,0,0,0,0
The document discusses an issue in Spring Boot 1 3 x where an application launched using java jar always returns an exit code of 0 even when an exception causes the application to exit This behavior started with the exit code enhancements introduced in Spring Boot 1 3 2 which inadvertently made the Boot Launcher return a non zero exit code only when explicitly configured rather than by default in the case of failure Key Points The exit code is always 0 when using java jar even if the application fails This issue was introduced with enhancements in Spring Boot 1 3 2 A sample project demonstrating the issue is available at nonzeroexit The fix is expected in Spring Boot 1 3 6 but no specific release date is mentioned as 1 3 5 had just been released The issue will likely be resolved in the upcoming 1 3 6 release restoring the expected behavior of returning a non zero exit code when the application exits due to an exception,0,1,1,0,0,0,0
The document describes an issue in Spring Boot 1 4 0 M1 where enabling trace logging causes an exception during application startup The error occurs when the InfoEndpoint bean is being created resulting in a MissingFormatArgumentException due to an incorrect format specifier s in the logging statement within PropertiesConfigurationFactory Key Points The exception is triggered when trace logging is enabled at the root level The stack trace points to line 234 of PropertiesConfigurationFactory where the following line is causing the issue javaCopythis logger trace String format Properties n s this properties The issue can be fixed by replacing the incorrect format string with javaCopythis logger trace Properties this properties The problem was introduced in a specific commit cafe1dc and affects only Spring Boot 1 4 This is likely the result of a search and replace operation that unintentionally introduced the formatting error in the logging statement,0,1,1,0,0,0,0
The document discusses an issue with the MessageChannelMetricWriter in Spring Boot 1 3 The problem arises when trying to export metrics via a message channel as the MessageChannelMetricWriter bean in MetricsChannelAutoConfiguration is not being picked up by MetricExportAutoConfiguration unless it is explicitly marked with ExportMetricWriter A user reports that after manually declaring this writer in their configuration metrics start appearing periodically in STDOUT as defined by MetricExportProperties The configuration includes javaCopy Beanpublic MessageChannel metricsChannel return new DirectChannel Bean ExportMetricWriterpublic MessageChannelMetricWriter messageChannelMetricWriter return new MessageChannelMetricWriter metricsChannel Bean ServiceActivator inputChannel metricsChannel public MessageHandler metricsHandler return System out println Key Points The issue seems to be a regression from earlier Spring Boot versions before 1 3 where MessageChannelMetricWriter was automatically declared in MetricRepositoryAutoConfiguration The metricsChannel bean was also declared by default in those earlier versions The problem can be worked around by adding the ExportMetricWriter annotation manually which allows the metrics to be exported via the message channel Additional Discussion The issue was closed and users were directed to the Spring Boot documentation for newer versions which clarifies how to integrate message channels for metrics A test called MetricExportAutoConfigurationTests defaultExporterWhenMessageChannelAvailable should ensure that MessageChannelMetricWriter is present in the MetricExporters A user also points out that when running a sample project only a small subset of metrics appears in STDOUT compared to the more extensive metrics displayed in the browser The user asks how to configure the system to print all metrics to the console,0,1,1,0,0,0,0
The document discusses a regression in Spring Boot 1 3 3 when using Spring Cloud Config to set logging properties logging file and logging config The issue reported in 5073 results in system properties like LOG FILE not being set when these properties are configured via Spring Cloud Config This functionality worked in Spring Boot 1 3 2 with Spring Cloud Brixton M4 but stopped working in 1 3 3 and later versions Tested Versions Spring Boot Spring Cloud Working 1 3 2 Brixton M4 Yes1 3 3 Brixton M4 No1 3 4 SNAPSHOT Brixton M5 No1 3 4 SNAPSHOT Brixton RC1 NoExpected Behavior Setting logging file and logging config via Spring Cloud Config should result in system properties like LOG FILE being set and these values should be usable within Logback configuration Actual Behavior Only the PID property is set while LOG FILE remains unset causing Logback to use the default value LOG FILE IS UNDEFINED Workarounds Spring Cloud Config plain text file support Use environment properties directly in the logging configuration e g logging file instead of LOG FILE Logback specific solution Use the springProperty tag in the Logback configuration to access environment properties directly without relying on system properties The issue seems related to changes in the logging listener implementation introduced in Spring Boot 1 3 3 which affects the order of listeners A potential fix involves ensuring an ApplicationListener ApplicationEnvironmentPreparedEvent runs before the config file listener to set the logging properties correctly A reproduction project is available for further investigation https github com shakuzen boot issue 5491,0,1,1,0,0,0,0
The document describes a regression in Spring Boot 1 3 3 where the app fails to start due to an exception related to unresolved placeholders in log file paths Specifically the issue occurs when the PID placeholder is used in the logging file property as seen in the following exception CopyCaused by java lang IllegalArgumentException Could not resolve placeholder PID in string value tmp cm log PID The placeholder PID is not being resolved leading to the application failing during startup The issue arises during the initialization of logging particularly in LoggingApplicationListener In config application yml the logging configuration is defined as yamlCopylogging file tmp cm log PID This regression is caused by changes introduced in commit ddfadce for issue 5073 A workaround is suggested where the PID value is manually set using the following code before calling SpringApplication run javaCopySystem setProperty PID new ApplicationPid toString For testing environments where the main method is not used the property can be set in a BeforeClass method or a different configuration for logging file can be used in tests,0,1,1,0,0,0,0
The document describes an issue introduced in Spring Boot 1 3 3 RELEASE where including Spring DevTools causes an exception if DataSourceProperties is not initialized Specifically when using a custom JDBC datasource such as HikariCP with custom encryption for credentials the application fails to start with an error related to missing DataSourceProperties The same configuration worked in Spring Boot 1 3 2 and prior versions The error occurs because DevTools tries to configure an in memory database shutdown executor but can t find a bean of type DataSourceProperties resulting in the following exception Copyorg springframework beans factory UnsatisfiedDependencyException Error creating bean with name inMemoryDatabaseShutdownExecutor No qualifying bean of type org springframework boot autoconfigure jdbc DataSourceProperties found Several users report the same issue with Spring Boot 1 3 3 and later versions including 1 4 1 and 1 5 9 The problem can be temporarily resolved by Excluding DevTools from the project which disables class reloading but avoids the error Adding EnableConfigurationProperties DataSourceProperties class to a configuration class ensuring DataSourceProperties is available The issue has been labeled as a regression and is expected to be fixed in Spring Boot 1 3 4 RELEASE Users are advised to upgrade to 1 3 4 or later once the fix is released For now workarounds and sample projects are suggested to help replicate or temporarily resolve the issue,0,1,1,0,0,0,0
The document discusses a regression introduced in Spring Boot 1 3 2 that affects applications using a parent child context hierarchy The issue occurs when command line arguments such as spring config name someName are not passed to the parent context when calling SpringApplicationBuilder run This results in the application not loading the intended configuration files as the arguments are not added to the environment causing the default configuration application properties to be loaded instead Before Spring Boot 1 3 2 the SpringApplicationBuilder run method would pass the command line arguments to the parent context while initializing but in 1 3 2 a new method configureAsChildIfNecessary was introduced This method calls the parent context without passing the command line arguments leading to the described behavior The user provides a simplified version of their code which builds the spring application with a parent child context hierarchy javaCopypublic ConfigurableApplicationContext setupSpring String args SpringApplicationBuilder application new SpringApplicationBuilder ConfigurableApplicationContext applicationContext application sources DataSourceConfig class web false child FrameworkConfig class bannerMode Banner Mode OFF web false child TrcConfiguration class bannerMode Banner Mode OFF run args return applicationContext The user notes that this issue did not exist in Spring Boot 1 2 6 and after modifying the Spring Boot source code to pass the command line arguments to configureAsChildIfNecessary the problem was resolved The issue is identified as a regression caused by the commit https github com spring projects spring boot commit ee3d4b34a0b232cb5f72f900462594ad9c70998a,0,1,1,0,0,0,0
The document highlights an issue introduced in Spring Boot 1 3 1 RELEASE where the RUN ARGS of an executable WAR file is not being processed correctly The issue stems from quotes mistakenly surrounding the RUN ARGS in the launch command which causes the arguments to be ignored The command in question is shellCopy start stop daemon start quiet chuid myapp name myapp make pidfile pidfile var run myapp myapp pid background no close startas usr bin java chdir usr share myapp lib Dsun misc URLClassPath disableJarChecking true jar usr share myapp lib myapp 0 0 1 SNAPSHOT war spring profiles active prod logging file var log myapp myapp log The quotes surrounding spring profiles active prod logging file var log myapp myapp log prevent the RUN ARGS from being properly interpreted This issue did not exist in 1 3 0 RELEASE where the quotes were not present The problem is traced back to commit 81a4763 and a sample project demonstrating the issue is provided https github com westse launcher java opts bug Although a fix was applied it introduced a Shellcheck warning for missing quotes around arguments The final solution involves using an array to handle the arguments correctly without causing the quoting issue,0,1,1,0,0,0,0
The document describes an issue where a service script that worked with Spring Boot 1 3 0 stopped functioning correctly in Spring Boot 1 3 1 The problem is related to a syntax error in the script when running a Spring Boot JAR as a service as described in a StackOverflow post The issue appears to be caused by a bash version compatibility problem The script uses syntax that works with bash 4 while the user is running bash 3 2 25 The solution involves updating the script to use more compatible syntax such as log file 2 1 A workaround is provided allowing users to define their own custom launch script using the embeddedLaunchScript option Links to the Maven and Gradle documentation are supplied and a patched version of the script is recommended The user confirms that the patched version works on their server running bash 3,0,1,1,0,0,0,0
The document discusses an issue where setting ignoreUnknownFields false in ConfigurationProperties causes environment variables from the system environment to not be bound in Spring Boot Specifically the relaxed binding fails to map environment variables such as TEST ENV FOO BAR to the property test env foo bar when running the application The issue occurs because the DefaultPropertyNamePatternsMatcher fails to match the delimiters vs between the environment variable and the expected property name The problem is reproduced with sample code provided in the document and the environment variable TEST ENV FOO BAR Hallo does not bind to the fooBar property in the TestProps class A proposed solution is to modify DefaultPropertyNamePatternsMatcher to treat different delimiters and as equivalent This change while altering the behavior of the matcher would allow the relaxed binding to work correctly Another approach is to create the matcher with all relaxed variants of the property name test env ensuring that the environment variable is correctly matched In summary the issue is caused by the mismatch between delimiters in environment variables and property names and the proposed fixes involve modifying how the matcher handles delimiters or relaxed variants of property names,0,1,1,0,0,0,0
The document describes an issue with Spring Boot 1 3 0 when deploying to Google App Engine GAE Specifically the error occurs due to the introduction of the BackgroundPreinitializer in Spring Boot 1 3 0 which attempts to modify thread groups something that GAE restricts for security reasons This causes a java security AccessControlException during the startup process The problem did not exist in earlier versions like 1 2 7 RELEASE or 1 1 0 BUILD SNAPSHOT A suggested fix involves either disabling the BackgroundPreinitializer on GAE or configuring it to use GAE s custom thread factory ThreadManager currentRequestThreadFactory Additionally GAE is a Servlet 2 5 container which requires extra steps for compatibility with newer Spring Boot versions Users are advised to follow the Spring Boot reference documentation and use the spring boot legacy project for proper deployment on GAE,0,1,1,0,0,0,0
The document describes a regression in Spring Boot 1 3 0 that affects the initialization order of Jersey s WebApplicationInitializer In previous versions JerseyAutoConfiguration was annotated with Order Ordered HIGHEST PRECEDENCE but in 1 3 0 it was changed to AutoConfigureOrder Ordered HIGHEST PRECEDENCE This change causes the SpringWebApplicationInitializer from jersey spring3 to be invoked first in some cases leading to unexpected behavior The user references a StackOverflow post here where Dave Syer suggested a workaround However this workaround only works if done in a WebApplicationInitializer annotated with Order Ordered HIGHEST PRECEDENCE The document also points to the culprit commit and suggests that the replacement of Order with AutoConfigureOrder should have been handled on a case by case basis implying that this change may have affected other auto configuration classes as well,0,1,1,0,0,0,0
The document discusses an issue introduced in Spring Boot v1 2 6 RELEASE where environment variables are no longer correctly bound to properties when using a combination of a YAML file and OS environment variables in classes annotated with ConfigurationProperties The problem did not exist in v1 2 5 RELEASE and a unit test to reproduce the issue is provided in the referenced GitHub repository https github com jgoelen spring boot env bugThe issue was traced to commit 1abd0879cab4aeadffa4687666120c9512fa8ccd using git bisect A fix is mentioned and users are invited to test it in the 1 2 7 BUILD SNAPSHOT version The conversation also includes a unit test example in PropertiesConfigurationFactoryTests to replicate the issue The problem is acknowledged as difficult to track down but it appears to be resolved with the fix,0,1,1,0,0,0,0
The document discusses an issue where after upgrading from Spring Boot 1 3 0 M4 to 1 3 0 M5 form parameters sent via POST appear to be decoded with ISO 8859 1 instead of UTF 8 This behavior change may be related to the reordering of filters in the newer version specifically the OrderedCharacterEncodingFilter which previously had higher precedence The issue is that the HiddenHttpMethodFilter now runs before the CharacterEncodingFilter leading to incorrect encoding of request parameters A suggested workaround is to declare your own OrderedCharacterEncodingFilter and set its order to HIGHEST PRECEDENCE ensuring it runs before other filters that access the request parameters The conversation also mentions that this issue persists in other versions like 2 0 and 2 7 3 especially when Spring Security is involved which may affect the filter ordering A workaround using a custom configuration to enforce UTF 8 encoding is provided The issue is acknowledged and the user is advised to upgrade to the next release when available,0,1,1,0,0,0,0
The document describes an issue where Spring Boot 1 2 0 generates links using the http protocol instead of https when the application is configured to use HTTPS only This behavior differs from version 1 1 10 where links were correctly generated with the https protocol The issue occurs when using spring boot starter data rest and Jetty as the server To reproduce the issue the user provides a modified version of the gs accessing data rest example where HTTPS is enabled When running the application with Spring Boot 1 2 0 and querying it via curl k https localhost 8443 the server responds with links using http However when reverting to version 1 1 10 the same query returns links using https The problem appears to be related to how Spring Data Rest interacts with Jetty Specifically Spring Data Rest is calling ServletUriComponentsBuilder fromServletMapping but the HttpServletRequest is reporting the scheme as http instead of https This may be due to a change in Spring Data Rest as the auto configuration in Spring Boot has not significantly changed between versions The document notes that a test case was added to reproduce the issue and further investigation suggests that the configuration lines javaCopyconfig setSecureScheme https config setSecurePort port might not be necessary as they primarily affect HTTP to HTTPS redirection which is not relevant when the connector is already configured for HTTPS,0,1,1,0,0,0,0
The document highlights an issue where the fork false configuration option in Spring Boot is ignored if Spring Loaded a hotswap classloader is present This behavior was introduced after a specific change in the Spring Boot codebase commit f4fbc3e33955c34aae21e93d8b235d9914213080 Previously users were able to disable forking by setting fork false but the new logic disregards this setting when Spring Loaded is detected The discussion points out that the underlying problem is that the fork property is being set to false when it should remain a null Boolean unless the user explicitly sets it If the user sets fork false the application should respect that and not enable forking The issue was tested on a 1 2 1 BUILD SNAPSHOT and the fix worked as expected The conversation ends with confirmation that the problem was resolved and the solution now correctly handles the fork false setting regardless of the presence of Spring Loaded,0,1,1,0,0,0,0
The document describes an error encountered with MongoAutoConfiguration in Spring Boot 1 2 0 when the project does not use Spring Data MongoDB The root cause is the missing MongoDbFactory class which is referenced by the MongoAutoConfiguration class leading to a TypeNotPresentExceptionProxy error This issue did not occur before version 1 2 0 The stack trace indicates an ArrayStoreException caused by a TypeNotPresentExceptionProxy while processing annotations which eventually leads to an error creating a Mongo bean The error can be avoided by explicitly excluding MongoAutoConfiguration in the EnableAutoConfiguration annotation javaCopy EnableAutoConfiguration exclude MongoAutoConfiguration class The issue is related to changes in Spring Boot s auto configuration mechanism in version 1 2 0 The MongoDB client library version used in the application is incompatible with the new Spring Boot configuration resulting in a NoSuchMethodError for MongoClientOptions builder The document suggests that this error is distinct from other reported MongoDB issues and recommends opening a separate issue for further investigation The problem can be resolved by excluding MongoAutoConfiguration or ensuring that compatible versions of MongoDB dependencies are used,0,1,1,0,0,0,0
The document discusses a change in behavior regarding HATEOAS Hypermedia as the Engine of Application State support in Spring Boot 1 2 0 compared to 1 1 10 In 1 1 10 the default HATEOAS format was HAL Hypertext Application Language as long as spring hateoas was included in the classpath However in 1 2 0 HAL is no longer the default and users now have to explicitly add both EnableWebMvc and EnableHypermediaSupport type EnableHypermediaSupport HypermediaType HAL to enable HAL support This change is believed to be a side effect of a fix for another issue 1729 In 1 2 0 the TypeConstrainedMappingJackson2HttpMessageConverter which handles application hal json is configured with HATEOAS mixins but the MappingJackson2HttpMessageConverter which handles application json is not In 1 1 10 both converters shared the same ObjectMapper and thus had the same mixin configuration allowing HAL to be the default for application json as well In 1 2 0 JacksonAutoConfiguration creates a primary ObjectMapper before HypermediaAutoConfiguration can register its HAL specific ObjectMapper As a result the two converters no longer share the same ObjectMapper leading to different behavior The document concludes by noting that in 1 2 0 clients must now set the Accept header to application hal json to get the correct HAL response whereas in 1 1 x application json would also return HAL responses with links The Spring Boot team asks for a sample application and suggests trying requests with the correct Accept header to confirm proper HAL support,0,1,1,0,0,0,0
The document describes an issue with Spring Loaded not working correctly when using Spring Boot 1 2 0 with the Spring Boot Maven Plugin 1 2 0 Specifically changes to class files are not reloaded as expected However using Spring Boot 1 2 0 with the Maven Plugin version 1 1 9 and Spring Loaded 1 2 1 works fine and reloads changes properly The user provides a simple example project setup and demonstrates that touching a class file App class does not trigger a reload with the 1 2 0 Maven Plugin but it works when reverting to the 1 1 9 Maven Plugin version The Maven Plugin in version 1 2 0 seems to not attach the Spring Loaded agent which in previous versions was shown with a message like Copy INFO Attaching agents home dsyer m2 repository org springframework springloaded 1 2 1 RELEASE springloaded 1 2 1 RELEASE jar This line is missing in the 1 2 0 version and the issue might be related to changes in how the fork no fork behavior of the plugin is handled The Spring Boot team recommends trying the 1 2 1 BUILD SNAPSHOT version to see if the problem is resolved,0,1,1,0,0,0,0
The document describes an issue encountered after upgrading a simple Spring Boot RESTful web application to version 1 2 0 where the application fails to start due to a ClassNotFoundException for WebSecurityConfigurerAdapter The error is caused by the Actuator s EndpointWebMvcChildContextConfiguration which assumes that Spring Security is present on the classpath To resolve the issue the user is advised to add the following dependency to the pom xml xmlCopy dependency groupId org springframework boot groupId artifactId spring boot starter security artifactId dependency However this can result in previously unprotected endpoints requiring authentication To retain the previous behavior without security the following properties should be added to application properties Copysecurity basic enabled falsemanagement security enabled falseThe issue arises because enabling management endpoints via settings like management port and management address causes Spring Boot 1 2 0 to secure them by default While the provided workaround resolves the problem users note that this change was not documented in the release notes which they consider a bug or oversight Additionally the root cause is traced to the injectIntoSecurityFilter method in EndpointWebMvcChildContextConfiguration which assumes Spring Security is present in the classpath,0,1,1,0,0,0,0
The document discusses a change in behavior regarding logging properties after upgrading from Spring Boot 1 1 9 to 1 2 0 In 1 1 9 the logging path property from application properties was mapped to the LOG PATH system property by the LoggingApplicationListener This made LOG PATH available for use in custom logging configurations such as in Logback configuration files However in 1 2 0 this mapping was removed causing LOG PATH to no longer be available in custom logging configurations The issue was identified and confirmed and the Spring Boot team acknowledged that LOG PATH was unintentionally dropped during refactoring of the logging system logic The fix has been implemented in 1 2 1 BUILD SNAPSHOT where LOG PATH now contains the path and LOG FILE holds just the filename rather than the full path Users are encouraged to test the fix and feedback is expected after confirming the behavior in various environments,0,1,1,0,0,0,0
The document discusses an issue where the process ID PID is no longer showing in the application logs after upgrading from Spring Boot 1 1 9 to 1 2 0 In version 1 1 9 logs displayed the PID correctly for example Copy2014 12 10 14 24 25 350 INFO 9274 http nio 8080 exec 3 However after upgrading to 1 2 0 the PID is not resolved and appears as Copy2014 12 11 12 22 54 285 INFO PID http nio 8081 exec 3 The issue seems to be platform specific as it works on some environments e g FreeBSD with certain Java versions but fails on others e g Ubuntu on AWS Users report that the problem persists across different operating systems and Java versions suggesting it could be related to platform configuration or the Spring Boot upgrade itself The Spring Boot team suggests trying version 1 2 1 BUILD SNAPSHOT which resolves the issue for some users The conversation also mentions that the issue might be related to a previously reported problem 1091 indicating ongoing investigation to fully resolve the PID logging behavior across different environments,0,1,1,0,0,0,0
The document discusses a change in behavior related to file logging after upgrading from Spring Boot 1 1 9 to 1 2 0 Previously users could specify only the logging file property e g logging file app log to enable file logging in the working directory However in version 1 2 0 file logging no longer works with just logging file despite the documentation stating that either logging path or logging file can be used The user reports that file logging now requires both properties logging path and logging file to be set For example to log to a file in the current directory they now need to specify Copylogging path logging file app logThis change in behavior contradicts the documentation which suggests that only logging file should suffice,0,1,1,0,0,0,0
The document describes a regression issue in Spring Boot 1 2 0 RC1 where the spring main show banner false property is not respected and the banner is still displayed during application startup This behavior was functioning correctly in version 1 2 0 M2 The issue was quickly identified and acknowledged by a developer who realized that a recent change caused the problem The reporter thanks the developer for addressing the issue swiftly preventing it from reaching the general availability GA release with the bug,0,1,1,0,0,0,0
The document highlights an issue encountered after upgrading Spring Boot from version 1 1 4 to 1 1 6 where the introduction of asterisks in metric names particularly for static resources e g gauge response favicon ico causes compatibility problems with the Codahale Metrics library Specifically the presence of these asterisks leads to exceptions when using the JmxReporter and CsvReporter as the asterisks prevent proper MBean registration and CSV file creation The user inquires whether there is a way to either replace the asterisks with another character or exclude these specific metrics from being registered in the MetricRegistry as a workaround to avoid these failures,0,1,1,0,0,0,0
The document discusses a problem that arose after recent changes related to JTA Java Transaction API which broke the ability to use HornetQ in native mode without EmbeddedJMS Previously it was possible to connect to an existing HornetQ broker without requiring hornetq jms server on the classpath However with the new changes the EmbeddedJMS component may be mandatory which is problematic for setups where only the HornetQ native mode is needed The issue likely stems from changes in the HornetQConnectionFactoryConfiguration which now enforces the use of EmbeddedJMS making it difficult to use HornetQ in native mode alone This breaks the previous flexibility of connecting to an external HornetQ broker without additional dependencies,0,1,1,0,0,0,0
The document discusses an issue that arose after upgrading from Spring Boot 1 1 4 to 1 1 5 where the default MessageSource bean stopped working In Spring Boot 1 1 4 the MessageSource was a ResourceBundleMessageSource that correctly loaded messages from a messages properties file located in the root classpath After the upgrade the MessageSource became a DelegatingMessageSource without a parent causing message resolution to fail The author mentions that the issue likely stems from changes in the MessageSourceAutoConfiguration specifically in how the classpath pattern is resolved The problem occurs because PathMatchingResourcePatternResolver does not handle the pattern classpath messages properties as expected returning an empty array If the wildcard before properties is removed the message file is correctly resolved A workaround was created and the bug was reported under SPR 12095 When testing with the latest 1 1 6 snapshot the issue was confirmed to be fixed The author also provided a sample project on GitHub to reproduce the issue and verify the fix The document concludes by mentioning that this problem specifically affects multi module projects where the messages properties file is located in a service JAR and included as a dependency in the web module,0,1,1,0,0,0,0
The document outlines an issue encountered when upgrading Spring Boot from version 1 1 4 RELEASE to 1 1 5 RELEASE which breaks the gs securing web guide available on GitHub The issue manifests with a NullPointerException during application startup when using Spring Security specifically related to the AuthenticationManagerConfiguration The error occurs upon running the application using Gradle gradlew bootRun or Maven mvn spring boot run The stack trace points to a failure in the AuthenticationManagerConfiguration during the handling of an application event This problem is triggered when using the EnableWebMvcSecurity annotation which is not commonly used in most Spring Boot samples The user reports the issue on GitHub and provides a workaround submitting a pull request to the guide repository The suggested solution avoids the use of EnableWebMvcSecurity in the sample but further consideration is required to address the problem in a broader context,0,1,1,0,0,0,0
The document describes an issue with the Gradle plugin while upgrading Spring Boot from version 1 1 1 to 1 1 2 1 1 3 where the custom BootRepackage task for building a fat JAR breaks In Spring Boot 1 1 1 the manifest of the JAR includes essential metadata such as the Start Class and Main Class but in 1 1 2 and 1 1 3 these entries are missing The issue seems to be related to changes in the Gradle plugin particularly a commit that introduced modifications to how JAR tasks are matched for repackaging The problem occurs because the BootRepackage task is incorrectly repackaging JARs that shouldn t be repackaged while skipping the one that should The user suggests a fix by modifying the logic in RepackageTask java to correctly match the intended JAR task groovyCopyif isTaskMatch jarTask withJarTask getLogger info Jar task not repackaged didn t match withJarTask jarTask return This fix resolves the issue when tested with Spring Boot 1 1 4 BUILD SNAPSHOT The document also mentions that with 1 1 3 all artifacts including test sources and javadoc JARs are repackaged which is incorrect behavior After applying the fix the expected behavior is restored where only the appropriate JAR is repackaged,0,1,1,0,0,0,0
The document describes an issue with upgrading to Spring Boot 1 1 x where signing the JAR file leads to SecurityException errors specifically related to signer information mismatch for dynamically generated classes The error occurs when Spring and CGLIB attempt to enhance configuration classes at runtime resulting in angelscriptCopyCaused by java lang SecurityException class com example app view WebConfig EnhancerBySpringCGLIB d849233e s signer information does not match signer information of other classes in the same packageThe same code works perfectly fine in Spring Boot 1 0 x and the issue disappears if the JAR is not signed The user questions whether this is a Spring Boot bug or a configuration issue A potential cause is that dynamically generated classes are not signed which may be a common problem when using a security manager The suggestion is to either configure the security manager to allow unsigned classes or avoid signing Configuration files Further investigation reveals that excluding hibernate validator resolves the issue though the exact reason remains unclear Additionally it is noted that the problem exists in both Spring Boot 1 0 x and 1 1 x but the behavior differs based on how the Spring Boot Maven plugin is configured A sample project reproducing the issue is shared which uses the Maven JAR signer plugin and throws the same exception when running the signed JAR,0,1,1,0,0,0,0
The document discusses an issue encountered when using Spring Boot 1 1 1 with Gradle to build and install an application The build fails with the error CopyNo value has been specified for property mainClassName This happens when running the command Copy gradlew clean build installIn Spring Boot 1 0 2 the build works as expected creating a folder structure under build install my app with a shell script to start the application and dependencies placed in the lib folder However in version 1 1 1 this behavior breaks unless a workaround is applied by explicitly specifying the mainClassName in the startScripts task groovyCopystartScripts mainClassName demo Application The issue is related to Gradle s installApp task which requires the mainClassName to be set In earlier versions this was handled automatically but it no longer works in 1 1 1 without manual intervention The problem does not occur when using Maven It is noted that Gradle renamed the install task to installApp in version 1 0 which might contribute to the confusion The document concludes with the user confirming that the workaround resolves the issue though the reason for the regression between versions 1 0 2 and 1 1 1 remains unclear,0,1,1,0,0,0,0
The document describes an issue with WAR deployment not working correctly in the latest Spring Boot BUILD SNAPSHOT When deploying a WAR file using Gradle the logs report a missing Spring WebApplicationInitializer which prevents the application from starting properly The issue is noticed during local Cargo deployment testing Upon investigation it is found that many Spring libraries are being placed in the lib provided folder instead of the lib folder in the WAR package This behavior is different from Maven where dependencies are placed in lib while only those with a provided scope are placed in lib provided The problem stems from a change in the dependencies of spring boot starter tomcat which now includes spring boot starter web causing its transitive dependencies to be placed in lib provided Additionally the Gradle plugin has a limitation where a dependency can only be packaged in either lib or lib provided with the latter being preferred This leads to missing dependencies in the lib folder causing the deployment failure The issue is reproducible with Gradle but works fine with Maven Several contributors including philwebb and wilkinsona are pinged to address the issue,0,1,1,0,0,0,0
The document highlights the need to document development time improvements introduced in issue 3082 This includes new features such as remote debugging support and the associated timeouts Additionally there s a correction to the documentation the property enabling remote support is incorrectly listed as spring devtools remote password but the correct property name is spring devtools remote secret The issue has been addressed in a subsequent fix in 3232,1,0,0,1,0,0,0
The document mentions the need to document an important change related to secure health endpoint restrictions as introduced in issue 1353 This change should be clearly outlined in both the reference guide and the upgrade instructions to ensure users are aware of the new security restrictions applied to the health endpoint Proper documentation will help users understand how to configure and secure the endpoint following the update,1,0,0,1,0,0,0
The document mentions the need to update the release notes regarding HealthIndicator updates in Spring Boot A link to the Spring Boot 1 1 release notes is provided Spring Boot 1 1 Release Notes It is confirmed that the release notes have been updated,1,0,0,1,0,0,0
The document discusses an issue with the SPRING CONFIG LOCATION environment variable when specifying a configuration file that does not have a supported extension e g conf In Spring Boot 2 1 5 setting SPRING CONFIG LOCATION file etc opt myapp myapp conf fails while specifying properties e g myapp properties works as expected The issue stems from how Spring Boot determines which PropertySourceLoader to use based on the file extension Extensions like properties xml yml and yaml are supported but conf is not recognized This leads to a failure when trying to load the configuration file The document also touches on a related issue where directories specified in spring config location might not work unless they end with a slash This behavior is documented in Spring Boot but could be clearer as the current error message is not very helpful in guiding users to the root cause The Spring Boot team has acknowledged the need to improve both the error messaging and documentation while also suggesting that users can extend Spring Boot by providing their own PropertySourceLoader for unsupported file extensions In summary the document recommends improving error handling and clarifies that users must use supported file extensions or define custom loaders for additional extensions,1,0,0,0,1,0,0
The document discusses an issue related to the default auto configuration of the HiddenHttpMethodFilter in WebMvcAutoConfiguration This filter is enabled by default and is typically used in Spring MVC applications that generate text html content with a templating engine However it presents unnecessary overhead when Spring MVC is used solely for APIs that produce application json responses especially in modern setups where templating engines are often not needed The issue gained attention because the HiddenHttpMethodFilter was consuming up to 80 of processing time on certain endpoints particularly those accepting large MultipartFile requests While the filter can be disabled using the spring mvc hiddenmethod filter enabled property users have to manually configure this for each project which is seen as inefficient The report suggests that the configuration should be more lightweight for API only applications There is a suggestion to make the filter conditional based on the presence of a ViewResolver bean which would indicate that server rendered HTML is in use However there are concerns about the risks of such a change The document also touches on the broader topic of simplifying WebMvcAutoConfiguration for API only applications but it seems that for now the focus is on the specific case of disabling the HiddenHttpMethodFilter by default,1,0,0,0,1,0,0
The document discusses a proposed change to rename the DatabaseDriver SAP enum to DatabaseDriver HANA in Spring Boot The rationale is that the HANA database should not be represented by the broader term SAP and should instead align with its naming in Spring Framework where it is already referred to as HANA Although this change introduces a breaking change after the release candidate RC1 of Spring Boot 2 1 0 the team agrees that this alignment is important enough to implement the change The decision was discussed in a team call and they have agreed to proceed with renaming the enum for consistency,1,0,0,0,1,0,0
The document highlights an issue with the DefaultErrorWebExceptionHandler in Spring Boot which renders error messages without proper sanitization Currently the Whitelabel error page inserts the exception message directly into the response posing a potential security risk In contrast the ErrorMvcAutoConfiguration uses a PlaceHolderResolver which applies HtmlUtils to escape the error message and prevent issues like HTML injection The document suggests that the DefaultErrorWebExceptionHandler should adopt a similar approach to ensure that error messages are properly sanitized before being displayed In summary the document identifies a security concern where exception messages are not sanitized in DefaultErrorWebExceptionHandler and recommends using HtmlUtils as seen in ErrorMvcAutoConfiguration to escape the messages and avoid potential vulnerabilities,1,0,0,0,1,0,0
The document outlines the need to port several JMX Actuator 1 x features to the DefaultEndpointObjectNameFactory in the current codebase These features which handle various options for JMX exposure are missing from the current master branch The task involves ensuring that the JMX related functionalities from Actuator 1 x are reintroduced and properly supported within the new implementation of the DefaultEndpointObjectNameFactory This will help maintain feature parity with previous versions of the Actuator,1,0,0,0,1,0,0
The document discusses the need to reinstate support for CloudFoundry in the Spring Boot Actuator s new endpoint model Specifically the following features need to be restored Endpoints should be available and discoverable under the cloudfoundryapplication path CloudFoundry specific security mechanisms should be reintroduced to ensure proper security handling for these endpoints This reinstatement is necessary to ensure compatibility and functionality of the Actuator when deployed in CloudFoundry environments,1,0,0,0,1,0,0
The document is a brief query about the possibility of releasing version 2 0 13 of Spring Security OAuth in the next few days The user jgrandja is asked whether this release can be made in time to include it in Spring Boot versions 1 4 5 and 1 5 2 both of which are scheduled for release on Thursday The request emphasizes that this update should be included in the 1 4 x branch which is currently using version 2 0 12 of Spring Security OAuth,1,0,0,0,1,0,0
The document addresses the upgrade to Spring Data Ingalls RELEASE highlighting a breaking change between RC1 and RELEASE Key Points The upgrade to Spring Data Ingalls RELEASE introduces a breaking change compared to RC1 In the Neo4j module the default connection protocol has switched to Bolt The HTTP driver is no longer included by default as noted in this commit This upgrade emphasizes a significant change in how Neo4j connections are managed requiring users to adapt to the new default Bolt protocol with the HTTP driver no longer bundled by default,1,0,0,0,1,0,0
The document refers to the upgrade to Spring Data Hopper SR7 and provides a general template for raising issues related to Spring Boot Key Points The document addresses the upgrade to Spring Data Hopper SR7 It provides a template for reporting issues related to Spring Boot categorized as Questions Users are directed to Stack Overflow using the spring boot tag for questions on usage or unexpected behavior Bug reports Users should include Spring Boot version details and if possible a sample application or test case to help diagnose and fix the issue Enhancements Users should describe the problem they are trying to solve as there may already be solutions or alternatives This document provides instructions on how to raise issues in Spring Boot while mentioning the upgrade to Spring Data Hopper SR7,1,0,0,0,1,0,0
The document discusses the need to upgrade Spring Batch to a version that is fully compatible with Spring Framework 5 Key Points Spring Batch was initially compatible with Spring Framework 5 but issues arose after the removal of BeanFactoryLocator and related components SPR 15154 A new Spring Batch milestone is required for Spring Boot 2 0 M1 The associated Spring Batch issue is tracked under BATCH 2572 This upgrade is related to 7645 which also tracks the Spring Batch upgrade This upgrade is essential to ensure that Spring Batch remains fully functional with the changes introduced in Spring Framework 5 especially for the upcoming Spring Boot 2 0 release,1,0,0,0,1,0,0
The document discusses the need to upgrade to Spring Data LDAP 2 3 1 RELEASE due to issues with version 2 3 0 RELEASE Key Points Spring Data LDAP 2 3 0 RELEASE has a blocker issue that prevents its use 2 3 1 RELEASE is recommended as it includes a missing feature from 2 3 0 RELEASE rwinch is involved in addressing the blocker issue The conversation suggests moving forward with 2 3 1 to resolve the problem This upgrade ensures that users avoid the blocker issue present in 2 3 0 RELEASE by using the corrected 2 3 1 RELEASE version of Spring Data LDAP,1,0,0,0,1,0,0
The document discusses the need to upgrade to Spring Integration 4 3 7 RELEASE due to a severe performance memory leak issue in Spring Integration 4 3 6 when used with Spring Framework 4 3 5 Key Points Spring Integration 4 3 6 has a performance memory leak problem when used with Spring Framework 4 3 5 The issue is fixed by a patch in Spring Framework 4 3 6 not requiring changes in Spring Integration To ensure users get the Spring Framework fix transitively Spring Integration 4 3 7 will depend on Spring Framework 4 3 6 The Spring Integration 4 3 7 release is planned between Spring Framework 4 3 6 and Spring Boot 1 4 4 which are scheduled to be released on the same day garyrussell is coordinating the release planning to ensure the fix is available This upgrade is critical to address the performance issues and ensure compatibility between Spring Integration and Spring Framework in future releases,1,0,0,0,1,0,0
The document refers to the upgrade to Spring Framework 4 3 6 and provides a general template for raising issues regarding Spring Boot It offers guidance on how to categorize the issue being reported whether it s a question bug report or enhancement request Key Points The document is related to the upgrade to Spring Framework 4 3 6 It provides instructions for raising issues in Spring Boot through categorized templates Questions should be directed to Stack Overflow using the spring boot tag Bug reports should include details such as the Spring Boot version and if possible a test case or sample application to aid in diagnosing and fixing the problem Enhancement requests should start by describing the problem being solved as there might already be solutions or alternative approaches This document offers guidance on how contributors should report or inquire about issues related to Spring Boot and ensures that issues are categorized correctly for efficient resolution,1,0,0,0,1,0,0
The document refers to the upgrade to Spring Integration 4 3 6 RELEASE This version is being prepared following the release of Spring Framework 4 3 5 Key Points The focus is on upgrading to Spring Integration 4 3 6 RELEASE The upgrade is part of a broader effort to keep Spring Integration up to date with the latest Spring Framework version This upgrade ensures compatibility and alignment with the latest Spring releases maintaining the stability and performance of Spring Integration in projects,1,0,0,0,1,0,0
The document discusses the planned upgrade to Spring AMQP 1 6 6 RELEASE and Spring Integration 4 3 6 These upgrades are expected to occur shortly after the release of Spring Framework 4 3 5 Key Points Upgrade to Spring AMQP 1 6 6 RELEASE and Spring Integration 4 3 6 The releases will happen soon after Spring Framework 4 3 5 becomes available likely by mid morning US EST 7710 has been created to track these two upgrades separately garyrussell is involved in coordinating the updates This update ensures that both Spring AMQP and Spring Integration remain in sync with the latest Spring Framework release,1,0,0,0,1,0,0
The document discusses a feature request to allow configuring Cassandra speculative execution in Spring Boot The current limitation is that speculative execution can only be enabled via the builder which is not accessible through Spring Boot s CassandraAutoConfiguration This forces users to re implement the entire configuration if they want to enable speculative execution Key Points Speculative execution can only be enabled on the builder but Spring Boot doesn t expose it requiring full re implementation of CassandraAutoConfiguration A suggestion is made to look for an optional SpeculativeExecutionPolicy bean and apply it if present There s a related issue 7320 that needs to be refactored for this use case An alternative proposal is to allow arbitrary changes to the builder so users could apply future additions without waiting for Spring Boot updates The change needs to be made before 1 5 0 RC1 and quick feedback is requested to determine the most elegant solution Allowing tuning of the builder is seen as less elegant but potentially more flexible This reflects a need for more flexibility in configuring Cassandra within Spring Boot particularly with speculative execution policies,1,0,0,0,1,0,0
The document discusses the upgrade to Spring Framework 4 3 5 RELEASE and the resolution of SPR 14996 Although the issue has been resolved the backporting process is delayed J rgen H ller referred to humorously as software Santa manages backporting by batching fixes which includes SPR 14996 for the 4 3 x line but hasn t completed it yet Key Points SPR 14996 will be backported to 4 3 x but it s delayed slightly with a promise to complete by Monday The backport will also apply to 4 2 9 ensuring compatibility with both Spring Boot 1 4 x and 1 5 x The document mentions a behavior change in 4 3 5 that causes the List ErrorViewResolver field in ErrorMvcAutoConfiguration to be null A fix for this change is proposed by switching to constructor injection already implemented in Spring Boot 2 0 The remaining regression reports focus on load time weaving which are still under review The updates are crucial for ensuring smooth integration with Spring Boot and resolving issues in Spring Framework 4 3 x,1,0,0,0,1,0,0
The document discusses an upgrade to Spring Data Hopper SR3 which addresses a bug in Spring Boot related to gh 6567 The conversation highlights potential breaking changes when upgrading to Spring Boot 1 4 specifically if users rely on the new constructor in JPA queries There is concern about whether the issue tracked in DATAJPA 938 is resolved in Hopper SR3 The suggestion is that no separate Spring Boot ticket is necessary unless the issue persists If DATAJPA 938 is not fixed in Hopper SR3 users might need to raise a new ticket in Spring Boot to track it further,1,0,0,0,1,0,0
The document describes a feature request for Spring Boot to support Locale to Charset mapping for servlet containers When a Locale is set on an HTTP servlet response some servlet containers depending on their default behavior may automatically set a character encoding for the response e g ISO 8859 1 This could lead to undesired character encoding in the Content Type header mismatching the application s expected encoding To address this Spring Boot proposes a configuration option propertiesCopyspring http encoding mapping locale charset This would allow developers to explicitly map a Locale to a desired Charset Additionally the document mentions the need to handle differences in default encoding behavior across various embedded servlet containers and suggests that Spring Boot should support mappings similar to web xml s locale encoding mapping list For a more forceful solution users can also set spring http encoding force response true to enforce a specific encoding,1,0,0,0,1,0,0
The document discusses an upgrade to Spring Framework 4 2 7 RELEASE This update likely includes important bug fixes security patches and performance improvements over previous versions The upgrade aims to ensure better stability enhanced features and ongoing compatibility with other Spring components For projects relying on Spring Boot or other Spring modules using 4 2 7 RELEASE would help align with the most recent improvements and supported features in the Spring ecosystem,1,0,0,0,1,0,0
The document discusses the need to provide a property to configure Tomcat s context root redirect in Spring Boot referencing issue 6232 This would allow users to easily customize how Tomcat handles requests to the root context potentially improving flexibility for various deployment scenarios The addition of such a property would align with Spring Boot s philosophy of making configuration simpler and more accessible through properties,1,0,0,0,1,0,0
The document outlines a decision to revert to Hibernate 5 0 x as the default version for Spring Boot 1 4 after discussions regarding compatibility and stability concerns While Hibernate 5 2 x is available it was deemed premature to use as the default However samples and documentation will be provided to guide users on how to integrate Hibernate 5 2 x if needed The decision to stay with Hibernate 5 0 x is considered a better choice for maintaining reliability in Spring Boot 1 4,1,0,0,0,1,0,0
The document discusses an upgrade to Spring Framework 4 3 1 RELEASE This version likely includes bug fixes performance improvements and new features over previous releases to ensure better stability and compatibility within the Spring ecosystem The upgrade may be particularly relevant for projects that rely on Spring Boot or other Spring projects ensuring alignment with the latest supported versions and improvements offered by Spring Framework 4 3 1,1,0,0,0,1,0,0
The document addresses the need to upgrade to a version of Spring HATEOAS that is fully compatible with Jackson 2 7 The issue is tracked in spring hateoas issues 438 and has been resolved as part of issue 455 which will be included in Spring HATEOAS 0 20 This version is expected to be released alongside Hopper SR2 before the Spring Boot RC1 release Key Points Compatibility issue between Spring HATEOAS and Jackson 2 7 The fix will be available in Spring HATEOAS 0 20 0 20 is expected to be released with Hopper SR2,1,0,0,0,1,0,0
The document discusses the need to upgrade to Spring Integration 4 3 0 M1 which is critical for the M1 release This upgrade is necessary to resolve a problem caused by a breaking change in Spring Data Redis in the Hopper release train The issue is considered a blocker for the M1 release and the upgrade is required to ensure compatibility with the changes introduced in Spring Data Redis,1,0,0,0,1,0,0
The document discusses the idea of allowing exit codes to be automatically generated from exceptions in Spring applications Currently exit codes are generated using the following approach javaCopySystem exit SpringApplication exit SpringApplication run SampleBatchApplication class args The proposal suggests that exceptions particularly those implementing the ExitCodeGenerator interface should automatically return the appropriate exit code when thrown from a command line runner This would simplify the process of handling exit codes An issue was encountered where a NullPointerException NPE occurred if the application context is null which can happen if the refresh process fails While this raised questions about the usefulness of the exception to exit code mapping it was determined that this feature is still valuable especially for command line runners throwing exceptions The document suggests that there should be a way to map exceptions to exit codes without requiring the exceptions to implement the ExitCodeGenerator interface The discussion references the following error trace from a NullPointerException Copyjava lang NullPointerException null at org springframework boot SpringApplication getExitCodeFromMappedException SpringApplication java 886,1,0,0,0,1,0,0
The document discusses the upcoming release of Spring Integration 4 2 4 RELEASE which is scheduled to be released the day after Spring Framework 4 2 4 The goal is to include this release in Spring Boot 1 3 1 if possible Coordination with the team responsible for the Spring Framework release is planned with a follow up once the framework release is complete,1,0,0,0,1,0,0
The document discusses the need to upgrade to Spring Data Gosling SR2A However there is a problem with the Bill of Materials BOM for the SR2 release The document does not provide specific details about the issue with the BOM but it implies that the upgrade is necessary despite the identified problem Further steps may be required to address the BOM issue before proceeding with the upgrade,1,0,0,0,1,0,0
The document discusses an upgrade to Spring Integration 4 1 8 RELEASE and some compatibility issues with Spring IO Platform 1 1 x The main issue arises from Spring Integration 4 1 7 being incompatible with the IO Platform due to a dependency on Kryo 2 22 which lacks the kryo shaded module Efforts are being made to explore options to restore compatibility for Spring Integration 4 1 x Additionally the document mentions the upcoming release of Spring Integration 4 2 4 and Spring Framework 4 2 4 which aligns with the release of Spring Boot 1 3 1 A fix for the compatibility issue tracked under INT 3907 has been implemented in Spring Integration 4 1 8 However the dependency on Kryo 2 comes from Reactor 1 1 x and newer versions of Reactor such as Reactor 2 0 use Kryo 3 which resolves the issue in Spring Boot 1 3 and Platform 2 0,1,0,0,0,1,0,0
The document discusses the need to upgrade to Spring Framework 4 2 4 RELEASE This upgrade likely includes important bug fixes performance improvements and new features introduced in the latest release The goal of the upgrade is to ensure compatibility with the latest version of the Spring Framework and to take advantage of any enhancements or fixes provided in version 4 2 4 RELEASE,1,0,0,0,1,0,0
The document discusses the need to upgrade to Spring Integration 4 2 1 RELEASE This upgrade likely addresses bug fixes performance improvements or new features introduced in the latest version of Spring Integration The goal is to ensure compatibility and take advantage of the updates provided in version 4 2 1 RELEASE No further specifics are provided but such upgrades typically aim to improve overall stability and functionality within Spring based projects,1,0,0,0,1,0,0
The document discusses the lack of direct property support for configuring DispatcherServlet setThrowExceptionIfNoHandlerFound Currently to enable this setting users must manually define a new bean rather than setting it through a property The suggestion is to enhance Spring Boot s configuration by offering property support for this feature making the process more straightforward for developers The issue is also linked to a related discussion in issue 3980,1,0,0,0,1,0,0
The document highlights a gap in Spring MVC s auto configuration While WebMvcAutoConfiguration automatically registers a HiddenHttpMethodFilter to enable usage of various HTTP methods like POST PUT etc from HTML forms it does not register the HttpPutFormContentFilter which is necessary for handling PUT requests with form data Currently developers must manually register HttpPutFormContentFilter to ensure proper handling of such requests as outlined in the Spring reference documentation The suggestion is for this filter to be automatically registered by default,1,0,0,0,1,0,0
The document discusses the migration of spring oauth2 properties to security oauth2 in Spring Boot This change requires updating the release notes to reflect the new property naming convention The migration aims to align OAuth2 related configuration properties under the security namespace ensuring consistency across security related settings The update is necessary for developers to adapt their configurations when upgrading to newer versions of Spring Boot,1,0,0,0,1,0,0
The document addresses an issue with Reactor 2 0 3 which is not fully compatible with JsonPath 2 0 Specifically the JsonPathSelector matches method can fail with an AbstractMethodError causing issues when evaluating JsonPath expressions The stack trace provided shows that the error occurs during the unwrapping of JSON objects This issue has been resolved in Reactor 2 0 4 which includes a fix for this compatibility problem The document references a pull request that has been merged to address the issue However there was a delay in syncing Reactor 2 0 4 to the central repository due to Bintray sync failures,1,0,0,0,1,0,0
The document discusses the need to upgrade joda time to version 2 8 1 which is critical for supporting JDK 8u60 According to the release notes the upgrade addresses an issue where formatting a time zone prints 00 00 instead of GMT for the GMT time zone This fix ensures correct time zone formatting in applications using JDK 8u60,1,0,0,0,1,0,0
The document discusses issues encountered during an upgrade to Spring Framework 4 2 0 RC1 specifically relating to tests that are failing unexpectedly The root cause is unclear to both the user and the reviewer One potential factor is the upgrade of the Aether library from version 0 9 1 to 1 0 2 which may have altered dependency resolution behavior particularly for non snapshot dependencies To address the issue the milestone repository was added but there is uncertainty about whether this was the right approach The decision to add the milestone repository is being tracked in issue 3051 for further review The document concludes with suggestions to troubleshoot the problem such as clearing the Maven or Gradle cache though it s not immediately clear why the snapshot dependencies did not cause similar failures,1,0,0,0,1,0,0
The document discusses an issue with using GSON instead of Jackson for JSON output in Spring Boot 1 2 0 particularly when the spring boot starter actuator dependency is included According to the Spring Boot 1 2 0 release notes it is possible to use GSON by excluding Jackson libraries from the classpath However when Jackson is removed from the classpath the application fails to start due to a BeanCreationException related to the ConfigurationPropertiesReportEndpoint which depends on Jackson libraries like jackson core jackson databind and jackson annotations The problem arises because spring boot starter actuator requires Jackson in order to function properly and excluding Jackson prevents the application from initializing Additionally once Jackson is included GSON is no longer used for producing JSON output as Jackson takes precedence The conversation suggests that a possible workaround is to manually configure HttpMessageConverters to prefer GSON or use GSON for specific classes such as JsonElement JsonObject and JsonArray while letting Jackson handle the rest The discussion also mentions that this issue is not considered a bug as GSON can still be used in user defined services However it may be tricky to allow GSON and Jackson to coexist seamlessly within the Actuator The document concludes by referencing the Spring Boot 1 2 release notes which state that GSON support is now available although Jackson remains the default and recommended choice,1,0,0,0,1,0,0
The document discusses the need for a way to easily disable sensitive endpoints in Spring Boot especially when Spring Security is not present Currently all sensitive endpoints are exposed in the absence of Spring Security which can be a security risk The conversation explores different approaches to introduce a simple way to disable sensitive endpoints with a single configuration flag Several options are considered Change the default behavior to hide sensitive endpoints requiring users to explicitly set sensitive to false to restore the current behavior Introduce a new property to control the enablement of sensitive endpoints which would only apply when Spring Security is absent though this could be confusing The general consensus is that a one big switch to control endpoint exposure is easier to understand and manage but there is also concern about disabling non sensitive endpoints unintentionally A potential solution like disable sensitive is suggested to handle this,1,0,0,0,1,0,0
The document informs about the upcoming upgrade to Spring Framework 4 1 3 which is scheduled for release on Friday The author requests a review of the proposed update which is available in a pull request at https github com spring projects spring boot pull 2081 This upgrade should be reviewed to ensure compatibility and smooth integration with Spring Boot,1,0,0,0,1,0,0
The document discusses potential issues when listening for ContextRefreshEvent in a Spring application Modifying the context during this event can be problematic because the ContextRefreshEvent is dispatched via the pluggable ApplicationEventMulticaster meaning there is no guarantee that the thread handling the event is the same one refreshing the context Instead it is recommended to use Spring 4 1 s SmartInitializingSingleton interface which provides a callback mechanism that is invoked directly by the bean factory on the same thread that refreshes the context The document also briefly mentions checking for ContextClosedEvent and highlights that internal framework classes have been refactored to use SmartInitializingSingleton for such callbacks ensuring more predictable behavior,1,0,0,0,1,0,0
The document suggests adding a User Agent header to the CLI initialization REST calls which would include the version of the client This enhancement would provide flexibility by allowing changes to the server without breaking compatibility with existing clients By identifying the client version through the User Agent header the server can handle requests differently based on the version ensuring smoother transitions and backward compatibility,1,0,0,0,1,0,0
The document outlines an issue in Spring Boot 2 3 0 RC1 where including the developmentOnly configuration specifically Spring Boot DevTools causes certain jar files to be excluded from the generated fat jar resulting in a startup failure The problem occurs when building a Docker image using the default Paketo buildpack or running the fat jar with java jar The error logs show a ClassNotFoundException for SpringApplication indicating that key dependencies like spring boot autoconfigure spring context and others are missing from the fat jar The issue seems to arise when the application is built with sourceCompatibility 11 while it works fine with Java 8 sourceCompatibility 1 8 The problem is confirmed to be related to changes made in response to 16599 where too much was removed from the BootJar task s classpath Removing the developmentOnly configuration i e excluding DevTools resolves the issue allowing the application to run successfully on both Java 8 and Java 11 In summary the presence of the developmentOnly configuration is causing critical dependencies to be excluded from the fat jar leading to runtime failures The document suggests that this issue does not originate from the buildpack or builder but from the handling of the BootJar task in Spring Boot 2 3 0 RC1,1,1,0,0,0,0,0
The document reports an issue in Spring Boot 2 2 0 M5 where several datasource properties are missing from META INF spring configuration metadata json which affects IDE autocompletion Properties related to datasource groups like spring datasource hikari spring datasource tomcat and spring datasource dbcp2 are no longer available for autocompletion in IDEs although the functionality itself is not impacted This problem was identified when comparing the metadata file between v2 2 0 M4 and v2 2 0 M5 The missing properties are linked to changes in the visibility of Bean methods which became package private causing the annotation processor to skip them and exclude them from the metadata file The document includes a sample of the missing properties in JSON format and provides a zip file with the relevant metadata files for further investigation The issue was acknowledged by the Spring Boot team and a discussion was started on whether the rule causing this omission in the annotation processor should be relaxed to restore the missing properties,1,1,0,0,0,0,0
The document highlights a bug in the equals method of ConfigurationPropertyName where it incorrectly determines two property names as equal if one starts with the same characters as the other The issue was originally raised by spencergibb in the context of Spring Cloud but the root cause lies in ConfigurationPropertyName The problem is demonstrated by the following test case javaCopy Testpublic void equalsWhenStartsWith ConfigurationPropertyName n1 ConfigurationPropertyName of my sources 0 xame ConfigurationPropertyName n2 ConfigurationPropertyName of my sources 0 xamespace assertThat n1 isNotEqualTo n2 In this example even though n1 and n2 are different the equals method fails to distinguish them correctly because their starting characters are the same,1,1,0,0,0,0,0
The document points out an issue with the spring boot dependencies BOM file which contains references to three repositories Typically these repository references are placed within a build profile and are removed before the release process However it seems that the step responsible for removing these repository references was either removed or broken leading to an unintended inclusion of the repositories in the release,1,1,0,0,0,0,0
The document discusses an issue with the spring boot maven plugin version 2 0 0 BUILD SNAPSHOT where the repackage goal fails due to missing dependencies Specifically during the Maven build an error occurs indicating that the required class ArtifactsFilter from the maven shared library cannot be found This leads to a NoClassDefFoundError during the execution of the repackage phase The error messages suggest that the POM file for the plugin version 2 0 0 BUILD 20171009 040825 10 is missing which results in Maven being unable to resolve required dependencies for the plugin The problem is suspected to be related to checksum issues or the order of file uploads in the Artifactory repository To resolve the issue users are advised to try building with the U flag to force Maven to update dependencies but some still encounter problems even after clearing local repository caches The issue may be linked to a corrupted snapshot or recent changes in the CI pipeline for Spring related projects where similar issues have been reported by other users The document also references discussions on GitHub Gitter and Spring Security related to similar build issues highlighting that the problem persists across multiple Spring projects Some users found success by downgrading to a stable plugin version 1 5 7 Further investigation into the snapshot s integrity and upload process is ongoing,1,1,0,0,0,0,0
The document outlines an issue where the Valid annotations in controllers stopped working after upgrading to Spring Boot 1 5 3 The problem arises when a user defines a custom Validator bean which unintentionally replaces the default mvcValidator used by Spring MVC As a result the MVC validation such as JSR 303 annotations like NotBlank no longer functions correctly The discussion highlights that in Spring Boot 1 5 3 when a custom Validator is registered as a bean e g annotated with Component it overrides the default mvcValidator This behavior was introduced in 1 5 3 causing issues for applications that rely on the default validation setup Users express concerns over this significant change in a minor version as it disrupts expected behavior without clear guidance A suggested workaround involves explicitly defining the LocalValidatorFactoryBean as the mvcValidator in the configuration to ensure the default MVC validation is preserved The conversation also references a related issue 8976 and a fix was provided in the 1 5 4 BUILD SNAPSHOT which users are encouraged to test However some users argue that such changes should not be introduced in minor releases due to their wide ranging effects,1,1,0,0,0,0,0
The document addresses an issue in Spring Boot 1 5 where multiple org springframework validation Validator beans are exposed when using spring boot starter web This occurs because two validators are being registered one from ValidationAutoConfiguration JSR303 validator and another from WebMvcAutoConfiguration EnableWebMvcConfiguration MVC validator Users report that this causes problems and a workaround involves disabling ValidationAutoConfiguration which is not an ideal solution The discussion revolves around potential fixes such as marking the auto configured validator as Primary though this could lead to other issues if a custom Spring Validator is also marked as Primary The document includes references to different users testing snapshots and reporting mixed results There is also a suggestion to improve how validators are managed specifically by avoiding the use of WebMvcConfigurer for validator registration favoring a more idiomatic bean declaration approach instead The issue was eventually fixed though users still report problems when upgrading from earlier versions,1,1,0,0,0,0,0
The document discusses an issue where the spring boot configuration processor has a compile time dependency on spring boot test support which should instead be scoped as a test dependency Key Points spring boot configuration processor incorrectly has a compile dependency on spring boot test support The correct scope for this dependency should be test A workaround is to exclude the dependency manually This issue highlights a misconfiguration in the dependency scope and users can temporarily resolve it by excluding spring boot test support from the compile classpath until a proper fix is applied,1,1,0,0,0,0,0
The document discusses an issue with Spring Boot Devtools version 1 4 3 RELEASE where static resources in the public directory are not served when Devtools is loaded The issue does not occur in 1 4 2 RELEASE Key Points Static content in the public directory is not served when using Devtools 1 4 3 RELEASE The problem does not occur in 1 4 2 RELEASE and downgrading Devtools to this version is suggested as a temporary workaround jdubois provided a sample project to replicate the issue available here The issue specifically occurs with war packaging which was why it wasn t initially replicable A fix is being worked on and should be available soon This issue involves a regression in Spring Boot Devtools 1 4 3 RELEASE affecting applications that serve static resources particularly in environments using war packaging,1,1,0,0,0,0,0
The document discusses an issue in Spring Boot 1 4 where the spring datasource type property is no longer honored breaking the ability to specify a custom DataSource type In Spring Boot 1 3 users could map any DataSource created through auto configuration allowing the use of custom types via spring datasource However in 1 4 this functionality was removed or broken leading to the spring datasource type property being ignored Key Points Regression This is a regression from 1 3 where custom DataSource types were supported Fix The issue has been fixed for 1 4 1 and users are encouraged to try the fix using 1 4 1 BUILD SNAPSHOT Future Versions A user reported that this issue persists in Spring Boot 1 5 6 RELEASE where the spring datasource type property is still ignored and the first known pool implementation on the classpath is picked instead The document highlights that this issue was unintended and marked as a blocker and regression indicating the team s commitment to addressing it in upcoming versions,1,1,0,0,0,0,0
The document investigates a performance regression in the spring init startup time between Spring Boot 1 3 x and 1 4 0 M1 The startup time for running spring hint in 1 4 0 M1 is slower around 3 2 seconds compared to 1 3 x around 2 7 seconds indicating a roughly 10 increase in startup time Key points from the investigation include Profiling with YourKit did not yield useful data as it made 1 4 x faster than 1 3 x during testing 1 4 x loads slightly fewer classes than 1 3 x which was unexpected Further testing and ideas e g 5668 are being explored to improve performance The size of spring boot cli 1 4 0 BUILD SNAPSHOT jar 18MB is significantly larger than spring boot cli 1 3 3 RELEASE jar 9MB which might contribute to the increased startup time Performance tests after some adjustments showed improvements bringing the times closer to 1 3 x levels Additionally optimizations such as disabling bytecode verification Xverify none and limiting tiered compilation were suggested which helped further reduce startup time The investigation is ongoing with ideas being prototyped to address the performance regression,1,1,0,0,0,0,0
The document discusses an issue where the SERVER HOME environment variable causes Spring Boot to fail on startup in version 1 3 0 M4 despite working fine in previous versions The error occurs because Spring Boot now processes the SERVER HOME variable leading to a NotWritablePropertyException as it s not recognized as a valid property in ServerProperties This issue was not present in 1 3 0 M3 or earlier versions The user reports that this unexpected behavior causes applications that previously worked to break upon upgrading to 1 3 0 M4 resulting in a long stack trace without clear indication of the root cause Additionally the document mentions similar issues arising with other environment variables like LIQUIBASE HOME advocating for more user friendly error messages and better diagnostics The discussion concludes by acknowledging that this behavior is likely due to a fix for a long standing bug where ignoreUnknownProperties false was not being honored While not considered a regression the need for improved error reporting and documentation is emphasized to help users quickly identify such issues,1,1,0,0,0,0,0
The document describes an issue with relaxed property binding in Spring Boot when handling deeply nested collections Specifically when trying to bind a property within a nested collection structure the expected property notation e g foo 1 bar 2 name is incorrectly processed Instead of correctly interpreting the property Spring Boot processes it as foo 1 2 name where the middle collection bar is omitted and the name property is incorrectly treated as an indexed value This incorrect handling of the property path leads to a failure in updating the desired property name in this case within the nested collections The issue affects the binding of nested lists or arrays preventing the proper configuration of deeply nested collection elements,1,1,0,0,0,0,0
The document details an issue encountered after upgrading to Spring Boot 1 1 2 on Windows where running a fat JAR executable JAR causes classpath related errors The same setup works fine with Spring Boot 1 1 1 One of the key errors reported is angelscriptCopyjava io FileNotFoundException class path resource banner txt cannot be opened because it does not existAnother error indicates a failure in classpath scanning Copyorg springframework beans factory BeanDefinitionStoreException I O failure during classpath scanning nested exception is java io FileNotFoundException JAR entry x y z not found in projectname 0 7 4 jarThe issue is traced to class loading and resource access within the JAR file The problem is reproducible on Windows 7 with Java 8 and the project is built using IntelliJ IDEA The user reports that the issue is resolved in Spring Boot 1 1 3 BUILD SNAPSHOT and the Spring Boot team has set up a Windows based continuous integration CI environment to catch similar platform specific bugs in the future A release of Spring Boot 1 1 3 is expected soon to address this critical bug,1,1,0,0,0,0,0
The document discusses an issue with external configuration in Spring Boot 1 0 0 RC3 where placing an application properties file in the config directory no longer overrides the properties defined in application yml This behavior worked correctly in version 1 0 0 RC1 but fails in RC3 The problem is observed both when running as a WAR in Tomcat and with mvn spring boot run After identifying the issue as a regression a fix was applied to the master branch and the user is asked to test the latest SNAPSHOT version Additionally further testing reveals that classpath scanning might also be broken in RC4 The issue seems related to updates in the PropertySourceLoader interface that affect how properties and yaml files are handled A new issue has been opened to track this specific problem 527 There is also a mention of a possible conflict with SLF4J bindings when running the application in Tomcat,1,1,0,0,0,0,0
The document discusses an upgrade to the Spring Data Ingalls SR8 release It starts with a template message on how to raise issues for Spring Boot dividing them into questions bug reports and enhancement requests For questions users are directed to Stack Overflow using the spring boot tag to seek help for usage issues or unexpected behavior For bug reports the document asks users to provide detailed information about the problem including the Spring Boot version and if possible a test case or sample application to help diagnose and verify the issue For enhancements it advises users to describe the problem they re trying to solve as there may already be an existing solution or alternative approaches that haven t been considered The primary focus of the document is on the upgrade to Spring Data Ingalls SR8 suggesting that this release may include fixes improvements or enhancements relevant to the user s project,1,0,0,0,0,0,1
The document discusses an upgrade of the Concourse Artifactory resource to version 0 0 2 The user mentions the need to release this version first before proceeding with further updates or changes The upgrade is likely part of a continuous integration CI process where the Concourse CI system interacts with Artifactory for managing and retrieving artifacts The context suggests that version 0 0 2 of the artifactory resource includes improvements or fixes possibly addressing issues related to artifact management such as uploading downloading or version resolution The release of this updated resource is crucial for the successful operation of the pipeline ensuring better integration with Artifactory for future builds The user emphasizes that the release should be completed as a priority to enable the upgraded functionality in the CI pipeline,1,0,0,0,0,0,1
The document explains an issue with the Spring Data Ingalls SR5 BOM which caused problems because it included dependency management for a snapshot version As a result Spring Boot s release build was broken Although SR5 1 was released by olivergierke to address the issue the release hasn t been published to Maven Central yet Given this the recommendation is to upgrade directly to Spring Data Ingalls SR6 to resolve the dependency issue and ensure stability in the release build,1,0,0,0,0,0,1
The document discusses the intention to upgrade to Spring Batch 4 0 0 M3 and include it in the upcoming M3 release However the upgrade depends on whether mminella has time to perform a Spring Batch release within the week The upgrade to this milestone version is important for projects relying on Spring Batch as it likely includes new features improvements and compatibility updates that align with other Spring 5 x components,1,0,0,0,0,0,1
The document outlines the need to upgrade to Spring Security 5 0 0 M3 This version is a milestone release that brings important updates including new features improvements and support for modern security protocols The upgrade is necessary to ensure that projects depending on Spring Security are aligned with the latest changes including updates to OAuth WebFlux integration and other security related enhancements introduced in Spring Security 5 0 Upgrading to this milestone version is crucial for maintaining compatibility and leveraging the new security features provided by the framework,1,0,0,0,0,0,1
The document addresses the need to upgrade to a version of Spring Security OAuth that is compatible with Spring Security 5 The problem arises when using Spring Boot 2 0 0 M2 along with spring security oauth2 and spring security jwt Upon starting the application an error occurs due to the removal of org springframework security crypto codec Base64 in Spring Security 5 0 This causes a NoClassDefFoundError when attempting to create a JwtAccessTokenConverter bean To resolve the issue Spring Boot must update spring security oauth2 in version 2 0 0 to ensure compatibility with the changes in Spring Security 5 0 The document also notes that Spring Security OAuth 2 2 0 snapshots will be available soon with a release expected on or before July 13th as confirmed by rwinch,1,0,0,0,0,0,1
The document refers to the need to upgrade to Spring Integration 5 0 M6 which is scheduled for release on July 17th This upgrade is particularly important because it addresses breaking API changes in WebFlux as noted in the referenced commit ecb7d03895c19f823d727594e629f62d19fbf3c6 The timing of this release is significant as it precedes the Spring Boot M3 milestone by one day ensuring alignment and compatibility between Spring Boot and Spring Integration for projects utilizing WebFlux,1,0,0,0,0,0,1
The document discusses the need to upgrade to Spring Framework 5 0 0 RC1 This upgrade is likely part of an effort to align with the latest release candidate of the Spring Framework which includes new features improvements and bug fixes The upgrade ensures compatibility with upcoming Spring projects and provides access to the latest advancements in reactive programming functional web frameworks and other modern Spring technologies introduced in version 5 x The document likely emphasizes the importance of testing and validating this upgrade to ensure stability and compatibility within the application,1,0,0,0,0,0,1
The document describes an issue encountered when upgrading a Spring Boot project from version 1 4 1 to 1 5 2 and deploying it on Google AppEngine The deployment fails with a java security AccessControlException caused by the usage of threads in the OnClassCondition getOutcomes method Google AppEngine enforces security restrictions that prevent applications from modifying thread groups which results in a failure when Spring Boot tries to create threads during the class condition check The root cause appears to be the use of threads in the OnClassCondition class specifically in OnClassCondition GetOutcomesThread Since AppEngine does not allow thread creation within applications this leads to the AccessControlException The document suggests the need to either eliminate the use of threads in getOutcomes or make their usage configurable allowing the application to run without violating AppEngine s security policies A reference is made to a previous similar issue 4662 that was resolved indicating that this problem might require a similar solution,1,0,0,0,0,0,1
The document refers to the upgrade to Spring Session 2 0 0 M1 Key Points The document is about upgrading to Spring Session 2 0 0 M1 It likely involves introducing new features or improvements as part of the 2 0 x milestone release Although there are no detailed issues or problems mentioned the release signals a shift to the 2 0 x series indicating major updates or breaking changes This upgrade marks a significant step in the Spring Session project moving to a new milestone release with possible new features and improvements,1,0,0,0,0,0,1
The document refers to the upgrade to Spring Batch 4 0 0 M2 and highlights the need for a fix for BATCH 2572 The issue is likely critical for ensuring compatibility or functionality in this milestone release and the user is awaiting a resolution Key Points The upgrade is to Spring Batch 4 0 0 M2 A fix is required for BATCH 2572 mminella is mentioned indicating they might be involved in addressing this issue This indicates ongoing work to resolve important bugs in the Spring Batch ecosystem before the release stabilizes,1,0,0,0,0,0,1
The document discusses issues related to upgrading to Spring Data Kay M3 and its compatibility with Spring Session The main problem arises due to missing dependencies specifically Spring Data LDAP which was not available when Kay M1 was released The NoSuchMethodError encountered relates to the mongoSessionRepository caused by the failure to invoke IndexOperations ensureIndex in Spring Data MongoDB Key Points Spring Data Kay M3 will simplify Spring Session compatibility but currently the process is blocked until Spring Data Kay is fully compatible A BeanCreationException is raised when trying to initialize mongoSessionRepository due to a missing method in Spring Data MongoDB The issue is partially related to missing dependency management for Spring Data LDAP in the Kay M1 BOM requiring the use of snapshots until Kay M2 is released Developers are working on a plan to support both the Kay release and previous Spring Data release trains at the same time The upgrade to Lettuce has been completed which was another change required for Spring Boot s compatibility with Spring Data Kay The ongoing work involves resolving these dependency issues and ensuring compatibility across various Spring components,1,0,0,0,0,0,1
Spring Framework 5 0 increased the system requirements for Servlet to version 3 1 and above To align with these changes it s necessary to update our system requirements documentation Currently our documentation incorrectly states that Spring Boot applications can be deployed to any Servlet 3 0 compatible container This needs to be revised to reflect the new minimum requirement of Servlet 3 1 For detailed information on upgrading refer to the Spring Framework migration guide https github com spring projects spring framework wiki Upgrading to Spring Framework 5 x Updating this information ensures compatibility and prevents potential deployment issues with outdated containers,0,0,0,1,1,0,0
In addressing the issue of default values for enums in metadata a manual approach is necessary due to the inability to automatically detect these defaults 7562 Enhancements in documentation are suggested to clarify this limitation A basic change has been implemented on a specific branch allowing for the default value simple of management info git mode to be visible upon rebuilding spring boot actuator This change has been tested successfully in IntelliJ IJ Spring Tool Suite STS and NetBeans confirming compatibility across these platforms An additional tool has been developed to identify enums missing default values which will be utilized before releases to ensure completeness This process highlights the challenges and ongoing efforts to improve tooling support without causing disruptions,0,0,0,1,1,0,0
In the past RemoteIpValve was enabled by default but was later disabled for cautionary reasons The current suggestion is to re enable it as it only filters requests from a whitelist of local proxy IPs which may have been overly cautious An alternative proposal is to log an error if an X Forwarded header is detected without the valve being installed This discussion has received support but it was previously reverted due to issue 4018 The idea was not implemented in milestone M5 prompting a reopening of the discussion Additionally there is a suggestion to enable ForwardedRequestCustomizer for Jetty as well,0,0,0,1,1,0,0
The reference manual states that the default security password is logged at the INFO level but omits the logger category which is org springframework boot autoconfigure security This omission makes it difficult to adjust logging settings without searching the source code It is recommended to document this category in the manual Additionally the extra newline appended to the default security password log statement in BootDefaultingAuthenticationConfigurerAdapter should be removed as the logging framework already adds a newline making the existing three redundant,0,0,0,1,1,0,0
To improve field documentation for ConfigurationProperties it s essential to enhance the Javadoc on fields to ensure the meta data generator can provide a relevant description attribute This improvement will aid in generating better meta data for properties In cases where fields or Javadoc are absent using documentation from setters could be a potential solution though it may not fit the required format The AtomikosProperties class exemplifies this issue as it uses a map of properties with documented setters but lacks corresponding fields complicating the documentation process Initially each setter was backed by a field but simplifications by philwebb changed this approach prompting a reconsideration of how Javadoc is utilized Ensuring comprehensive documentation coverage before release is a challenge but additional changes and dedicated issues are planned to address these gaps,0,0,0,1,1,0,0
To register the Spring Boot Gradle plugin at the Gradle Plugin Portal developers faced challenges due to deprecated publishing methods Initially the process relied on Bintray which was phased out necessitating a new approach using Gradle s plugin publishing mechanism The team aimed to automate the publication via Artifactory pending certain enhancements Workarounds were available but deemed unreliable The publication process required improvements to support features like dry runs and staging which were still under development Despite these hurdles the team successfully published the plugin using the old Bintray method for version 1 4 2 but ongoing adjustments were needed to streamline future releases,0,0,0,1,1,0,0
Machine learning is a field of artificial intelligence that focuses on developing algorithms and statistical models that enable computers to perform tasks without explicit instructions It relies on pattern recognition and inference within data Key components include supervised learning where models are trained on labeled data and unsupervised learning which deals with unlabeled data to find hidden patterns Reinforcement learning involves an agent learning to make decisions through trial and error Popular algorithms include decision trees neural networks and support vector machines Machine learning is applied in various domains such as image recognition natural language processing and predictive analytics driving innovation across industries,0,0,0,1,1,0,0
To resolve issues with multiple main classes in a Spring Boot project specify the main class using the build gradle element groovy springBoot mainClass myPkg myClass Ensure your designated main class has appropriate annotations like Configuration EnableAutoConfiguration and ComponentScan The MANIFEST MF Start Class entry is correctly set after performing a clean before bootRepackage If not cleaned it may default to another class used in test cases This behavior might relate to prior Spring Boot versions updating or cloning the project can resolve it Documentation improvements clarify that the main class finder relies on a well formed main method not annotations,0,0,0,1,1,0,0
In a Spring Boot application adding management security enabled false to disable security caused a NoClassDefFoundError for SessionCreationPolicy The intention was to move management endpoints to a different port and allow access without a password However simply changing the port was sufficient This may be a documentation issue since the guide suggests disabling security after changing the port The error occurred because Spring Security was not on the classpath which is not a bug but expected behavior It might be helpful to update the documentation to avoid recommending the unnecessary property Improving the exception message could also enhance clarity for developers,0,0,0,1,1,0,0
To customize dependency versions in Spring Boot users can override properties in the project pom xml when using Maven This involves inheriting from the Spring Boot Parent POM and setting properties like spring version 4 0 2 RELEASE spring version It s beneficial to provide a link to the parent POM for users to see customizable values noting potential risks of bugs or incompatibilities For Gradle there s no direct equivalent to Maven s inherited properties users must explicitly declare dependencies with desired versions This may not be ideal and improvements to the Gradle plugin could be considered if there s demand Additional guidance on specifying the Spring Boot version once such as the parent POM version for Maven or the Spring Boot plugin version for Gradle would also be helpful Existing documentation and source files provide a foundation for contributing enhancements,0,0,0,1,1,0,0
The document discusses an issue that arises after migrating from Spring Boot 1 4 3 to 1 5 1 specifically when using SQL Server for pagination The user employs PageableDefault in a controller for pagination which worked fine in 1 4 3 but throws an exception in 1 5 1 The exception occurs due to a syntax issue near the placeholder P0 which is related to Hibernate s handling of SQL queries in the newer version The key difference between the two versions is how the SQL query is generated In 1 4 3 select TOP In 1 5 1 select TOP After further investigation it was determined that specifying spring jpa database platform SQLServer2008 in application properties resolves the issue Additionally it s noted that the Hibernate version remains the same 5 0 11 Final in both versions of Spring Boot so the issue is likely related to changes in how Hibernate detects dialects for SQL Server The documentation was updated and a fix was applied in Spring Boot 1 5 2 to auto configure SQLServer2008Dialect by default The document ends with discussions about Hibernate s autodetection of dialects and a sample project provided to reproduce the issue The user is asked to test with spring jpa database default or try the latest snapshot to confirm the fix,0,1,0,1,0,0,0
The document discusses the decision to restore DataSourceProperties get methods in Spring Boot but in a deprecated form The change aims to provide a smoother migration path for users upgrading from 1 3 to 1 4 avoiding surprises like NullPointerExceptions when the new determine methods are not used The proposed plan is to 1 4 Keep the old get methods mark them as deprecated and encourage switching to determine methods 1 5 Remove the get methods and throw an UnsupportedOperationException 2 0 Reintroduce simplified get methods The discussion emphasizes the need for proper release notes and metadata handling to avoid unexpected behavior during upgrades,0,1,0,1,0,0,0
I m unable to access external URLs or view images but I can help summarize content if you provide the text Please paste the relevant paragraphs here,0,0,1,1,0,0,0
The issue DATACASS 676 reported by Abhijit Sarkar highlights incorrect documentation for registering custom converters in Spring Data Cassandra The provided example uses CustomConversions which lacks the appropriate constructor for this purpose Instead the correct approach is to use CassandraCustomConversions This error affected version 2 1 9 Lovelace SR9 The problem has been addressed in subsequent commits and backported to version 2 1 10 Lovelace SR10 Mark Paluch confirmed the fix,0,0,1,1,0,0,0
The issue DATACASS 660 was opened by Mark Paluch to address a problem with method references in the documentation for Spring Data Cassandra It affects versions 2 1 8 Lovelace SR8 and 2 2 M4 Moore The issue is referenced in a pull request aimed at correcting these method references The fix has been backported to version 2 1 9 Lovelace SR9 For more details you can view the pull request on GitHub,0,0,1,1,0,0,0
The documentation for Spring Data Cassandra incorrectly states that java util UUID maps to the Cassandra type timeuuid when it should map to uuid This discrepancy stemming from changes since version 2 0 is crucial as it can inadvertently affect schema definitions The issue was highlighted in DATACASS 641 and confirmed by Scott Lehman referencing previous discussions and commits The correction will be noted in the What s new section for version 2 0 to ensure users are aware of the mapping update This adjustment affects versions 2 0 13 2 1 5 and 2 2 M2 with backports planned for 2 1 6 and 2 0 14 Mark Paluch acknowledged the report and confirmed that the documentation will be updated,0,0,1,1,0,0,0
The issue revolves around using PrimaryKeyColumn in Spring Data Cassandra which doesn t mark a field as an Id Dmitry F encountered an InvalidDataAccessApiUsageException when attempting to use a repository with PrimaryKeyColumn Mark Paluch clarified that PrimaryKeyColumn is for composite keys while PrimaryKey or Id is for single column keys The confusion arises because PrimaryKeyColumn doesn t act as an Id leading to errors when not properly annotated Stepan noted that using both Id and PrimaryKeyColumn results in a MappingException The recommended solution is to use PrimaryKey for the field when dealing with singular keys or use a PrimaryKeyClass for composite keys though Stepan found this approach unsatisfactory Alexeenka confirmed that switching to PrimaryKey resolved similar issues Documentation improvements were suggested to clarify these distinctions,0,0,1,1,0,0,0
The reactive example from the Spring Data Cassandra documentation had an error The code attempted to use a ReactiveCassandraTemplate with a regular Session which caused a ClassCastException because ReactiveCassandraTemplate requires a ReactiveSession The incorrect documentation snippet suggested casting a Session to ReactiveSession leading to runtime errors The solution was to use ReactiveCassandraTemplate with new DefaultBridgedReactiveSession session which properly wraps the Session This issue affected versions 2 0 4 and 2 1 M1 and was fixed in subsequent updates,0,0,1,1,0,0,0
The issue DATACASS 516 reported by Dusan Andric highlights a missing return type in the getKeyspaceName method of Example 52 in the Spring Data Cassandra documentation This method should return a String The affected versions are 1 5 9 Ingalls SR9 and 2 0 2 Kay SR2 The issue has been addressed and backported to versions 2 0 3 Kay SR3 and 1 5 10 Ingalls SR10 A pull request resolving the problem is available on GitHub,0,0,1,1,0,0,0
The issue DATACASS 486 https jira spring io browse DATACASS 486 highlights errors in a code sample for user defined types UDT in the Spring Data Cassandra documentation The Address class incorrectly duplicates the city attribute and lacks proper annotation for zipcodes The documentation also needs more guidance on using UDTs in collections like Set and Map Spring Data uses convention based mapping meaning not all properties require annotations unless you need to override defaults For UDTs using collections like Set MyUdt or List MyUdt is straightforward The issue also references a related ticket DATACASS 487 https jira spring io browse DATACASS 487 addressing UDT support in maps,0,0,1,1,0,0,0
The issue DATACASS 404 was opened by Michael Hausegger highlighting an incorrect link to the Jira site in the readme md file of the Spring Data Cassandra project This affected versions 1 5 GA Ingalls and 2 0 M1 Kay The problem was referenced in pull request 98 and several commits It was resolved and backported to version 1 5 1 Ingalls SR1 The correction involved updating the documentation to ensure accurate referencing as confirmed by the successful pull request,0,0,1,1,0,0,0
Oliver Drotbohm reported an issue DATACASS 135 regarding the broken build of the reference documentation for version 1 0 GA Dijkstra of Spring Data Cassandra The problem has been linked to several specific commits a5cad94 1c10c42 and 4f70c6f The issue was addressed and fixes were backported to version 1 0 1 Dijkstra SR1 This ensures that the documentation remains accurate and accessible for users relying on the affected versions,0,0,1,1,0,0,0
The issue DATACASS 613 was opened by Mark Paluch to streamline the setup of reference documentation for Spring Data Cassandra The proposal involves removing common properties from index adoc as these are now defined in the Spring Data Build This change aims to simplify the documentation process by centralizing common configurations reducing redundancy and ensuring consistency across projects This issue is linked to DATACMNS 1442 which focuses on a similar simplification for the overall reference documentation setup,0,0,0,1,1,0,0
The issue DATACASS 561 opened by Mark Paluch involves a full editing pass on the Spring Data Cassandra reference documentation The changes were proposed and reviewed via a pull request on GitHub These updates were also backported to version 2 0 8 Kay SR8 The goal of these edits is to improve clarity accuracy and consistency in the documentation ensuring that developers have a reliable resource for implementing Cassandra with Spring Data The revisions help streamline the learning process and enhance developer productivity by providing clearer guidelines and examples,0,0,0,1,1,0,0
Summary for Machine Learning The task DATACASS 562 involves adding a cover page for EPUB documentation output This improvement was initiated by Mark Paluch and is linked to specific pull requests and commits within the Spring Data Cassandra project The changes have been referenced from a pull request and multiple commits ensuring the documentation aligns with the project s standards Additionally these updates have been backported to version 2 0 8 Kay SR8 indicating their importance and applicability to previous releases The goal is to enhance the presentation and accessibility of the documentation for users Links Mark Paluch s Profile https jira spring io secure ViewProfile jspa name mp911de DATACASS 562 Issue https jira spring io browse DATACASS 562 redirect false Pull Request https github com spring projects spring data cassandra pull 132 Commit 5a2c190 https github com spring projects spring data cassandra commit 5a2c190d4c6225b71e015077dd64277d28f2125d Commit 53cb991 https github com spring projects spring data cassandra commit 53cb9916d945c3cc5bddac0e92204f0116b1b94f Backport Milestone https github com spring projects spring data cassandra milestone 94 closed 1,0,0,0,1,1,0,0
Nurgazy Nazhimidinov reported an issue in the Spring Data Cassandra Reference Guide noting that parts of it are outdated specifically in the Getting Started section which references older versions of Spring Data Cassandra and the Spring Framework Nurgazy requested an update to the guide Mark Paluch responded acknowledging the concern and stating that they are already working on updating the documentation under a related issue DATACASS 272 He advised following that ticket for progress updates and marked Nurgazy s issue as a duplicate,0,0,0,1,1,0,0
The review and edit of the Spring Data Cassandra Reference Guide DATACASS 272 involves updating the documentation to ensure its accuracy with the latest Cassandra driver and developments from DataStax The process includes addressing issues like handling Transient properties and updating sections on custom converters Various related issues and commits highlight the progress and changes made such as those documented in pull requests and several GitHub commits This initiative affects version 1 4 1 and is linked to various other tickets addressing documentation improvements The updates are also backported to version 1 5 RC1 with ongoing efforts to maintain and enhance the documentation through subsequent tickets and updates,0,0,0,1,1,0,0
The issue DATACASS 190 highlights difficulties in using custom converters in Spring Data Cassandra due to outdated documentation The problem affects versions 1 0 5 1 1 GA and 1 2 The lack of guidance makes it challenging for users to implement custom mapping effectively Mark Paluch noted that documentation updates were made under DATACASS 272 to address these concerns Once the updates are merged the ticket can be set to fixed ensuring users have the necessary documentation to utilize custom converters efficiently,0,0,0,1,1,0,0
The issue DATACASS 171 opened by John Lockwood addresses several problems with the Spring Data Cassandra documentation Key concerns include broken or non existent links on the project page and unfinished sections in the reference documentation for version 1 1 0 RELEASE One specific request for more information on Cassandra repositories highlights these gaps The issue affects version 1 1 RC1 Evans and is linked to DATACASS 272 which focuses on revising the reference guide Mark Paluch comments that the documentation will be updated under this related issue,0,0,0,1,1,0,0
The issue DATACASS 170 opened by John Lockwood requests the inclusion of documentation and examples for SimpleCassandraRepository in the Spring Data Cassandra reference guide Specifically it suggests adding a basic example demonstrating its usage including how to configure and wire up constructor arguments like EntityInformation This would aid developers in effectively implementing the repository Mark Paluch commented that the preferred method is to use repository factories for Spring based dependency injection through interfaces emphasizing a more streamlined and modular approach This enhancement would improve the usability and understanding of SimpleCassandraRepository for users,0,0,0,1,1,0,0
The issue DATACASS 153 was opened by Oliver Drotbohm to polish the reference documentation for the Spring Data Cassandra project The goal was to improve clarity consistency and comprehensive coverage of the documentation This involved revising existing content to ensure accuracy and coherence as well as updating any outdated information The changes were referenced in a specific commit to the project s GitHub repository highlighting the collaborative effort to enhance the user experience and facilitate better understanding for developers using the framework,0,0,0,1,1,0,0
Summary of DATACASS 61 David Webb initiated DATACASS 61 to create an outline for a reference guide for the Spring Data Cassandra project version 1 0 M1 Dijkstra The outline is modeled after the Spring Data MongoDB documentation structure with adjustments to fit Cassandra s context Parts of the original MongoDB DocBook that were not relevant have been removed and necessary edits have been made to tailor the content for Cassandra The outline is now prepared for detailed content to be added,0,0,0,1,1,0,0
Summary David Webb opened issue DATACASS 60 https jira spring io browse DATACASS 60 to discuss the usage and reference guide for Spring Data Cassandra This issue is linked to DATACASS 272 https jira spring io browse DATACASS 272 which involves reviewing and editing the Spring Data Cassandra Reference Guide Mark Paluch commented that the documentation will be updated as part of DATACASS 272 indicating that the latter issue supersedes the former,0,0,0,1,1,0,0
In the Spring Data JPA Reference Documentation there s an issue with the dynamic table of contents ToC not correctly reflecting the document s position due to missing anchors in some sections This causes confusion when navigating as the ToC shows incorrect sections especially when transitioning between sections like 4 8 3 and 5 1 1 The problem is linked to the JavaScript library Tocbot which requires anchors to function properly Although some fixes have been implemented such as adding missing IDs the issue persists in certain sections like Custom Namespace Attributes which lacks proper anchors Additional work is needed to ensure all document headers have IDs to prevent such errors The problem affects multiple browsers including Chrome and Firefox,0,0,1,1,0,0,0
In the Spring Data JDBC documentation some code examples written in Kotlin were mistakenly labeled as Java This issue was reported by a user named ostfale under the identifier DATACMNS 1807 The problem involved incorrect language declarations potentially causing confusion for developers referring to these examples The documentation has been updated to reflect the correct language ensuring clarity and accuracy This change has been backported to versions 2 3 5 Neumann SR5 and 2 2 11 Moore SR11 to maintain consistency across different releases,0,0,1,1,0,0,0
In the issue DATACMNS 1782 a problem arises with handling ConstraintViolationException using a chained transaction manager in Spring The user reports using two different data sources with a unique constraint on one When attempting to save entities to both data sources a constraint violation error occurs leading to a mixed transaction state where one data source commits successfully but the other does not roll back Despite trying different propagation settings the issue persists The Spring version in use is 2 2 2 A potential solution involves either using a single DataSource or handling transactions individually ensuring manual rollback if one fails The issue was closed as the behavior was determined to be as designed,0,0,1,1,0,0,0
A typo in the TypedSort reference example was fixed in the Spring Data Commons project as reported by a user in issue DATACMNS 1777 https jira spring io browse DATACMNS 1777 This correction was made to ensure clarity and accuracy in the documentation related to paging and sorting for version 2 3 2 Neumann SR2 of Spring Data JPA The pull request addressing this issue can be found here https github com spring projects spring data commons pull 461 The fix was also backported to version 2 3 3 Neumann SR3 This change enhances the usability of the TypedSort feature by providing a correct example for developers,0,0,1,1,0,0,0
The JavaDoc for the Range factory methods in the Spring Data Commons library was incorrect as both Range closed and Range open had identical documentation stating that they create a Range with inclusive bounds This was misleading because Range closed is indeed inclusive but Range open is exclusive The issue affected version 2 3 GA Neumann and was backported to versions 2 3 1 Neumann SR1 and 2 2 8 Moore SR8 The error was reported by Shollander and has since been corrected as confirmed by Mark Paluch,0,0,1,1,0,0,0
The issue DATACMNS 1720 involves correcting the Javadoc for CustomAnnotationTransactionAttributeSource to accurately describe JTA Java Transaction API support This task was opened by cicioflaviu and affects version 2 3 RC2 Neumann of Spring Data Commons The correction has been referenced in a pull request and has been backported to versions 2 2 8 Moore SR8 and 2 1 18 Lovelace SR18,0,0,1,1,0,0,0
In the issue DATACMNS 1661 https jira spring io browse DATACMNS 1661 redirect false Minsung Ryu suggested adding a missing parameter age to the object mapping property population in the reference documentation This change was referenced in a pull request https github com spring projects spring data commons pull 429 and subsequently backported to versions 2 2 5 Moore SR5 https github com spring projects spring data commons milestone 176 closed 1 and 2 1 16 Lovelace SR16 https github com spring projects spring data commons milestone 175 closed 1 of Spring Data Commons The update ensures the documentation accurately reflects the parameters used in object mapping improving clarity and usability for developers,0,0,1,1,0,0,0
Summary In the context of machine learning the task involves adding an anchor to the section on mapping recommendations in the reference documentation for improved navigation The issue DATACMNS 1660 https jira spring io browse DATACMNS 1660 redirect false was opened by taeyeon Kim https jira spring io secure ViewProfile jspa name taeyeon kim with a focus on enhancing the object mapping document This enhancement is referenced from a pull request https github com spring projects spring data commons pull 428 and has been backported to versions 2 2 5 Moore SR5 https github com spring projects spring data commons milestone 176 closed 1 and 2 1 16 Lovelace SR16 https github com spring projects spring data commons milestone 175 closed 1 ensuring consistency across these releases,0,0,1,1,0,0,0
Mark Paluch opened issue DATACMNS 1557 noting that the Javadoc for sorting in Spring Data Commons incorrectly described the sorting order The issue affects version 2 1 9 Lovelace SR9 and was referenced in a pull request and two commits aimed at fixing the documentation error The corrections were also backported to version 2 1 10 Lovelace SR10 This update ensures that the Javadoc accurately reflects the intended sorting behavior improving clarity for developers using the framework,0,0,1,1,0,0,0
In the Javadoc for Slice nextPageable and Slice previousPageable methods in Spring Data it incorrectly states that the return type can be null if the current Slice is the last one However the actual implementation returns Pageable unpaged instead of null This discrepancy was identified in versions 2 2 M1 2 0 13 and 2 1 4 and addressed by updating the documentation and introducing a new method nextOrLastPageable The issue was resolved and backported to versions 2 1 5 and 2 0 14 ensuring consistency in the return types and preventing potential null pointer exceptions,0,0,1,1,0,0,0
In the Spring Data Commons project a broken link issue was reported by Adib Saikali The main page s reference link to the GA docs resulted in a 404 error while an alternative link found via Google worked correctly Additionally a section on nullability analysis contained broken links due to unset variables The issue affected version 2 0 9 Kay SR9 and was documented with screenshots for clarity It was referenced in several commits and backported to versions 2 0 10 Kay SR10 and 1 13 15 Ingalls SR15 Mark Paluch confirmed that the issue was resolved,0,0,1,1,0,0,0
The QuerydslPredicateArgumentResolver Javadoc in Spring Data Commons was pointing to an outdated Querydsl package which affected version 1 13 11 Ingalls SR11 The issue was reported by Mark Paluch under the Jira ticket DATACMNS 1293 This was referenced in a pull request and several commits aimed at addressing the problem The corrections were also backported to versions 2 0 7 Kay SR7 and 1 13 12 Ingalls SR12 to ensure consistency and reliability across different versions,0,0,1,1,0,0,0
The issue DATACMNS 1280 was opened by Gemini Kim to address a documentation error in the Querydsl Extension The update involves correcting the letter casing from QueryDslPredicateExecutor to QuerydslPredicateExecutor This change ensures consistency in the naming convention used throughout the documentation The issue is linked to DATACMNS 1286 which is identified as a duplicate error in QueryDsl documentation Relevant modifications were made in a pull request and several commits on the Spring Data Commons GitHub repository The fix was also backported to version 2 0 6 Kay SR6 This correction aligns with the broader goal of maintaining accuracy and clarity in the project s documentation,0,0,1,1,0,0,0
Nicolas Mervaillie reported an issue with broken links in the Query by Example section of the Spring Data Commons documentation This issue affects version 2 0 GA Kay The problem was referenced in a pull request and several commits aimed at resolving it The fixes were backported to version 2 0 1 Kay SR1 For more details you can view the associated pull request and commits in the project s GitHub repository,0,0,1,1,0,0,0
The issue DATACMNS 1085 https jira spring io browse DATACMNS 1085 highlights the need for small documentation improvements in the Spring Data Commons project Jens Schauder noted the addition of two fixes available in pull requests 218 https github com spring projects spring data commons pull 218 and 229 https github com spring projects spring data commons pull 229 A significant improvement suggested is the inclusion of guidance on using AccessType which is currently missing from the reference documentation This enhancement is related to previous tasks like DATACMNS 851 https jira spring io browse DATACMNS 851 The changes have been referenced in multiple commits and backported to versions 1 13 5 Ingalls SR5 https github com spring projects spring data commons milestone 103 closed 1 and 1 12 12 Hopper SR12 https github com spring projects spring data commons milestone 102 closed 1,0,0,1,1,0,0,0
In the Spring Data Commons reference documentation a typo was reported in the example for declaring a Jackson repository populator The correct syntax should be repository jackson2 populator locations classpath data json This issue identified in version 1 11 1 Gosling SR1 was addressed and fixed as referenced in several commits on GitHub The correction was also backported to versions 1 11 2 Gosling SR2 and 1 10 3 Fowler SR3 Oliver Drotbohm acknowledged the fix ensuring that future documentation reflects the correct example,0,0,1,1,0,0,0
The issue DATACMNS 779 was opened by Oliver Drotbohm to address the need for fixing the JavaDoc of the QuerydslPredicateBuilder constructor This task was necessary for version 1 11 GA Gosling of the Spring Data Commons project The problem was highlighted through a tweet and referenced in specific commits on GitHub The fix was backported to version 1 11 1 Gosling SR1 to ensure proper documentation and functionality across different versions This reflects an ongoing effort to maintain and improve code quality and documentation within the project,0,0,1,1,0,0,0
In the issue DATACMNS 763 a problem arose when upgrading a project to Spring Boot 1 3 M5 which depends on spring data jpa 1 9 0 RELEASE and spring data commons 1 11 0 RELEASE A custom repository implementation that worked with spring data jpa 1 8 2 failed to inject throwing an IllegalStateException due to constructor incompatibility The exception was traced to RepositoryFactorySupport getTargetRepositoryViaReflection in spring data commons 1 11 0 To resolve this it s necessary to use the correct constructor one taking JpaEntityInformation and EntityManager The documentation initially misstated the constructor requirements leading to confusion By adjusting the custom repository factory to implement getTargetRepository RepositoryInformation correctly using JpaEntityInformation the issue was resolved The solution involved creating a new repository implementation class MyRepositoryImpl2 and adjusting MyRepositoryFactory to return it This change aligned with the updated repository base class mechanism eliminating the need for manual factory implementations,0,0,1,1,0,0,0
The issue DATACMNS 754 opened by Oliver Drotbohm addresses the persistence of User instances within the PersonRepository as described in the Spring Data Commons reference documentation The problem is tracked in the Spring JIRA system and involves ensuring that repository interfaces correctly handle user entities This issue has been backported to version 1 10 3 Fowler SR3 of the Spring Data Commons project indicating that the fix or enhancement has been applied to an earlier version to maintain compatibility or functionality across different software versions,0,0,1,1,0,0,0
The issue DATACMNS 629 was opened by Oliver Drotbohm to address an error in the Spring Data Commons documentation regarding query result limitations The documentation incorrectly used the method findFirstByOrderByLastname instead of the correct findFirstByOrderByLastnameAsc This clarification ensures that the order by clause explicitly specifies the ascending order The problem is linked to DATACMNS 641 which discusses defaulting to ascending order when no sort direction is specified in derived repository queries This correction has been backported to version 1 9 2 Evans SR2 For more details refer to the Spring Data JPA documentation http docs spring io spring data jpa docs current reference html repositories limit query result,0,0,1,1,0,0,0
The issue DATACMNS 586 https jira spring io browse DATACMNS 586 concerns documentation errors where strange characters like appear instead of actual code This is likely due to incorrect character encoding An example provided shows a placeholder not instantiated properly in the documentation The problem affects version 1 9 GA Evans and is linked to DATAJPA 616 https jira spring io browse DATAJPA 616 which also deals with broken character encoding The Ops Team is aware and currently working to resolve the issue,0,0,1,1,0,0,0
The reference documentation for web pagination in Spring Data Commons had outdated parameter names affecting versions 1 8 1 Dijkstra SR1 and 1 9 M1 Evans This was addressed in DATACMNS 538 https jira spring io browse DATACMNS 538 by Oliver Drotbohm The issue was linked to another documentation update for parsing sorting options DATAREST 212 https jira spring io browse DATAREST 212 A pull request was submitted to correct these discrepancies and the changes were backported to version 1 8 2 Dijkstra SR2 Thomas Darimont also commented on the adjustments made to ensure accuracy in the documentation,0,0,1,1,0,0,0
The issue DATACMNS 514 was opened by Marten Deinum to address a typo in the documentation for declaring a Jackson repository populator The error involved the use of the location attribute instead of the correct locations attribute This affected version 1 8 GA Dijkstra of the software The problem was also backported to versions 1 8 1 Dijkstra SR1 and 1 7 3 Codd SR3 Thomas Darimont later fixed the documentation ensuring that the correct attribute name locations is used The fix is documented in a GitHub commit For more details a reference URL to a related Stack Overflow discussion was provided,0,0,1,1,0,0,0
In Spring Data JPA a change from version 1 4 3 to 1 4 4 caused issues with resolving ID types in repository interfaces The problem arises when intermediate repository interfaces like EntityRepository are not annotated with NoRepositoryBean leading Spring to treat them incorrectly as concrete repositories This was due to a performance optimization that altered metadata resolution causing previously ignored invalid repositories to be detected The solution is to annotate intermediate interfaces with NoRepositoryBean to prevent them from being instantiated as repositories This adjustment aligns with changes in Spring s GenericTypeResolver and Spring Data Commons updates,0,0,1,1,0,0,0
The issue DATACMNS 429 was opened by Matt Fleshman to address incorrect parameter order in the PageRequest int page int size constructor documentation The documentation mistakenly listed the parameters in the wrong order affecting version 1 6 1 This was referenced in commits f1d49c6f3747558a8a7d805df50923a08c96194a and 659d64d63bec59814e721da0783b87fee9bee3de Oliver Drotbohm acknowledged the mistake corrected the documentation and added further details on nullability These improvements were also backported to version 1 6 4 Babbage SR3,0,0,1,1,0,0,0
The PageableArgumentResolver was deprecated in version 1 6 RC1 intended to be replaced by a class named PageableWebHandlerArgumentResolver However this class does not exist The correct replacement is likely PageableHandlerMethodArgumentResolver omitting Web This issue was addressed in conjunction with a fix for another documentation error under DATACMNS 304 https jira spring io browse DATACMNS 304 which involved misleading documentation related to page parameter resolution,0,0,1,1,0,0,0
The issue DATACMNS 348 opened by Thomas Hackel highlights a discrepancy in how Spring projects handle XSD files While most Spring projects provide the latest XSD without a version number e g spring context xsd the Spring Data project only offers XSDs for specific versions This inconsistency can lead to difficulties in accessing the most current schema files for Spring Data The absence of a default or current XSD URL for Spring Data contrasts with the approach taken by other Spring projects which may affect ease of use and integration for developers relying on the latest schema updates,0,0,1,1,0,0,0
A user reported an incorrect class name in a code snippet within the Spring Data JPA documentation The interface PersonRepository was incorrectly declared as PersonRepoyitory in section 1 3 This issue logged as DATACMNS 317 https jira spring io browse DATACMNS 317 was highlighted by Mauricio Fuentes Montero Oliver Drotbohm responded that the mistake has been corrected in newer documentation versions advising users to refer to the latest materials as the version in question was from 2011,0,0,1,1,0,0,0
Mauricio Fuentes Montero reported a missing parenthesis in a code snippet from section 1 2 of the Spring Data documentation under issue DATACMNS 316 The problematic line was java Page User users repository findAll new PageRequest 1 20 This error was noted in the Spring Data JIRA system Oliver Drotbohm later confirmed that the issue had already been fixed in the current versions For more details the original documentation reference is available here http static springsource org spring data jpa docs 1 0 0 M1 reference html,0,0,1,1,0,0,0
The issue DATACMNS 304 highlights a problem with the PageableArgumentResolver in the Spring framework which fails to resolve the page parameter as expected Users must use page page for pagination to work correctly This discrepancy suggests that either the documentation needs updating or the resolver itself should be modified to align with the documented behavior The problem affects version 1 5 Final and it is linked to another issue DATACMNS 359 regarding incorrect deprecation messages Relevant commits in the Spring Data Commons repository address these concerns indicating ongoing efforts to resolve the issue,0,0,1,1,0,0,0
Florian Waibel reported an issue with the Spring Data Commons Maven artifactId on the SpringSource website noting that it appears outdated The listed artifactId spring data commons core seems to have been overlooked for updates This issue affects version 1 5 Final and is referenced in specific GitHub commits The discrepancy may cause confusion for developers relying on accurate artifact information for their projects,0,0,1,1,0,0,0
The Javadoc for org springframework data web PageableDefaults contained links to invalid classes as noted by Matthias M ller in issue DATACMNS 264 This issue affected version 1 4 Final of the library The problem was identified in the value and pageNumber methods The issue has since been resolved as confirmed by a comment from Oliver Drotbohm referencing the commit c908d0e023f3572e96930041a8e1bdcdbb2b9b99 that fixed the links The resolution allows the issue to be closed ensuring the documentation is now accurate,0,0,1,1,0,0,0
The issue DATACMNS 205 opened by Oliver Drotbohm addresses a problem with the docbook syntax highlighting in the Spring Data Commons project The syntax highlighter does not support the javascript language leading to a NullPointerException To resolve this it s recommended to remove syntax highlighting from the affected example which involves repository populators This issue impacts version 1 4 M1 and is referenced in a specific commit on GitHub,0,0,1,1,0,0,0
David Turanski reported a typo in section 1 2 of the documentation specifically a missing right parenthesis in the code snippet Page User users repository findAll new PageRequest 1 20 This was referenced in a commit on the Spring Data Commons GitHub repository,0,0,1,1,0,0,0
The issue with configuring DomainClassConverter in Spring Data JPA involves a cyclic instantiation error when following the documented setup leading to a null conversion service error This can be circumvented by a workaround that properly registers converters using a MethodInvokingFactoryBean The root of the problem lies in the RepositoryFactoryInformation not being properly registered as calls to BeanFactoryUtils beansOfTypeIncludingAncestors return empty results This occurs due to AOP proxies preventing type matching for repository beans The solution involves ensuring that repository factories are instantiated before the DomainClassConverter attempts to access them particularly in applications with separate ApplicationContexts As a temporary measure a custom registrar class can be used to manually register the DomainClassConverter The issue is partly due to a bug in the Spring framework which has been addressed in version 3 1 1,0,0,1,1,0,0,0
The issue DATACMNS 71 was opened by Oliver Drotbohm to address an invalid cross reference in the Spring Data Commons documentation The problem involves a table listing namespace attributes that incorrectly points to a non existent section This affects version 1 2 M1 of the project The issue is referenced in specific commits to the project s GitHub repository indicating ongoing efforts to resolve it An attachment mylyn context zip is included possibly to provide additional context or support for the resolution,0,0,1,1,0,0,0
After upgrading to Spring Boot 2 6 loading objects from MongoDB using DBRef lazy true fails due to issues with enhanced classes like FooBar EnhancerByCGLIB The problem stems from a change in ClassTypeInformation that affects how classes are identified The line in question was changed from using ProxyUtils getUserClass type to simply type causing enhanced classes not to be found in the mapping context s persistent entities This results in a MappingException when fetching Price objects as VatRate is not recognized correctly A workaround involves configuring the initial entity set through an entity scan using the base package to pre initialize contexts This issue is present in snapshots for versions 3 0 2 7 and 2 6,0,1,1,0,0,0,0
The issue DATACMNS 109 was opened by Alexey Fansky regarding a problem with unit tests for spring data commons core on JDK 1 7 The problem stemmed from a dependency on Querydsl 2 2 0 which contained a known bug This bug was documented in Launchpad and resolved in Querydsl version 2 2 1 After updating the dependency to this newer version the unit tests ran successfully The issue affects version 1 2 M2 and is linked to another issue DATACMNS 112 which also involves upgrading to the latest Querydsl,0,0,1,0,0,0,1
The issue revolves around a UnsupportedOperationException in Kotlin when using data classes with parameterized types in a Spring Boot application Specifically attempting to save an instance of a data class with a null ID results in a crash due to a lack of accessors for setting the property This problem can be resolved by changing the map type from Map String Any to Map String String or by downgrading to Spring Boot 2 4 3 The bug is linked to the way Kotlin resolves copy methods where the component type differs from the expected KType Upgrading to spring data commons 2 4 7 SNAPSHOT or 2 5 0 SNAPSHOT resolves the issue Additionally including jackson module kotlin in the build configuration can help,1,1,0,0,0,0,0
The issue under discussion involves clarifying the documentation for query prefix behavior in Spring Data The existing documentation indicates that prefixes like find By read By query By count By and get By are stripped before parsing the rest of the method name However it lacks explicit mention that arbitrary prefixes are allowed provided they don t match specific keywords like Distinct This ambiguity makes it unclear whether such usage is intentional Examples show arbitrary text in method names but without clear explanation There s a call for documentation to explicitly state that arbitrary prefixes are permissible to make method names more expressive as long as they don t interfere with reserved keywords Additionally further explanation of keywords like Distinct and documentation of all special prefix expressions is suggested for clarity,0,0,0,1,1,0,0
The section on Customizing Individual Repositories is criticized for being unclear particularly regarding its purpose and content The examples provided are seen as incomplete and lacking in description making it difficult for readers to grasp the feature s possibilities The feedback suggests that examples should be concrete with clear outputs and effects allowing readers to validate their understanding The section also introduces concepts like fragments and repository composition without adequate explanation leading to confusion There s a call for clearer terminology especially around query methods and repository methods and the suggestion that diagrams could enhance understanding Overall there s a need for more descriptive and cohesive documentation to aid comprehension especially for those new to Spring Data JPA,0,0,0,1,1,0,0
In the JIRA issue DATACMNS 1639 Lovro Pand i raised a concern about the necessity of using Wither methods for Id fields in immutable entities within Spring Data He questioned why a constructor couldn t be used instead to handle Id assignment as Wither seems more applicable to mutable entities where properties might change Oliver Drotbohm responded acknowledging the suggestion and explaining that the current system abstracts object creation focusing on property setting through methods that generate new instances He noted that Spring Data can handle protected and private Wither methods mitigating exposure concerns Drotbohm also mentioned creating a proof of concept to address this and planned to discuss it with the team The change might be introduced in a future release as it involves significant API adjustments Additionally they plan to clarify documentation regarding this feature,0,0,0,1,1,0,0
The issue DATACMNS 1542 https jira spring io browse DATACMNS 1542 was opened by davidlj95 to address a simple typo in the CONTRIBUTING adoc file for the Spring Data project This fix was referenced in a pull request on GitHub linked at pull request 833 https github com spring projects spring data build pull 833 Jens Schauder commented that the pull request is relevant to the spring data build repository which utilizes GitHub as its issue tracker The primary focus was correcting a minor textual error to improve documentation quality,0,0,0,1,1,0,0
The issue DATACMNS 1479 involved updating the reference documentation to replace deprecated code usage Specifically the PageRequest instantiation was updated from new PageRequest 0 20 to the newer PageRequest of 0 20 This change affected several versions including 2 2 M1 Moore 2 0 13 Kay SR13 and 2 1 4 Lovelace SR4 The fix was also backported to versions 2 1 5 Lovelace SR5 and 2 0 14 Kay SR14 The update was acknowledged and merged by Oliver Drotbohm ensuring consistency with the latest API practices,0,0,0,1,1,0,0
The issue DATACMNS 1444 involves adding a documentation section on Streamable and collection return types in the Spring Data Commons project Streamable is a helper type that simplifies handling collections allowing fluent APIs and lazy evaluation of elements This enhancement aims to clarify how Streamable can be used effectively alongside standard collection return types By providing detailed documentation users can better understand Streamable s advantages and how it integrates with the existing Spring ecosystem Oliver Drotbohm opened this issue to ensure comprehensive guidance is available for developers improving the overall usability of the framework,0,0,0,1,1,0,0
Mark Paluch proposed simplifying the reference documentation setup for Spring Data by removing common properties from index adoc as they are now defined in Spring Data Build This change is part of a broader effort to streamline documentation processes across various Spring Data projects Related issues in other modules like Cassandra Couchbase Elasticsearch and others reflect similar simplification efforts The initiative aims to centralize and standardize documentation making it more efficient and easier to maintain These changes were referenced in a specific commit to the Spring Data Commons repository,0,0,0,1,1,0,0
The issue DATACMNS 1382 https jira spring io browse DATACMNS 1382 was opened by Oliver Drotbohm to address a problem with property substitution in the dependency section of Spring Data Commons The problem appears to have been resolved as indicated by several commits 390e8c24 https github com spring projects spring data commons commit 390e8c245aed7d8086d1c9204be60c48b4cfc218 fc633f62 https github com spring projects spring data commons commit fc633f623d4e6f28bddd0d5a074639fa9a245f6b and a7069e3c https github com spring projects spring data commons commit a7069e3c8e6a05d4c3220b180deb9e5d2e2d2e12 These updates suggest the issue has been addressed as the commits indicate completed changes,0,0,0,1,1,0,0
Spring Data s method parsing or query derivation is a mechanism that allows developers to define query methods in repositories using natural language It uses specific keywords such as find exists count and delete followed by the term By to signify query derivation Everything between the action keyword and By makes the method name more descriptive but does not influence the actual query derivation process This feature simplifies query creation by enabling automatic creation of queries based on method names The discussion in DATACMNS 1100 highlights the need for better documentation on this feature although existing references are deemed sufficient The conversation suggests that improvements could focus on making this information more accessible to prevent misunderstandings,0,0,0,1,1,0,0
The documentation for projections in Spring Data requires improvements Key suggestions include adding details on nested projections such as using a ProjectedPerson that references a FormattedAddress instead of the original Address It advises against creating a separate repository for addresses as it alters the domain model unnecessarily Clarifications are needed on what distinguishes closed and open projections closed projections map all declared properties to a domain object s properties while open ones include at least one Value mapped property The documentation should also elaborate on recommended return types either using domain objects or nested projections and emphasize that formatting is a serialization concern suggesting the use of Jackson annotations mixins and custom serializers,0,0,0,1,1,0,0
In the Spring Data JPA reference documentation a typo was identified in the section on publishing events from aggregate roots The class name was incorrectly listed as AnAggreagteRoot instead of AnAggregateRoot This error was noted by Christophe Maillard in issue DATACMNS 1000 The documentation provides guidance on how domain events are published in aggregate roots a key concept in domain driven design and event driven architecture The typo was corrected in several commits and backported to version 1 13 1 Ingalls SR1 The corrections ensure clarity and accuracy for developers referencing this section,0,0,0,1,1,0,0
In the Spring Data Commons documentation a spelling mistake was identified in section 7 4 4 Special parameter handling The phrase walking thought should be corrected to walking through to accurately describe navigating a larger result set This issue was reported by Dmitry Sandalov under the identifier DATACMNS 962 The correction has been backported to several versions including 1 13 RC1 Ingalls 1 12 6 Hopper SR6 and 1 11 7 Gosling SR7 For further details you can refer to the Spring Data MongoDB documentation http docs spring io spring data mongodb docs current reference html repositories special parameters,0,0,0,1,1,0,0
Mark Paluch opened issue DATACMNS 903 https jira spring io browse DATACMNS 903 to address a typo in the reference documentation for Spring Data Commons This issue affects versions 1 11 4 Gosling SR4 1 12 2 Hopper SR2 and 1 13 M1 Ingalls The fix was referenced in a pull request https github com spring projects spring data commons pull 174 files and was subsequently backported to versions 1 12 3 Hopper SR3 and 1 11 5 Gosling SR5,0,0,0,1,1,0,0
In the issue DATACMNS 869 Pascal Gr n identified an error in the Javadoc of the Pair java file in the Spring Framework where the type parameter descriptions were switched This affected version 1 12 1 Hopper SR1 The issue was referenced in a pull request and several commits on GitHub Oliver Drotbohm acknowledged the report and confirmed that the fix was merged into both the master and the maintenance branch for the Hopper release The correction was also backported to version 1 12 2 Hopper SR2,0,0,0,1,1,0,0
The issue DATACMNS 858 was opened by Oliver Drotbohm to address incorrect documentation in the JavaDoc of CrudMethods The problem involves the wrong preferences indicated for selected delete methods This issue affects versions 1 11 4 Gosling SR4 and 1 12 1 Hopper SR1 of the software It has been backported to versions 1 12 2 Hopper SR2 and 1 11 5 Gosling SR5 The resolution aims to correct the documentation to accurately reflect the intended functionality of the delete methods within the CrudMethods interface,0,0,0,1,1,0,0
The issue DATACMNS 798 involves a regression in PageImpl where the totalElements count is unexpectedly calculated as 12 instead of the expected 2 when pagination overflows This change arose after DATACMNS 713 altering the behavior of the PageImpl constructor by recalculating totals based on page content rather than accepting provided totals Users noted that this logic can be confusing and differs from previous versions potentially causing issues outside the typical Spring Data context Oliver Drotbohm explained that the recalculation aligns with ensuring the total reflects available elements which can differ due to data changes like deletions He suggested updating JavaDoc for clarity and emphasized that the implementation is now more accurate though feedback on its use cases is welcome,0,0,0,1,1,0,0
In the Spring Data Commons project a typo in the JavaDoc of the Page getTotalPages method was identified and reported by Oliver Drotbohm under the issue DATACMNS 789 This issue affects versions 1 10 2 Fowler SR2 and 1 11 1 Gosling SR1 and is linked to a similar issue DATACMNS 906 indicating duplication The correction has been backported to versions 1 11 2 Gosling SR2 and 1 10 3 Fowler SR3 ensuring that the documentation is accurate across these versions,0,0,0,1,1,0,0
The JavaDoc for PersistentPropertyAccessor should provide clear instructions on how to obtain an instance of it This improvement suggestion was made by Oliver Drotbohm in the Spring Data Commons issue DATACMNS 746 The issue affects versions 1 10 2 Fowler SR2 and 1 11 RC1 Gosling and has been backported to version 1 10 3 Fowler SR3 Relevant changes can be seen in commits on the Spring Data Commons GitHub repository The enhancement aims to improve developer understanding and usability by offering precise guidance in the documentation,0,0,0,1,1,0,0
In the issue DATACMNS 707 Oliver Drotbohm addressed a problem with JavaDoc in the CrudRepository interface of the Spring Data Commons project The issue affected versions 1 8 5 Dijkstra SR5 1 9 2 Evans SR2 1 10 GA Fowler and 1 11 M1 Gosling The corrections were referenced in a pull request and several commits ensuring clarity and accuracy in the documentation The updates were backported to subsequent service releases including 1 10 1 1 9 3 and 1 8 6 improving consistency across versions These changes contributed to better documentation practices for developers using the library,0,0,0,1,1,0,0
In upgrading a Spring app from version 3 2 to 4 1 Angus Mezick reported issues with pagination documentation in Spring Data Commons Key concerns included missing references to Spring Data Commons on the project page confusion over pagination parameters changing from page page to page and the lack of documentation indicating that pages start from 0 instead of 1 Oliver Drotbohm responded explaining that Spring Data Commons is not intended for direct user reference and its documentation is integrated into individual modules He acknowledged the oversight in documentation due to the transition from Docbook to Asciidoctor and indicated fixes were made to clarify current pagination practices and legacy support,0,0,0,1,1,0,0
Oliver Drotbohm identified a typo in the Spring Data Commons reference documentation affecting versions 1 9 2 Evans SR2 and 1 10 GA Fowler The issue is documented under DATACMNS 674 https jira spring io browse DATACMNS 674 and related to a pull request and several commits on GitHub including commit 1d2ad3f https github com spring projects spring data commons commit 1d2ad3f2b4a6f108ff58a14a24420e3e7c1a4bc4 and others The typo was corrected and backported to versions 1 10 1 Fowler SR1 and 1 9 3 Evans SR3,0,0,0,1,1,0,0
Oliver Drotbohm opened a Jira issue DATACMNS 645 regarding a typo in the Spring Data Commons reference documentation This issue is linked to a pull request and two specific commits on GitHub which address the typo correction The changes have been backported to version 1 9 3 Evans SR3 of the software,0,0,0,1,1,0,0
The issue DATACMNS 682 was opened by Alexander Fedulov due to an abrupt ending in the MongoDB Data documentation s section on Query methods Specifically the section stops at point 3 with the incomplete phrase To customize the package to scan This affects versions 1 9 2 Evans SR2 and 1 10 GA Fowler and is referenced in a pull request on GitHub Oliver Drotbohm commented that the documentation was polished and merged Thomas Darimont noted that the issue originates from the Spring Data Commons documentation suggesting a revision and moving the issue to SD Commons The problem was backported to versions 1 10 1 Fowler SR1 and 1 9 3 Evans SR3,0,0,0,1,1,0,0
The issue DATACMNS 577 highlights the need for improved Javadoc documentation in the QueryDslPredicateExecutor interface of Spring Data Commons Specifically it addresses ambiguities in methods like findOne and findAll For findOne there s uncertainty about its behavior when multiple results are found or none at all whether it returns null or throws an exception Similarly findAll s potential failure modes and return values are unclear This lack of clarity forces client code to perform unnecessary null and exception checks The task also involves adding missing parameter descriptions to prevent confusion The changes aim to enhance usability and reliability across similar repository interfaces These improvements were backported to versions 1 9 1 and 1 8 5,0,0,0,1,1,0,0
The issue DATACMNS 569 involves handling property references with underscores in derived query methods in Spring Data A user encountered a compilation error when using a method with double underscores in a LogRepository interface The error arises because underscores are used to define property boundaries leading to ambiguities The suggested solution is to adhere to Java s camel case convention for property names instead of using underscores Documentation has been updated to reflect this guidance The proposed code change to accommodate underscores was deemed problematic as it would disrupt existing code and only work in non nested scenarios For mapping to existing fields in databases like MongoDB using annotations such as Field is recommended to customize field names,0,0,0,1,1,0,0
The improvement of the Asciidoctor build setup as discussed in DATACMNS 567 https jira spring io browse DATACMNS 567 involves enhancements referenced in several commits These changes aim to streamline the documentation process within the Spring Data Commons project The modifications include updates to the build configuration to optimize the generation of documentation By refining the Asciidoctor setup the project ensures more efficient handling of documentation aiding developers in maintaining clarity and consistency across the documentation outputs These improvements reflect a commitment to enhancing developer experience and project maintainability,0,0,0,1,1,0,0
The issue DATACMNS 552 opened by Oliver Drotbohm focuses on enhancing documentation related to naming conventions for custom repository implementations in Spring Data Commons The goal is to provide clearer guidelines to improve developer understanding and consistency This effort was prompted by community discussions such as those on Stack Overflow and is reflected in specific commits to the project The improvements have been backported to version 1 8 4 ensuring that past releases benefit from the updated documentation,0,0,0,1,1,0,0
The move to Asciidoctor for reference documentation as outlined in issue DATACMNS 551 involves transitioning from existing formats to leverage Asciidoctor s capabilities for enhanced documentation management This change aims to improve the clarity maintainability and extensibility of documentation within the project The decision is linked to addressing dependencies like DATAJPA 579 which involves adapting to new multi store configuration detection The transition is expected to streamline the documentation process and provide a more robust framework for future updates Oliver Drotbohm highlighted these objectives to ensure that documentation remains consistent and comprehensive across related projects,0,0,0,1,1,0,0
In the Spring Data Commons project there was an issue opened by Oliver Drotbohm to enhance the documentation for repository query methods by including the Slice return type The Slice type allows for more efficient data retrieval in certain scenarios as it fetches data in chunks without requiring the total count of elements unlike Page This can improve performance especially in large datasets The issue affected versions 1 8 1 Dijkstra SR1 and 1 9 M1 Evans It was related to adding support for finding data using predicates and pageable objects that return a Slice A comment by Andrei Ivanov highlighted that the existing documentation lacked references to Slice emphasizing the need for this update,0,0,0,1,1,0,0
The JavaDoc for the constructor in org springframework data repository config RepositoryConfigurationSourceSupport needs updating The current description incorrectly states that it defaults to a StandardEnvironment if the environment parameter is null which is not the case This issue affects version 1 8 GA Dijkstra and has been addressed in a pull request The correction was backported to versions 1 9 1 Evans SR1 and 1 8 5 Dijkstra SR5 The relevance of this change is tied to DATACMNS 492 Although RepositoryConfigurationSourceSupport isn t a user facing API it s important for the internal consistency and documentation accuracy,0,0,0,1,1,0,0
The feature request DATACMNS 505 opened by Oliver Drotbohm highlights the need for documentation on how to escape underscores in property expressions within Spring Data This issue arose from a common confusion in handling property names that include underscores as evidenced by discussions on platforms like Stack Overflow The problem was significant enough to be addressed in a backport to version 1 7 3 Codd SR3 of the Spring Data Commons library Proper documentation would help developers understand and correctly use property expressions avoiding errors related to unresolved properties due to unescaped underscores,0,0,0,1,1,0,0
The issue DATACMNS 448 opened by Christoph Strobl addresses the need for supporting the remove and delete keywords in method signatures to derive delete queries in Spring Data This enhancement aims to enable the creation of store specific delete operations using these keywords similar to the existing support for findBy methods The issue is linked to related tasks such as DATAMONGO 566 and DATAJPA 460 which focus on providing removeBy and deleteBy methods for repository interfaces in MongoDB and JPA respectively A pull request has been referenced to implement these changes indicating ongoing efforts to improve query creation capabilities in Spring Data The proposal has garnered community interest as evidenced by votes and watchers on the issue,0,0,0,1,1,0,0
README md Project Description This project focuses on enhancing the Spring Data Commons library by adding a README file to improve documentation and usability The README provides an overview of the library which serves as a central utility for managing data access and persistence across different Spring Data modules It includes essential information about installation configuration and usage making it easier for developers to integrate the library into their projects The update was initiated by Thomas Darimont addressing DATACMNS 361 https jira spring io browse DATACMNS 361 The changes were incorporated through a pull request ensuring that the documentation is comprehensive and accessible This effort contributes to better project maintenance and user support by clarifying the functionality and benefits of the library,0,0,0,1,1,0,0
A typo was identified in the Javadoc of CrudRepository findOne ID in the Spring Data Commons project The word Retrieves was misspelled as Retrives The correction involves updating the documentation to read Retrieves an entity by its id This change ensures clarity and accuracy in the code comments which is crucial for developers referencing the API documentation No additional details were provided in the issue report,0,0,0,1,1,0,0
Oliver Drotbohm opened DATACMNS 287 to polish the JavaDoc for version 1 5 Final of Spring Data Commons This task involves refining the documentation to improve clarity and usability for developers The issue references specific commits on GitHub that address these enhancements The goal is to ensure that the JavaDoc provides comprehensive and precise information thereby facilitating better understanding and implementation of the API This improvement is essential for maintaining high standards of documentation quality within the project,0,0,0,1,1,0,0
In the issue DATACMNS 246 https jira spring io browse DATACMNS 246 redirect false Andrew D Ball reported that JavaDoc misleadingly suggests result pages are 0 based when they are actually 1 based The confusion stems from the fact that Page implementations are indeed zero based as seen in PageRequest but the PageableArgumentResolver uses a 1 based index for user friendly web interactions Oliver Drotbohm confirmed this distinction and noted that the issue was fixed in a specific commit This clarification ensures accurate documentation for developers using Spring Data Commons,0,0,0,1,1,0,0
In the issue DATACMNS 254 Alex Parkinson raises a concern about the Auditable interface in Spring s data commons The interface s JavaDoc suggests that the identifier type for auditing must match the Persistable type it applies to Parkinson argues that this constraint should allow different identifier types for Auditable and Persistable Although this issue doesn t currently affect any dependent code it s highlighted as an incorrect constraint Oliver Drotbohm acknowledges the concern explaining that while you can have scenarios where different identifier types are needed the JavaDoc will be updated for clarity The changes have been referenced in specific commits and backported to version 1 4 1,0,0,0,1,1,0,0
The special parameter handling section in the repository reference documentation for Pageable and Sort lacks clarity on the packages of these types This omission can cause confusion especially if a store implementation like the MongoDB module also provides a Sort type It s important to specify packages to avoid such ambiguities ensuring developers can distinguish between different Sort implementations This clarification is crucial for maintaining clear and unambiguous documentation enabling developers to utilize these features correctly without conflicts,0,0,0,1,1,0,0
The Javadoc for AbstractRepositoryPopulatorFactoryBean contains incorrect information as it has been duplicated from JacksonRepositoryPopulatorFactoryBean This issue tracked under DATACMNS 222 https jira spring io browse DATACMNS 222 was reported by Neale Upstone It affects version 1 4 RC1 The problem highlights a documentation error that could lead to confusion for developers referencing this class An attachment mylyn context zip is included with the report for further context,0,0,0,1,1,0,0
In the Spring Data Commons project an issue was identified regarding query method names lacking the By keyword If you use prefixes like get read or find without By they are not stripped and are instead processed as part of the JPQL query This can lead to an IllegalArgumentException as the framework expects a property that matches the full method name The documentation was updated to clarify that if By is omitted the method name is treated as if it includes findBy Additionally improvements were made to the documentation covering the handling of Distinct IgnoreCase and OrderBy clauses to better explain query method parsing,0,0,0,1,1,0,0
The issue DATACMNS 210 https jira spring io browse DATACMNS 210 redirect false opened by David Turanski highlights that the configuration example in the repositories chapter of the documentation needs updating The current XML configuration for defining repositories is no longer valid The example includes elements such as repositories with attributes like base package and repository impl postfix which might not align with the latest standards or practices This affects version 1 4 M1 and is referenced in a specific commit to the Spring Data Commons project indicating a need for correction to ensure accuracy and relevance in the documentation,0,0,0,1,1,0,0
The issue DATACMNS 159 addresses the outdated information in the Spring documentation regarding the Custom repository factory bean The method names and class extensions in the provided example do not align with current standards The user s custom implementation involves extending JpaRepositoryFactoryBean with a corrected method for creating repository factories The key differences highlighted include the method createRepositoryFactory instead of getRepositoryFactory and the use of getRepositoryBaseClass RepositoryMetadata instead of getRepositoryClass A pull request has been submitted to update the documentation accordingly,0,0,0,1,1,0,0
The issue DATACMNS 138 https jira spring io browse DATACMNS 138 highlights the need to document the lazy initialization behavior of AuditorAware in both the class s Javadoc and the reference documentation This clarification is essential because without it developers may face confusion when their Component annotated AuditorAware implementations are not instantiated as expected Initially implementations were marked for lazy initialization causing issues for users However as per Oliver Drotbohm s https jira spring io secure ViewProfile jspa name olivergierke comment changes have been made to the AuditingEntityListener bootstrap process eliminating the need for explicit lazy initialization configuration for AuditorAware implementations This update should simplify the setup and reduce unnecessary troubleshooting efforts for developers,0,0,0,1,1,0,0
The document discusses the need for documentation on three classes used for Spring conversion and MVC integration DomainClassConverter DomainClassPropertyEditor and PageableArgumentResolver These components are part of the Spring Data Commons project and are crucial for handling domain specific conversions and pagination in web applications DomainClassConverter facilitates the conversion of request parameters to domain objects enhancing the seamless integration of domain logic into web layers DomainClassPropertyEditor provides a means to bind form inputs directly to domain class properties PageableArgumentResolver simplifies the handling of pagination requests by resolving Pageable instances from request parameters The issue tracked under DATACMNS 95 highlights the importance of documenting these utilities to improve developer understanding and usability This issue affects versions 1 2 M1 and 1 2 M2 and has been referenced in a specific commit on GitHub,0,0,0,1,1,0,0
In the upcoming 5 0 release a fix is planned to ensure that OptimisticLockingFailure exceptions are correctly thrown instead of DataIntegrityViolationException when a CAS Compare and Swap mismatch occurs This change aims to improve the accuracy of exception handling in the system The documentation will be updated accordingly and this modification will be highlighted in the 5 0 migration guide to assist developers in adapting their applications to the new behavior This enhancement ensures better adherence to expected exception protocols thereby improving the robustness and clarity of error management in applications using this framework,0,0,1,1,0,0,0
The issue DATACOUCH 303 was opened by David Saadeh to address a discrepancy in the Spring Data Couchbase documentation Specifically it noted that the count method in the CrudRepository interface was listed as returning a Long object instead of the primitive type long This distinction is important as using the object type can have implications for performance and behavior due to unboxing The documentation has since been updated to reflect the correct return type changing it from Long to long ensuring alignment with expected usage and standards,0,0,1,1,0,0,0
Marc Ende reported an issue with incorrect documentation links for Spring Data Couchbase He suggested updating the reference and API links to point to the specific version 1 0 0 RELEASE or alternatively to use links that point to the current version The correct links should be Reference Spring Data Couchbase Reference http docs spring io spring data couchbase docs 1 0 0 RELEASE reference html API Spring Data Couchbase API http docs spring io spring data couchbase docs 1 0 0 RELEASE api Alternatively links to the current version can be used Reference Current Reference http docs spring io spring data couchbase docs current reference html API Current API http docs spring io spring data couchbase docs current api Simon Basl confirmed that the README links have been updated accordingly,0,0,1,1,0,0,0
The issue DATACOUCH 299 opened by Oliver Drotbohm involves reverting upgrades to the 2 4 driver for Spring Data Couchbase It affects versions 2 2 2 Ingalls SR2 and 2 1 9 Hopper SR9 and has been backported to 2 1 10 Hopper SR10 The goal is to address compatibility and stability concerns introduced by the newer driver version,0,0,1,0,0,0,1
The Spring Data Couchbase 2 x series is incompatible with Couchbase SDK versions beyond 2 2 3 due to missing methods in the CouchbaseEnvironmentNoShutdownProxy class as it does not implement new methods required by the updated CoreEnvironment interface in SDK 2 2 4 and later To address this new delegate methods were added resolving the compatibility issue although the CouchbaseEnvironmentNoShutdownProxy class itself lacks direct testing The changes were backported to version 2 1 2 providing compatibility up to SDK 2 2 6 which introduced further methods beyond those in versions 2 2 4 and 2 2 5 Jonathan Edwards submitted a pull request to update the class accordingly,0,0,1,0,0,0,1
The build for Spring Data Couchbase failed due to the absence of the Bundlor Maven plugin specifically the com springsource bundlor maven 1 0 0 RELEASE artifact which was missing from the Maven repository This resulted in a build failure as the necessary dependency information could not be retrieved Jeroen Reijn reported the issue with details of the failed build process Michael Nitschinger commented that a proposed pull request PR 4 on GitHub appears promising but requires squashing before it can be merged The fix is planned for release in version 1 0 M1,0,0,1,0,0,0,1
The issue DATACOUCH 570 opened by Guillaume Durandiere highlights missing documentation for multibucket configuration in Spring Data Couchbase 4 x Users are attempting to connect to multiple clusters and buckets but the current documentation lacks guidance Michael Reiche responds with a solution involving configuration methods in a Config class to map entities to different buckets using CouchbaseTemplate and ReactiveCouchbaseTemplate It s crucial to avoid using method names that conflict with existing beans to ensure proper functionality Users report challenges with custom converters and connecting multiple clusters suggesting the need for further documentation and examples Michael Reiche provides additional advice and encourages community contributions to improve the documentation,0,0,0,1,1,0,0
Johannes Jasper opened a ticket DATACOUCH 446 to contribute to spring data couchbase but faced difficulties running integration tests located in src integration java He inquired about available documentation and communication channels David Nault responded acknowledging the need for better documentation and suggested using the Java SDK section of the Couchbase Forum for discussions He later updated that the master branch now supports running integration tests with the Maven command mvn verify requiring a local Docker installation It s important to stop any local Couchbase Server before running the tests to avoid failures Johannes thanked David and posted the query on the Couchbase Forum as recommended,0,0,0,1,1,0,0
The issue DATACOUCH 421 opened by Mark Paluch focuses on simplifying the setup for reference documentation in the Spring Data Couchbase project It suggests removing common properties from the index adoc file as these are already defined in the Spring Data Build thereby reducing redundancy This task is linked to DATACMNS 1442 which also aims at streamlining documentation processes The changes are reflected in a specific commit to the project s GitHub repository,0,0,0,1,1,0,0
In the issue DATACOUCH 204 Oliver Drotbohm highlights that several package JavaDocs are missing in the 2 0 release of Spring Data Couchbase Ensuring that package info java files exist for all packages is crucial for generating comprehensive JavaDocs This enhancement would improve documentation quality facilitating better understanding and usage of the library by developers The issue affects the 2 0 GA version and addressing it is necessary for maintaining consistent and complete documentation,0,0,0,1,1,0,0
In the issue DATACOUCH 190 https jira spring io browse DATACOUCH 190 Simon Basl discussed the need for SpEL Spring Expression Language support in Spring Data Couchbase documentation This enhancement affects version 2 0 RC1 The referenced commits show progress towards implementing this feature enabling developers to use SpEL expressions within queries This would facilitate more dynamic and flexible data retrieval in Couchbase applications The documentation update aims to guide developers in leveraging SpEL effectively enhancing the overall usability and capability of the framework,0,0,0,1,1,0,0
To extend a Couchbase repository or change its base class ensure the new base class is a subclass of SimpleCouchbaseRepository or N1qlCouchbaseRepository This allows for adding custom methods or overloading CRUD methods for each repository Enhancing documentation with integration test examples is recommended for clarity The changes affect versions 2 0 M1 and 2 0 RC1 as noted in the issue report DATACOUCH 189 https jira spring io browse DATACOUCH 189 by Simon Basl,0,0,0,1,1,0,0
The issue DATACOUCH 185 addresses the need for base repository methods such as SimpleCouchbaseRepository s findAll method to utilize the configured default consistency setting in the Spring Data Couchbase project Currently only query derivation methods use this configuration The change aims to ensure consistency across all repository methods and requires proper documentation It affects versions 2 0 M1 and 2 0 RC1 Relevant updates are referenced in a specific commit on GitHub,0,0,0,1,1,0,0
The issue raised in DATACOUCH 178 https jira spring io browse DATACOUCH 178 highlights user dissatisfaction with the Spring Data Couchbase 2 0 M1 documentation The primary concern is that the documentation heavily focuses on general Spring Data repository features largely copied from Spring Data Commons rather than providing specific practical examples for Couchbase particularly with N1QL queries Users expect documentation to be concise and relevant with a focus on practical use cases rather than theoretical explanations Simon Basl acknowledged the feedback explaining that while the documentation structure follows a common approach for all Spring Data modules efforts are being made to improve the number of practical examples Below are some example N1QL queries in Spring Data Couchbase java Query n1ql selectEntity WHERE n1ql filter AND name 1 List User findByName String name java Query SELECT FROM n1ql bucket WHERE age 1 List User findByAgeGreaterThan int age These snippets demonstrate how to perform specific queries using Couchbase s N1QL within a Spring Data repository offering practical guidance for developers,0,0,0,1,1,0,0
Oliver Drotbohm opened issue DATACOUCH 103 to enhance the Polish reference documentation for Spring Data Couchbase The goal is to improve the clarity and comprehensiveness of the documentation facilitating better understanding and use by developers This initiative is referenced in a specific commit on the project s GitHub repository indicating active development and ongoing improvements The documentation update aims to align with best practices and ensure users have access to up to date and accurate information thereby improving the overall user experience with the framework,0,0,0,1,1,0,0
Spring Data Couchbase has updated its default consistency management due to changes in SDK 3 x removing the getDefaultConsistency method from AbstractCouchbaseConfiguration This has impacted tests that rely on reading their own writes Previously developers could override this method but now they must use annotations like ScanConsistency with QueryScanConsistency REQUEST PLUS to ensure queries wait for indexing completion For ongoing projects using the snapshot version 4 2 6 SNAPSHOT which restores this method is advised until the official release Additionally developers are encouraged to use MutationTokens for enhanced durability and indexing consistency although this feature isn t fully exposed in Spring Data The integration of these tokens might become easier with future releases To handle large data sets using key value operations could improve performance significantly compared to N1QL queries with REQUEST PLUS consistency,0,1,0,0,1,0,0
The issue in DATAES 954 highlights a misleading section in the Spring Data Elasticsearch documentation Section 4 8 1 suggests that Querydsl support can be extended using QuerydslPredicateExecutor However attempting to implement this in ElasticsearchRepositoryFactory results in an exception indicating that Querydsl support is not yet implemented This confusion arises because the documentation in Chapter 4 is derived from the Spring Data Commons module which is shared across various Spring Data modules While some modules do offer Querydsl integration Spring Data Elasticsearch does not The documentation inaccurately implies universal support leading to misunderstanding among users,0,0,1,1,0,0,0
The issue DATAES 835 https jira spring io browse DATAES 835 redirect false opened by sothawo https jira spring io secure ViewProfile jspa name sothawo addresses a problem with the code sample in the documentation for the scroll API in the Spring Data Elasticsearch project This issue affects version 4 0 GA Neumann and was referenced in pull request 462 https github com spring projects spring data elasticsearch pull 462 The fix has been backported to version 4 0 1 Neumann SR1,0,0,1,1,0,0,0
The issue DATAES 758 was opened by sothawo to address improvements needed in the documentation for the Query annotation in Spring Data Elasticsearch This task references a pull request aimed at enhancing clarity and usability The improvements have been backported to version 3 2 6 Moore SR6 to ensure consistent documentation across versions For more details the pull request can be viewed here https github com spring projects spring data elasticsearch pull 403,0,0,1,1,0,0,0
The issue DATAES 670 highlights a problem with the documentation for Spring Data Elasticsearch versions 3 1 and 3 2 stating that they can work with Elasticsearch 7 clusters using the Rest Client This is incorrect because Elasticsearch 7 changes the structure of returned search results making it incompatible with the client libraries used in these versions Consequently these libraries cannot parse the responses correctly and the Elasticsearch 7 client libraries are not compatible with Spring Data Elasticsearch 3 1 3 2 The problem affects version 3 2 GA Moore and has been addressed in related pull requests and commits The fix has been backported to version 3 2 1 Moore SR1,0,0,1,1,0,0,0
In the context of machine learning the issue revolves around an incompatibility between the Elasticsearch ES versions used in a project The upgrade to Elasticsearch 6 7 2 introduced the include type name parameter which is not recognized by ES 6 5 4 This change caused problems with the create index operation when using version 3 2 M4 as it was initially expected to support ES 6 5 X The project s README suggested compatibility with ES 6 5 X leading to confusion As AWS Elasticsearch only supported up to ES 6 5 X at that time users would need to adjust their implementations or forgo using the updated module Later it was noted that version 3 2 0 RC2 used Elasticsearch 6 8 1 which was subsequently supported by AWS,0,0,1,1,0,0,0
The issue DATAES 546 was opened by Dimitri on Spring s JIRA concerning a code snippet using the Query annotation in Spring Data Elasticsearch The snippet in question is java Query bool must field name 0 Dimitri noted that the double quotes within the query should likely be escaped to ensure proper compilation This issue affects version 3 1 5 Lovelace SR5 of the framework It was referenced in a pull request and a specific commit in the Spring Data Elasticsearch GitHub repository,0,0,1,1,0,0,0
The issue DATAES 445 highlights an outdated example in the Spring Data Elasticsearch documentation for using Scan and Scroll with large result sets The existing code uses deprecated API functions and needs updating The suggested changes involve modifying the SearchQuery and ScrolledPage usage with current API methods The problem affects version 3 0 6 and has been referenced in a pull request and several commits to address the API updates The corrections are also backported to versions 3 1 3 and 3 0 12 A pull request was submitted to resolve the issue maintaining the original example s structure with updated functions,0,0,1,1,0,0,0
The README file for the Spring Data Elasticsearch project contained a broken Jira link The incorrect URL was https jira springframework org browse DATAES which should be updated to https jira spring io browse DATAES This issue was identified in DATAES 334 by leetcat The correction was referenced in a pull request and specific commits on GitHub Additionally Hubert Pan mentioned updating the Jira and forum links in another pull request directing users to Stack Overflow for forum discussions The changes ensure that all links in the documentation are accurate and current,0,0,1,1,0,0,0
Florian Hopf opened issue DATAES 309 noting minor documentation issues in the Spring Data Elasticsearch project specifically outdated requirements and client terminology This issue affects version 2 0 4 Hopper SR4 and has been linked to DATAES 497 which involves revising the reference documentation A pull request was submitted to address these concerns and subsequent comments indicate that the changes have been included in a later update linked to issue DATAES 497 The pull requests involved are available on GitHub for further review and integration,0,0,1,1,0,0,0
In the Spring Data Elasticsearch reference an error is highlighted in section 4 2 2 regarding the use of a JSON query DSL example The example incorrectly uses a field query type which results in a QueryParsingException because Elasticsearch does not support a field query type Instead it is recommended to use the term query type to avoid confusion and ensure functionality This issue identified in DATAES 278 https jira spring io browse DATAES 278 suggests updating the example to reflect the correct usage The reference URL for further details is provided and the issue has been addressed in a pull request and related commits,0,0,1,1,0,0,0
The upgrade to Elasticsearch 2 4 is necessary for compatibility with Jackson 2 8 Artur Konczak noted the challenge of maintaining compatibility with new Elasticsearch versions which often require updated plugins and embedded server configurations To upgrade one must adjust the pom variable and copy the new Groovy plugin version to the specified directory Artur updated the DATAES 289 example branch and plans to add necessary files and enable tests Oliver Drotbohm expressed confusion about needing extra files post version 1 4 and mentioned disabling a Groovy related test due to registration issues with the embedded server He prioritized general upgrade compatibility over resolving this test issue Oliver encountered exceptions related to the Groovy plugin version during the dependency upgrade and sought further clarification from Artur,0,0,1,0,0,0,1
The issue discusses upgrading to FasterXML Jackson for the Spring Data Elasticsearch SDE library Petar Tahchiev opened the issue noting that Elasticsearch has already moved to FasterXML and it s causing compatibility issues with his project which includes 253 jars The presence of older Jackson1 jars from SDE leads to errors like Unrecognized field not marked as ignorable Petar provided a simple patch to update SDE to Jackson2 Artur Konczak acknowledged the contribution and confirmed the implementation of the patch,0,0,1,0,0,0,1
Machine learning is a field of artificial intelligence focused on developing algorithms that enable computers to learn from and make predictions based on data It involves training models using large datasets and refining them to improve accuracy over time Common techniques include supervised learning where models are trained on labeled data and unsupervised learning which involves finding patterns in unlabeled data Machine learning is applied in various domains such as natural language processing image recognition and recommendation systems The field continually evolves integrating new methodologies and technologies to enhance performance and expand its application scope,0,0,0,1,1,0,0
In the context of machine learning the task involves correcting typographical errors in the Javadocs as specified in the issue DATAES 836 This issue opened by the user sothawo pertains to version 4 0 GA Neumann of the Spring Data Elasticsearch project The corrections are referenced in a pull request available on GitHub which indicates collaborative efforts to maintain the accuracy and clarity of documentation crucial for developers Ensuring precise documentation supports better understanding and implementation of machine learning models by providing clear guidelines and reducing potential errors in code interpretation,0,0,0,1,1,0,0
The issue DATAES 610 was opened by sothawo to address the need for clearer documentation on how to include milestone and snapshot builds in the project s readme file This enhancement targets version 3 2 RC1 Moore of the project The goal is to provide developers with straightforward guidance on integrating these specific builds which often include the latest features and fixes that are not yet available in stable releases By updating the readme it ensures that contributors and users can easily access and utilize these developmental versions facilitating more robust testing and feedback,0,0,0,1,1,0,0
Summary for Machine Learning In the task described by DATAES 598 an enhancement is proposed to add Elasticsearch authentication code to the README file The issue was opened by Xinyong Qu and involves configuring a ReactiveElasticsearchClient with basic authentication The configuration uses HttpHeaders to set a BASIC AUTH header with a username and password The ClientConfiguration connects to Elasticsearch instances running on specified local ports and applies the default headers This configuration is essential for secure connections to Elasticsearch as demonstrated in the provided code snippet The change affects version 3 2 RC1 Moore and is referenced in a pull request on the Spring Data Elasticsearch GitHub repository Example Code java Configuration public class ConfigWithAuthentication Bean public ReactiveElasticsearchClient reactiveElasticsearchClient HttpHeaders defaultHeaders new HttpHeaders defaultHeaders setBasicAuth USER NAME USER PASS ClientConfiguration clientConfiguration ClientConfiguration builder connectedTo localhost 9200 localhost 9291 withDefaultHeaders defaultHeaders build return ReactiveRestClients create clientConfiguration For further details visit the Spring Data Elasticsearch GitHub repository https github com spring projects spring data elasticsearch,0,0,0,1,1,0,0
The issue DATAES 597 https jira spring io browse DATAES 597 redirect false opened by sothawo addresses minor code formatting problems in the README file of the Spring Data Elasticsearch project This affects version 3 2 RC1 Moore and is referenced in pull request 111 https github com spring projects spring data elasticsearch pull 111 The goal is to improve the readability and presentation of code snippets in the documentation,0,0,0,1,1,0,0
In the task described by DATAES 520 https jira spring io browse DATAES 520 redirect false Christoph Strobl requested the addition of a metadata based mapping converter This feature was intended to enhance the handling of mappings in the system Although no further details were provided in the task description a comment by sothawo https jira spring io secure ViewProfile jspa name sothawo mentioned that this functionality was implemented in version 3 2 x This suggests that the feature has been completed and integrated into the system as of that version,0,0,0,1,1,0,0
The issue DATAES 519 was opened by Christoph Strobl to introduce support for reactive repositories in Spring Data Elasticsearch This enhancement aims to integrate reactive programming paradigms into the Elasticsearch module allowing non blocking data operations which are beneficial for handling asynchronous data streams efficiently The feature is referenced in multiple commits on GitHub indicating a series of developments and refinements to implement this functionality By adopting a reactive approach the system can improve scalability and responsiveness catering to modern application demands where real time data processing is crucial This aligns with the broader trend of incorporating reactive programming within the Spring ecosystem to enhance performance and resource utilization,0,0,0,1,1,0,0
Mark Paluch opened DATAES 514 to simplify the reference documentation setup for Spring Data Elasticsearch The task involves removing common properties from index adoc since these are now defined in Spring Data Build This change aims to streamline the documentation process and reduce redundancy The issue is linked to DATACMNS 1442 and has been referenced in specific commits to the project repository The updates have been backported to version 3 2 M1 Moore,0,0,0,1,1,0,0
The issue DATAES 303 https jira spring io browse DATAES 303 redirect false was opened by Florian Hopf to address an outdated version number in the README for Spring Data Elasticsearch The README incorrectly lists version 2 0 0 as the current version while the affected version is 2 0 4 Hopper SR4 This issue is referenced in a pull request https github com spring projects spring data elasticsearch pull 157 and a commit https github com spring projects spring data elasticsearch commit ceffbeebd1bc37388c2412edd123a69cd7256584 Oliver Drotbohm noted that no specific fix version is assigned since the change only updates the display on GitHub,0,0,0,1,1,0,0
Oliver Drotbohm opened DATAES 120 https jira spring io browse DATAES 120 to address the need for polishing the reference documentation for Spring Data Elasticsearch This issue highlights the importance of improving clarity and usability in the documentation to assist developers in effectively utilizing the framework The effort involves refining content to ensure accuracy and comprehensibility potentially impacting how users engage with and implement features within their projects The referenced commit indicates progress toward these documentation enhancements aligning with the broader goal of improving developer experience and project accessibility,0,0,0,1,1,0,0
The task involves upgrading the main next branch to use Apache Geode 1 15 snapshots enabling it to build Spring Data for Apache Geode SDG 2 6 Q and beyond This requires adapting SDG to any API changes introduced in Apache Geode 1 15 The successful completion of this upgrade depends on resolving specific JIRA tickets GEODE 9629 and GEODE 9630 The task will be considered complete once the changes from these tickets are merged into the Apache Geode 1 15 development branch and the updated snapshots are available for SDG integration,0,0,0,0,1,0,1
Apache Geode 1 13 4 provides significant updates for those using Spring Data for Apache Geode SDG versions 2 5 x Pascal and 2 6 x Q This upgrade ensures compatibility and leverages the latest features and fixes in Geode By upgrading users can improve the performance and stability of their distributed data management systems It allows for enhanced integration with Spring projects offering more robust caching and data processing capabilities This version also addresses important security updates making it a critical upgrade for maintaining secure and efficient systems,0,0,0,0,1,0,1
Apache Geode 1 12 4 offers significant improvements and optimizations for performance and stability This upgrade includes bug fixes and enhanced security features ensuring a more robust system It optimizes memory usage and enhances data consistency across distributed systems The update also includes improved APIs for better integration with machine learning frameworks facilitating seamless data processing and real time analytics Users can expect enhanced scalability and support for modern cloud environments making it a compelling choice for enterprises looking to leverage in memory data grids effectively,0,0,0,0,1,0,1
Upgrading to Apache Geode 1 12 3 involves updating Spring Data for Apache Geode to the Neumann release 2 3 This version enhances data management capabilities and aligns with the features of Apache Geode 1 12 3 Key improvements include better support for distributed caching and in memory data grids which are crucial for machine learning applications that require fast data retrieval and processing The upgrade ensures compatibility with the latest security patches and performance optimizations providing a more robust and efficient environment for developing scalable machine learning solutions Additionally it supports new APIs and integration features facilitating seamless data flow and management in complex systems,0,0,0,0,1,0,1
VMware Tanzu GemFire 9 10 8 offers an upgrade that enhances Spring Data compatibility specifically updating from the Neumann 2 3 version This upgrade improves the integration and performance for applications using VMware Tanzu GemFire ensuring better data management and processing capabilities It delivers enhanced support for modern data architectures aiming to optimize resource use and scalability The update addresses previous issues providing a more robust and efficient environment for deploying and managing distributed data systems This makes it a valuable upgrade for organizations relying on GemFire for high performance data applications,0,0,0,0,1,0,1
Upgrading to Apache Geode 1 13 3 involves updates to the Spring Data for Apache Geode SDG framework The versions affected include 2020 0 x Ockham with 2 4 x 2021 0 x Pascal with 2 5 x and 2021 1 x Q with 2 6 x These upgrades ensure compatibility and leverage improvements in performance security and features provided by Apache Geode 1 13 3 enhancing the overall efficiency and capabilities of applications using SDG,0,0,0,0,1,0,1
The task involves upgrading Spring Data for Apache Geode versions Ockham 2 4 x and Pascal 2 5 x to Apache Geode 1 13 2 This upgrade is crucial for ensuring compatibility improving performance and accessing the latest features and security patches offered by Apache Geode By updating these versions developers can leverage enhanced data management capabilities and maintain alignment with the latest standards in distributed data grid technology This process typically involves updating dependencies and testing the system to ensure that the new version integrates smoothly without disrupting existing functionality,0,0,0,0,1,0,1
The issue DATAJPA 1803 https jira spring io browse DATAJPA 1803 was opened by Malte Mauelshagen to correct the JavaDoc for EnableJpaAuditing dateTimeProviderRef The documentation incorrectly referenced org joda time DateTime instead of the correct java time temporal TemporalAccessor This affects the configuration of a DateTimeProvider bean for setting creation and modification dates The DateTimeProvider interface s method getNow returns the current time as an Optional TemporalAccessor A pull request to address this issue is available here https github com spring projects spring data jpa pull 432 This fix has been backported to versions 2 3 5 Neumann SR5 and 2 2 11 Moore SR11,0,0,1,1,0,0,0
A typo in Section 5 3 5 of the Spring Data JPA documentation was reported where Sorting can be done be either should be corrected to Sorting can be done by either This section discusses sorting methods using PageRequest or Sort directly The issue identified as DATAJPA 1792 affects version 2 3 4 Neumann SR4 and has been backported to versions 2 3 5 Neumann SR5 and 2 2 11 Moore SR11 The correction ensures clarity in the documentation for developers utilizing sorting features in Spring Data JPA,0,0,1,1,0,0,0
The issue DATAJPA 1789 https jira spring io browse DATAJPA 1789 highlights a discrepancy in the Spring Data JPA documentation Table 3 in section 5 3 2 titled Query Creation is supposed to list all supported keywords for JPA queries However section 4 4 2 mentions an additional expression Distinct which isn t included in the table This omission indicates that Distinct can be used to set a distinct flag on queries but it s not documented consistently The issue affects version 2 3 4 and has been backported to versions 2 3 5 and 2 2 11,0,0,1,1,0,0,0
In Spring Data JPA 2 3 3 RELEASE an issue DATAJPA 1772 was raised by Priyank Sinha regarding the expected behavior of count queries when using Pageable According to the documentation using Pageable should trigger a count query to determine the total number of elements and pages However Sinha reported not seeing this query in the logs Jens Schauder commented that if the last page is selected no count query occurs because Spring Data infers the total number of pages from the number of returned rows If fewer rows than the page size are returned it indicates the last page avoiding the need for an additional count query The issue was closed due to a lack of further feedback,0,0,1,1,0,0,0
In Spring Data JPA versions 2 2 x and 2 3 x certain methods have incorrect Nullable annotations The composed method in SpecificationComposition is marked Nullable but should be NonNull as it always returns a specification Consequently the and and or methods should also be annotated NonNull Similarly the where method is incorrectly labeled Nullable as it consistently returns a specification thus requiring NonNull annotation The not method isn t annotated but should be marked NonNull since it always returns a specification This issue affects versions 2 2 8 and 2 3 1 and is linked to a duplicate issue DATAJPA 1622 regarding the misuse of Nullable annotations,0,0,1,1,0,0,0
The issue DATAJPA 1676 was opened to address typos in the Spring Data JPA project Specifically corrections were needed in several components AbstractJpaQuery from wether to whether StringQuery from tirgger to trigger and JpaMetamodelCacheCleanup from reigstered to registered These changes affected version 2 3 M2 Neumann and were referenced in pull request 412 and several commits Additionally the corrections were backported to earlier versions 2 2 5 Moore SR5 and 2 1 16 Lovelace SR16,0,0,1,1,0,0,0
The issue DATAJPA 1673 was opened by David Fuhr highlighting a problem with a bulk delete query in Spring Data JPA that uses a non existing alias causing it to be invalid This issue affects versions 2 1 15 Lovelace SR15 2 2 4 Moore SR4 and 2 3 M2 Neumann The problem was referenced in a pull request and several commits on GitHub indicating ongoing efforts to resolve it The solution has been backported to versions 2 2 5 Moore SR5 and 2 1 16 Lovelace SR16 ensuring that previous versions also receive the necessary fix,0,0,1,1,0,0,0
The issue DATAJPA 1639 addresses the need to correct the position of underscores in MetaModel classes within the Spring Data JPA documentation This was opened by Jens Schauder and involves improvements to the documentation for clarity and accuracy The changes were discussed and implemented through a pull request on GitHub The updates have been backported to versions 2 2 3 Moore SR3 and 2 1 14 Lovelace SR14 to ensure consistency across different releases of the project,0,0,1,1,0,0,0
The issue DATAJPA 1556 https jira spring io browse DATAJPA 1556 was opened by davidlj95 https jira spring io secure ViewProfile jspa name davidlj95 to address a typo in the Spring Data JPA FAQ document This update is linked to a pull request on GitHub and has been backported to versions 2 1 9 Lovelace SR9 and 1 11 23 Ingalls SR23 ensuring consistency across these releases For more details the reference URL provides access to the document in question The correction reflects ongoing efforts to maintain documentation quality in the Spring Data JPA project,0,0,1,1,0,0,0
The issue DATAJPA 1485 highlights the ambiguity in the Spring Data JPA documentation regarding the Modifying annotation This annotation is necessary for repository methods performing data manipulation operations like INSERT UPDATE or DELETE as it converts the query into an update rather than a select While examples show Modifying used with Query the documentation lacks clarity on its necessity with derived queries which may not require Modifying for data manipulation This omission could cause confusion among users Oliver Drotbohm comments that the documentation assumes either annotation based or signature based query definitions and suggests this could be clarified for better understanding The issue has been backported to multiple versions for resolution,0,0,1,1,0,0,0
The issue DATAJPA 1323 addresses a problem in the Spring Data JPA documentation related to the construction of the transaction manager The documentation s code example fails to correctly convert LocalContainerEntityManagerFactoryBean to an EntityManagerFactory as discussed on a Stack Overflow thread The recommended solution is to modify the bean method for the transaction manager to directly accept an EntityManagerFactory as a parameter This fix has been backported to versions 2 0 7 Kay SR7 and 1 11 12 Ingalls SR12 of Spring Data JPA,0,0,1,1,0,0,0
The JpaRepository getOne JavaDoc is misleading because it inaccurately describes the method s behavior It states that the method returns a reference to an entity and throws an EntityNotFoundException if no entity exists for the given ID However this is incorrect getOne uses EntityManager getReference which assumes the entity exists and returns an uninitialized proxy The exception is thrown only when the entity s state is accessed This has caused confusion as seen in various StackOverflow questions The documentation needs clarification and the incorrect throws tag should be removed to prevent misinterpretation,0,0,1,1,0,0,0
The issue DATAJPA 1086 highlights a problem with the StringQueryParameterBinder constructor in Spring Data JPA which isn t compatible with JDK 8 due to missing parameter names This results in an IllegalArgumentException when named parameters aren t properly set suggesting the use of Param annotations The solution involves using the parameters compiler argument to retain parameter names Oliver Drotbohm suggests configuring this in the Maven build with the maven compiler plugin An improved exception message now hints at the necessity of this configuration Peter Rader provides an example project and requests official documentation for the parameters option emphasizing that this requirement should be included in the exception message,0,0,1,1,0,0,0
In the Spring Data JPA documentation there was an error in a Query example using 0 as the parameter index which should have been 1 This issue was raised by Markus M slinger in the JIRA ticket DATAJPA 862 https jira spring io browse DATAJPA 862 Markus asked about creating pull requests for documentation corrections and was informed that it is possible with the relevant files available in the project s GitHub repository He submitted a pull request to address the issue The correction was acknowledged and merged by Oliver Drotbohm with the fix backported to the Gosling and Fowler maintenance branches Markus confirmed signing the Contributor License Agreement CLA necessary for contributions,0,0,1,1,0,0,0
In the context of Spring Data JPA the reference documentation should include information on using EntityListener for auditing purposes This annotation facilitates the tracking of changes to entities by allowing developers to define callback methods that are triggered during the lifecycle events of an entity The issue DATAJPA 850 highlights the need for this addition to ensure users can effectively implement auditing The changes have been incorporated into the system through a pull request and are backported to versions 1 9 4 Gosling SR4 and 1 8 3 Fowler SR3 to ensure broader availability and support,0,0,1,1,0,0,0
In the Modifying Javadoc of Spring Data JPA there is a typo in the description of the clearAutomatically attribute The word executing is misspelled as excuting This attribute determines whether the persistence context should be cleared after executing a modifying query The default value is false The typo affects versions 1 8 2 Fowler SR2 and 1 9 GA Gosling and has been backported to 1 9 1 Gosling SR1 and 1 8 3 Fowler SR3,0,0,1,1,0,0,0
The issue DATAJPA 743 was opened by Oliver Drotbohm to address a typo in the README of the Spring Data JPA project It is referenced from a pull request aimed at correcting the documentation error The fix has been backported to several versions 1 8 1 Fowler SR1 1 7 3 Evans SR3 and 1 6 6 Dijkstra SR6 This ensures that the corrected documentation is available across multiple supported versions of the project,0,0,1,1,0,0,0
Manish reported issues when trying to add custom behavior to all JPA repositories in a large Spring Data application Following the documentation he encountered two main problems 1 Method Inconsistency The documentation mentions RepositoryMetadata getDomainClass which should be getDomainType This inconsistency might require an update to the documentation to align with method names like getDomainClass in SimpleJpaRepository 2 Startup Failure After correcting the method name the application failed to start due to a PropertyReferenceException He suggested restructuring JpaRepositoryFactory to facilitate easier extension by customizing the getTargetRepository method Etienne Neveu also faced issues noting that the documentation example was incorrect regarding repository setup and method calls Both users suggested improvements to the code and documentation Manish submitted a pull request to address these concerns Oliver Drotbohm mentioned future updates DATACMNS 542 and DATAJPA 710 to simplify the process and rewrite relevant documentation sections,0,0,1,1,0,0,0
The issue DATAJPA 577 was opened by Aleksandar Stoisavljevic to address a missing version number in the PDF documentation for Spring Data JPA The document only displayed version without specifying which version it referenced This affected version 1 6 1 Dijkstra SR1 Oleksandr Mandryk later commented that this issue had been resolved in version 1 7 2 RELEASE as the updated document now correctly includes the version number Oliver Drotbohm confirmed the resolution marking the issue as fixed since version 1 7,0,0,1,1,0,0,0
The issue reported in DATAJPA 406 highlights an inconsistency between the Spring Data JPA reference documentation and the Javadoc regarding the Modifying clearAutomatically default value The reference suggests it defaults to true meaning the entity manager clears automatically after method execution while the Javadoc correctly states it defaults to false This discrepancy could lead to outdated entities remaining in the entity manager by default The suggestion is to align the reference with the Javadoc as it should be a conscious choice to clear the entity manager However changing the default to true is not feasible due to potential impacts on existing users The documentation has been fixed but the default setting remains unchanged to ensure users deliberately opt into clearing the entity manager,0,0,1,1,0,0,0
The DATAJPA 261 issue involves clarifying the JavaDoc for the countQuery attribute in the Query annotation within Spring Data JPA This attribute is used to specify a separate count query when the default derived count query is inefficient or incorrect The enhancement aims to provide clearer documentation to help developers understand when and how to use the countQuery effectively This update helps ensure that developers can optimize their database interactions by providing custom count queries where necessary Oliver Drotbohm opened the issue to address these documentation improvements as referenced in the related commit,0,0,1,1,0,0,0
The 1 2 RC1 documentation for Spring Data JPA contains several errors The JpaSpecificationExecutor section incorrectly uses readAll Specification T spec instead of findAll Specification T spec requiring a find replace fix The query keywords table has a typo ngWith instead of EndingWith and swaps the descriptions for StartingWith and EndingWith Section 1 5 1 on Spring MVC web binding is unclear missing steps like model addAttribute and contains undeclared variables such as pageable Appendix C 1 1 has a shortened class name hindering copy paste for debugging These issues have been merged and addressed in Spring Data Commons documentation Steve Storey contributed fixes but noted the absence of Web MVC documentation in the repository,0,0,1,1,0,0,0
The issue reported in DATAJPA 171 highlights a documentation error in the Spring framework The example for configuring a ConversionServiceFactoryBean incorrectly uses a list to define converters when it should use a set This error can cause a failure when creating the bean throwing an error stating that the FactoryBean returned null The problem affects versions 1 0 3 and 1 1 RC1 and is linked to DATACMNS 133 where configuration with DomainClassConverter is problematic The issue is marked as a duplicate of DATAJPA 167,0,0,1,1,0,0,0
The issue reported in DATAJPA 131 highlights a problem with sorting properties in a database context using reserved keywords like type and name This often leads to SQL syntax errors particularly with MySQL The issue stems from the persistence provider s inability to handle these reserved keywords correctly resulting in invalid SQL queries For example sorting by type can cause SQL exceptions due to its reserved status The problem was demonstrated in a Spring application where sorting resulted in an SQL syntax error as seen in the provided code snippets This suggests a need for better handling of such keywords or improved documentation to prevent these issues,0,0,1,1,0,0,0
In org springframework data jpa domain Specification new methods addAll and anyOf were introduced starting from version 3 0 However the since Javadoc tag was initially missing for these methods This issue has been addressed and backported to versions 3 1 x and 3 0 x A pull request was welcomed and subsequently merged into the main branch thanks to contributions from the community,0,0,0,1,1,0,0
A user reported an issue with an incorrect error message when using projections in Spring Data JPA They created a ProductDetail projection and a ProductRepository with a find method However calling this method resulted in a QueryException related to an unbound named parameter despite no named parameters being present The issue was resolved by changing find to findBy but the error message was misleading Another user explained that this behavior is intentional and documented Spring Data attempts to resolve methods to named queries based on a pattern involving the domain class and method name In this case a named query Product find was causing the issue The documentation clarifies this behavior suggesting the issue can be closed,0,0,0,1,1,0,0
Jens Schauder opened a ticket DATAJPA 1800 to address the use of potentially insensitive language in the documentation of the Spring Data JPA project The issue led to a pull request aimed at updating the language to be more inclusive and sensitive The changes have been successfully backported to versions 2 3 5 Neumann SR5 and 2 2 11 Moore SR11 ensuring that the documentation across these versions adheres to these standards This initiative reflects a broader commitment to fostering an inclusive and respectful community,0,0,0,1,1,0,0
In the context of DATAJPA 1798 Jens Schauder opened an issue to address improvements in the Spring Data JPA documentation The issue is linked to a pull request aimed at refining the content for better clarity and usability This update has been backported to versions 2 3 5 Neumann SR5 and 2 2 11 Moore SR11 to ensure consistency across these releases The changes focus on enhancing the user experience by providing clearer guidelines and correcting any discrepancies in previous versions This effort underscores the ongoing commitment to maintaining high quality documentation in the project,0,0,0,1,1,0,0
In section 5 3 8 of the Spring Data JPA documentation there s a clarification needed regarding custom methods in the context of modifying queries The Modifying annotation is specified for use with the Query annotation but not required for derived query methods or custom methods The term custom methods was unclear leading to a suggestion for better definition or changed terminology Jens Schauder resolved this by explicitly introducing the term custom method in the documentation ensuring it can be easily found and understood A link to the relevant section on custom implementations was added to aid clarity If further changes are necessary users are encouraged to open a new ticket,0,0,0,1,1,0,0
The discussion revolves around understanding JPA query hints in Spring Data JPA documentation A user Chealer expresses confusion regarding section 5 3 9 and suggests linking to official JPA documentation or providing more context about QueryHint Jens Schauder responds noting that Spring Data JPA assumes familiarity with JPA and does not aim to serve as a comprehensive JPA reference They emphasize that while understanding terms may require additional research the documentation should not be overloaded with external links The issue of documentation clarity is acknowledged but it is decided that maintaining links to unofficial resources is not advisable The conversation concludes with the issue being marked as declined indicating no changes will be made to the documentation,0,0,0,1,1,0,0
The issue DATAJPA 1787 https jira spring io browse DATAJPA 1787 was opened by Eulodos https jira spring io secure ViewProfile jspa name JIRAUSER50402 to update the Spring Data JPA documentation by replacing obsolete code involving anonymous classes with Java 8 lambdas This change aims to enhance readability and reduce boilerplate code in sections discussing JPA criteria and the creation of Spring s Specifications The update affects versions 2 4 RC1 2020 0 0 and 2 3 4 Neumann SR4 with backports to versions 2 3 5 Neumann SR5 and 2 2 11 Moore SR11 The relevant documentation can be found in the Spring Data JPA reference guide https docs spring io spring data jpa docs current reference html specifications and the changes were proposed in a pull request https github com spring projects spring data jpa pull 429,0,0,0,1,1,0,0
In the Spring Data JPA documentation a transactional code example includes a potentially unnecessary userRepository save user operation This redundancy arises because entities are already attached to the Hibernate session making explicit saves unnecessary as updates are automatically persisted at the transaction s end Vlad Mihalcea critiques this as a redundant save anti pattern which can waste resources However some argue that explicitly calling save enhances code clarity and consistency across different transactional contexts Oliver Drotbohm suggests that not calling save is a leaky abstraction as service layer code shouldn t need to know about JPA s implementation details Jens Schauder acknowledges the redundancy but supports leaving the save call to avoid potential abstraction issues despite its technical superfluity,0,0,0,1,1,0,0
Using parallelStream within a Transactional DAO method can lead to unexpected behavior as it creates a separate transaction boundary for each thread This might conflict with the user s expectation of a global transaction boundary where all operations are executed within a single transaction In JPA repositories create a transaction if none exists but parallel threads can violate JDBC and JPA specifications by concurrently using a single JDBC connection leading to potential issues To prevent implicit transactions you can annotate your repository with Transactional propagation MANDATORY This ensures that any method invocation requires an existing transaction safeguarding against accidental transactional behavior,0,0,0,1,1,0,0
The issue DATAJPA 1664 https jira spring io browse DATAJPA 1664 addresses typographic errors in the Javadoc documentation for org springframework data jpa repository EntityGraph The errors occur in annotations describing the configuration of JPA 2 1 EntityGraph s used in repository methods Notably there is a redundancy in the phrase via via and issues with link references and descriptions The documentation explains that since version 1 9 dynamic EntityGraph s can be defined by customizing the fetch graph through attributePaths If attributePaths are specified the entity graph name value is ignored treating the EntityGraph as dynamic The issue affects versions 2 1 14 and 2 2 3 and has been referenced in a pull request and commits for corrections It has been backported to versions 2 2 6 and 2 1 17,0,0,0,1,1,0,0
In DATAJPA 1648 Stefan Scheid reported difficulty finding documentation on using classpath in the spring datasource data configuration for Spring Data JPA He discovered the information was only in the Javadoc after hours of searching Jens Schauder responded noting that this is documented in the Spring Framework reference guide and emphasized that this issue tracker is specific to Spring Data JPA Schauder suggested that if documentation improvements are needed an issue should be opened on the Spring Framework GitHub repository The discussion highlights a potential gap in easily accessible documentation for users unfamiliar with specific existing resources,0,0,0,1,1,0,0
Oracle User Defined Type Support in Spring Data JPA involves challenges when calling stored procedures with user defined types A user reported difficulty due to a lack of documentation on integrating these with Spring JPA They attempted to register a stored procedure parameter using MYOracleTypeDef class but faced issues Jens Schauder clarified that Spring Data JPA relies on JPA standards without special handling for specific databases like Oracle Thus if JPA supports it Spring Data JPA should work similarly If not it isn t feasible with Spring Data JPA either No documentation updates are necessary as the behavior aligns with JPA capabilities,0,0,0,1,1,0,0
The issue DATAJPA 1628 was opened by Philippe De Neve regarding the absence of PDF documentation for Spring Data JPA Users previously accessed PDFs at the documentation root but newer versions only include HTML formats The last available PDF was for version 2 0 5 RELEASE Jens Schauder responded explaining that the decision to discontinue PDF releases was intentional focusing solely on HTML formats moving forward This change affects version 2 2 1 Moore SR1 and later,0,0,0,1,1,0,0
The issue DATAJPA 1516 https jira spring io browse DATAJPA 1516 addresses the need to improve documentation for Spring Data JPA by listing variables supported by SpEL in queries defined with Query Currently the documentation mentions entityName as an example but lacks a comprehensive list Michael L Johnson noted that variables like principal are also used often found through external searches The confusion arose because Spring Data JPA handles entityName as a special case while other variables depend on registered EvaluationContextExtensions Oliver Drotbohm pointed out that creating an exhaustive list is difficult as available variables vary with different extensions such as Spring Security registering principal The discussion concluded that updating the documentation to clarify these points and linking to the Spring SpEL documentation would be beneficial The issue was closed as no further tracking was needed,0,0,0,1,1,0,0
The issue DATAJPA 1502 was opened by Oliver Drotbohm to address a typo in the specification documentation of Spring Data JPA This correction has been applied across multiple versions ensuring consistency and clarity in the documentation The changes have been backported to versions 2 1 5 Lovelace SR5 2 0 14 Kay SR14 and 1 11 19 Ingalls SR19 This effort underscores the importance of maintaining accurate documentation to support developers using these frameworks You can view the changes and updates in the associated GitHub pull request,0,0,0,1,1,0,0
The issue DATAJPA 1479 involves simplifying the reference documentation setup for Spring Data JPA by removing common properties from index adoc These properties are now defined in Spring Data Build streamlining the documentation process This change is related to DATACMNS 1442 which also focuses on simplifying the documentation setup The modifications can be traced back to a specific commit in the Spring Data JPA GitHub repository,0,0,0,1,1,0,0
The issue DATAJPA 1454 https jira spring io browse DATAJPA 1454 discusses implementing functionality to retrieve sequence values directly from a database without creating an entity Pavel suggests a method for obtaining sequence values such as FOO SEQ using a repository interface and specific implementations for Oracle and PostgreSQL This involves using classes like OracleSequenceMaxValueIncrementer and PostgresSequenceMaxValueIncrementer to get the next sequence value Spring Data JPA contributors noted that this request is outside the typical scope of Spring Data JPA which focuses on entities and aggregates and does not inherently handle sequences The suggestion includes creating a utility class or interface that automatically determines the database dialect simplifying sequence retrieval without requiring a datasource,0,0,0,1,1,0,0
The EntityGraph mechanism in Hibernate has a known issue where attributes marked as EAGER are loaded even if they are not included in the fetch graph attribute list This behavior renders the javax persistence fetchgraph ineffective as highlighted in HHH 8776 https hibernate atlassian net browse HHH 8776 This can lead to confusing debugging sessions for developers using Spring Data JPA which often defaults to Hibernate Although there is a desire to document this pitfall in Spring Data JPA to help users avoid unnecessary debugging there is debate about whether it is appropriate to include such warnings in its documentation as it pertains to a specific JPA provider rather than Spring Data JPA itself The suggested compromise is to include this information as a footnote providing guidance without overwhelming the main content,0,0,0,1,1,0,0
A typo was identified in the Javadoc of the AbstractAuditable class within the Spring Data JPA project The issue tracked as DATAJPA 1341 was opened by Jos Manuel Portero It affects versions 2 1 M2 Lovelace 1 11 12 Ingalls SR12 and 2 0 7 Kay SR7 The typo has been addressed in a pull request and corrected in several commits The fix has also been backported to versions 2 0 8 Kay SR8 and 1 11 13 Ingalls SR13 For more details refer to the related GitHub links provided in the issue description,0,0,0,1,1,0,0
Mark Paluch opened DATAJPA 1322 to address issues in the Spring Data JPA documentation The changes were discussed in a pull request on GitHub which aimed to improve clarity and accuracy These updates were successfully backported to versions 2 0 7 Kay SR7 and 1 11 12 Ingalls SR12 The goal was to enhance user understanding and ensure the documentation reflects the current functionality and best practices,0,0,0,1,1,0,0
Francesco reported an issue with Spring Data JPA where an exception is thrown due to an invalid repository query method The method findFirstByPositionIsNotNullOrderByIdCompositeFieldIdDesc includes a parameter that isn t needed for the query leading to a NoSuchElementException Initially the app starts without issues but fails at runtime due to the unused parameter After upgrading to Spring Boot 2 0 0 a IllegalArgumentException occurs during startup indicating a query creation failure linked to an IndexOutOfBoundsException Francesco realized the parameter was unnecessary and suggested that the framework could provide more informative error messages Oliver Drotbohm confirmed the issue noting the method parameter is superfluous and agreed that better exception messages would be beneficial Jens Schauder was asked to investigate ways to enhance these messages,0,0,0,1,1,0,0
The issue DATAJPA 1192 was opened by Kevin Peters highlighting outdated JavaDocs in the Spring Data JPA project The documentation inconsistencies involve references to non existent variables and incorrect link annotations This affects the 2 0 RC3 Kay release and has been addressed in a pull request The corrections have been backported to versions 1 11 8 Ingalls SR8 and 1 10 12 Hopper SR12 These updates ensure that the JavaDocs accurately reflect the current state of the codebase improving clarity and usability for developers,0,0,0,1,1,0,0
The rationale behind the execution behavior of derived deleteBy queries in Spring Data JPA involves understanding how these queries are automatically generated and executed based on method names When a method with a name like deleteBy is defined Spring Data JPA interprets this to create a query that deletes records matching the specified criteria The framework analyzes the method name to determine the entities and conditions involved translating them into the appropriate JPA query This process enhances code readability and reduces boilerplate as developers can define repository interfaces without writing explicit query logic The backporting to versions 1 11 2 and 1 10 9 ensures that these enhancements and fixes are available to a broader range of users maintaining consistency and reliability across different versions of the framework,0,0,0,1,1,0,0
Minkyu Cho reported a typo in the Spring Data JPA documentation regarding JPQL keyword mapping Specifically in Table 4 there is an inconsistency with the use of singular and plural forms for collection arguments in the In and NotIn JPQL snippets one uses ages plural while another uses age singular This issue identified in version 2 0 M1 Kay has been referenced in multiple commits and a pull request on GitHub The documentation has been updated and backported to earlier versions 1 11 8 Ingalls SR8 and 1 10 12 Hopper SR12 For further details refer to the linked resources and commits,0,0,0,1,1,0,0
Oliver Drotbohm opened DATAJPA 993 https jira spring io browse DATAJPA 993 to improve the infrastructure setup example in the Spring Data JPA reference documentation The changes are intended to enhance clarity and usability for developers setting up their environments This issue is linked to a pull request PR 180 https github com spring projects spring data jpa pull 180 which includes updates and improvements to the documentation These updates have been backported to versions 1 10 5 Hopper SR5 and 1 9 7 Gosling SR7 ensuring that users of these versions also benefit from the enhanced instructions,0,0,0,1,1,0,0
A typo was identified in the Spring Data JPA reference documentation by Oleksandr Mandryk In Table 4 the JPQL snippet for the LessThanEqual keyword incorrectly displayed the less than or equal symbol as due to a conversion by the asciidoctor library This issue was documented in DATAJPA 953 https jira spring io browse DATAJPA 953 and addressed through a series of commits and a pull request on GitHub The fix was merged and backported to versions 1 10 3 Hopper SR3 and 1 9 5 Gosling SR5 of Spring Data JPA Oliver Drotbohm confirmed the resolution and expressed gratitude for the contribution,0,0,0,1,1,0,0
The issue DATAJPA 888 highlights that native queries in Spring Data JPA are partially supported with Pageable requests This functionality although not fully documented allows developers to use pagination with native SQL queries The request to update the documentation aims to clarify this capability ensuring that users are aware of how to implement pagination with native queries The discussion originated from a Stack Overflow question pointing out the lack of documentation As a result updates were backported to several versions including 1 10 2 Hopper SR2 1 9 5 Gosling SR5 and 1 8 3 Fowler SR3 enhancing support and clarity for developers using these features,0,0,0,1,1,0,0
In Spring Data JPA ad hoc EntityGraphs allow for more efficient data retrieval by defining specific fetch plans dynamically They enable developers to specify which attributes and associations should be loaded reducing unnecessary data fetching and improving performance This feature is particularly useful when different parts of an application require different data subsets By using EntityGraph annotations developers can tailor queries to meet specific needs without altering the underlying entity model The documentation update linked to DATAJPA 838 https jira spring io browse DATAJPA 838 involves detailing how to implement these graphs effectively providing examples and guidelines for leveraging them in various scenarios This enhancement is part of the ongoing efforts to improve JPA s flexibility and efficiency as referenced in several related commits,0,0,0,1,1,0,0
The update to the reference documentation involves the introduction of JpaContext as highlighted in issue DATAJPA 779 https jira spring io browse DATAJPA 779 redirect false This addition aims to enhance the ease of accessing the EntityManager for specific domain types from custom implementations addressing concerns raised in the related issue DATAJPA 669 https jira spring io browse DATAJPA 669 The update was initiated by Oliver Drotbohm and has garnered community interest with votes and watchers tracking its progress,0,0,0,1,1,0,0
The documentation for Spring Data JPA lacks details on how the Version annotation interacts with entity state detection Specifically when an entity has a Version field JpaMetamodelEntityInformation checks if the version is null to determine if the entity is new This behavior is not documented causing potential confusion The issue affects version 1 8 2 Fowler SR2 and while it seems suitable for external contribution it has been delayed across multiple sprints without resolution There s a suggestion for a pull request to address this documentation gap,0,0,0,1,1,0,0
Frederic Oppermann reported an issue in the Spring Data JPA documentation where strange symbols appeared likely due to broken character encoding This was documented in issue DATAJPA 616 https jira spring io browse DATAJPA 616 redirect false He attached a screenshot to illustrate the problem Jens Schauder noted that the issue seems to have been resolved long ago while Oliver Drotbohm confirmed it as an encoding problem and forwarded it to the operations team for further handling The issue is related to similar documentation errors noted in DATACMNS 586 https jira spring io browse DATACMNS 586,0,0,0,1,1,0,0
In DATAJPA 615 https jira spring io browse DATAJPA 615 Ludovic Praud noted that the documentation for Spring Data JPA 1 7 lacks information on the top and first keywords which are used to statically limit query results This omission was highlighted despite these features being mentioned in the Spring Data Evans blog http spring io blog 2014 10 15 whats new in spring data evans Oliver Drotbohm commented that the issue was resolved through Thomas Darimont s contribution to DATACMNS 580 https jira spring io browse DATACMNS 580 and updates will be included in the upcoming milestone and bugfix release Thomas confirmed the documentation has been updated in Spring Data Commons,0,0,0,1,1,0,0
The task involves migrating reference documentation to Asciidoctor as indicated in the Spring Data JPA issue DATAJPA 580 This transition aims to improve the readability and maintainability of the documentation Asciidoctor is favored for its powerful syntax and extensive tooling support making it an ideal choice for technical documentation The move will likely streamline the process of updating and generating documentation benefiting both developers and users by providing clearer more accessible information,0,0,0,1,1,0,0
The documentation for the entity manager factory ref attribute in the jpa repositories element needs improvement It currently suggests that a lookup is performed for a single EntityManagerFactoryBean regardless of its name which is incorrect The actual behavior is to look up specifically for a bean named entityManagerFactory if not explicitly configured The proposed rewording clarifies this behavior by stating If not configured we will automatically lookup the EntityManagerFactory bean with the name entityManagerFactory in the ApplicationContext This clarification is crucial for users to correctly configure their applications The issue affects version 1 6 GA and has been backported to versions 1 6 1 and 1 5 3,0,0,0,1,1,0,0
The Spring Data JPA Quick Start guide aims to provide minimal configuration examples for using a repository Adam Berlin suggested that the guide should include concise instructions on how to include and use dependencies focusing on configuring JPA beans without overwhelming details The goal is to make the website a primary information source for developers rather than relying on external documentation or README files However there is debate about whether adding detailed manual setup instructions would actually complicate things as Spring Boot is emphasized as the main programming model The current approach directs users to Spring Boot for default setups while more complex configurations rely on the Spring Framework reference documentation There s a suggestion to link relevant guides to help users find the necessary information more easily,0,0,0,1,1,0,0
Greg Turnquist opened DATAJPA 531 https jira spring io browse DATAJPA 531 redirect false suggesting that a link to the Accessing JPA Data With REST guide would be useful on the GitHub site This was referenced in pull request 90 https github com spring projects spring data jpa pull 90 and several commits Turnquist also mentioned that pull request 88 https github com spring projects spring data jpa pull 88 includes modifications to readme md to incorporate this guide This update aims to enhance the accessibility of resources for users working with Spring Data JPA,0,0,0,1,1,0,0
The documentation for setting up CDI in Spring Data JPA is lacking particularly in explaining how to configure an EntityManager as a CDI bean The current examples need enhancement including a streamlined version suitable for JavaEE environments This issue affects versions 1 5 RC1 Codd and 1 4 4 Babbage SR3 with a backport to version 1 4 5 Babbage SR4 Oliver Drotbohm highlighted the need for these improvements,0,0,0,1,1,0,0
Marten Deinum suggested updating the Spring Data JPA documentation to replace the getSessionFactory method with HibernateJpaSessionFactoryBean for better integration with Hibernate This recommendation aims to improve the FAQ section C2 1 ensuring a more efficient approach to obtaining the SessionFactory The change reflects in a pull request on the Spring Data JPA GitHub repository and has been backported to version 1 4 5 Babbage SR4 This update addresses issues with simultaneous use of Hibernate and Spring Data JPA as discussed in a related Stack Overflow thread,0,0,0,1,1,0,0
In Spring Data JPA the jpa repositories element requires an explicit transaction manager ref even if there s only one PlatformTransactionManager unless it s named transactionManager This behavior contradicts the documentation leading to confusion Wojciech Krak identified this issue providing a test case on GitHub The tests show that when the transaction manager is named differently e g txManager it fails without explicit reference Oliver Drotbohm and Thomas Darimont acknowledged the issue stating it s consistent with other Spring components requiring specific naming for auto configuration They plan to update the documentation to clarify this requirement,0,0,0,1,1,0,0
Summary The issue DATAJPA 399 https jira spring io browse DATAJPA 399 was opened by Thomas Darimont requesting an addition of a Java configuration example to the README md for Spring Data JPA The issue has been resolved and fixed through a commit on the master branch of the project s GitHub repository The commit can be viewed here https github com spring projects spring data jpa commit 7cc24dfb7c410cca79e375ca38e4d0e7a1fcf157 This update aims to enhance the documentation by providing clearer guidance on using Java configuration with Spring Data JPA,0,0,0,1,1,0,0
SpEL Spring Expression Language expressions in Query annotations are used within Spring Data JPA to dynamically construct query strings based on method parameters or other contextual data This allows developers to create more flexible and reusable queries SpEL can access method parameters by name and use them in JPQL or SQL queries providing a powerful mechanism to customize queries at runtime This feature enhances the capability to handle complex query requirements directly in repository methods without the need for custom implementation The integration of SpEL in Query simplifies the development process reducing boilerplate code while increasing the expressiveness of data access layers,0,0,0,1,1,0,0
The issue DATAJPA 367 discusses an undeclared dependency on spring aspects when using Spring Data JPA s auditing features Users encounter errors like ArrayStoreException and CannotLoadBeanClassException when adding EntityListeners and JPA auditing configuration without this dependency The problem arises because AuditingEntityListener requires aspects that are not included by default Solutions proposed include explicitly declaring the dependency in the build configuration creating a separate artifact for annotations or documenting the need for spring aspects Concerns were raised about the necessity of load time weaving but it was clarified that necessary code is woven at compile time requiring spring aspects to be present at runtime Updates were made to documentation and error handling to better address missing dependencies,0,0,0,1,1,0,0
In the issue DATAJPA 334 Oliver Drotbohm identified an error in the readme md file of the Spring Data JPA project The document incorrectly referenced SpringJUnit4TestRunner which should be corrected to SpringJUnit4ClassRunner This change was essential to ensure accuracy in the documentation The issue was addressed in the following commits e2c60ec6 https github com spring projects spring data jpa commit e2c60ec6f0f4924ad31a885bd6725f48e44a75dd and da3ed79e https github com spring projects spring data jpa commit da3ed79e803593b7643c80283eab56f912f86df8,0,0,0,1,1,0,0
The Modifying annotation s clearAutomatically behavior changed in version 1 0 RC1 where the default no longer clears the persistence context automatically This change is not reflected in the current documentation which still describes the old behavior The rationale is to prevent losing non flushed changes as clearing the EntityManager drops these changes Users can set clearAutomatically true if they want the context cleared automatically However the documentation lacks scenarios explaining when this should be used creating confusion Additionally the use of the term drop is ambiguous leading to questions about whether it means flush or discard More theoretical context on why this default was chosen would help users understand Spring Data JPA s design assumptions,0,0,0,1,1,0,0
The issue DATAJPA 238 opened by Philipp H gelmeyer highlights the lack of documentation for DATAJPA 92 in the Spring Data JPA project This issue affects version 1 1 1 and is linked to DATAJPA 174 which also concerns missing documentation specifically about the Distinct feature Oliver Drotbohm noted that the problem was resolved through DATACMNS 220 The absence of proper documentation in these cases can hinder developers understanding and usage of certain features within the framework,0,0,0,1,1,0,0
The Spring Data JPA 1 1 version introduced native query support for the Query annotation allowing developers to execute raw SQL queries within their Spring applications This feature requires comprehensive documentation and examples to guide users on its implementation The request for detailed documentation highlights the need for clarity on leveraging native queries effectively This capability is crucial for cases where JPQL may not suffice offering more flexibility and control over database interactions The issue identified as DATAJPA 227 points to specific commits in the project s repository that address this feature,0,0,0,1,1,0,0
To add custom behavior to all Spring Data JPA repositories the approach involves creating a base repository interface and an extended repository class The base interface annotated with NoRepositoryBean defines a custom method The extended repository class implements this interface and extends SimpleJpaRepository providing the custom behavior Configuration is achieved using EnableJpaRepositories with the repositoryBaseClass attribute set to the extended repository class This setup allows for cross cutting functionality across all repositories Documentation and examples have been updated to reflect these steps with examples available in the Spring Data Examples repository,0,0,0,1,1,0,0
A user reported that the Distinct keyword supported in query methods as per the 1 0 M2 release note was missing from the documentation s list of supported keywords in method names This issue affecting version 1 0 2 highlighted a gap in the documentation as the keyword was not reflected in Table 2 2 Despite being mentioned in the changelog the documentation remained outdated Updates to address this were made in Spring Data Commons versions 1 4 x and 1 3 x branches ensuring proper documentation of the Distinct keyword,0,0,0,1,1,0,0
The README file in the given repository contains outdated information specifically referencing Spring Data JPA version 1 0 0 M1 This issue was identified and reported by Gunnar Hillert in the Spring Data JPA issue tracker under the reference DATAJPA 155 It highlights the need for updating documentation to reflect current versions and ensure accuracy for users referencing these materials No additional details were provided in the issue tracker regarding this specific concern,0,0,0,1,1,0,0
Slava Semushin reported a typo and broken links in the Spring Data JPA documentation The typo was found in Table 2 1 where tha should be corrected to the in the description of transaction manager ref Additionally there are links with question marks in Chapter 2 2 6 on modifying queries and in the footnote for A 1 regarding the repositories element These issues were noted to improve the clarity and accuracy of the documentation,0,0,0,1,1,0,0
In the context of configuring custom repository functionality in Spring Data JPA it was suggested to replace the repository impl ref attribute with custom impl ref for better clarity A user reported that when repositories are in subpackages the only working configuration involves explicitly defining the custom implementation in a separate package However the documentation indicates this setup shouldn t be necessary if the implementation resides in the same package as the interface This discrepancy suggests potential simplification of configuration Additionally it s highlighted that the implementation class should follow a naming convention such as repositoryInterfaceName customImplementationSuffix typically defaulting to Impl Keeping the implementation close to the interface and making it package private is recommended for better organization and access control,0,0,0,1,1,0,0
The issue DATAJPA 91 opened by Oliver Drotbohm addresses a documentation gap in the repositories element within Spring Data JPA Specifically the documentation lacks information about the entity manager factory ref attribute which is crucial for configuring the entity manager factory reference This attribute is necessary to correctly set up repositories with a specific entity manager factory especially in environments where multiple factories might be used The absence of this documentation can lead to confusion and implementation errors for developers using version 1 0 GA of the framework Providing detailed documentation on this attribute would enhance clarity and facilitate easier setup and configuration,0,0,0,1,1,0,0
The documentation for Spring Data JPA had several typos and readability issues along with technical problems in how it was generated Specifically it improperly combined DocBook files from GitHub rather than using a released version and there were broken links marked by Phil Webb addressed these by submitting pull requests to fix typos and update the Maven build to use published DocBook files though the link issues remained unresolved Oliver Drotbohm applied these changes but expressed concerns about distributing DocBook files just for Maven repository availability He suggested keeping links in index xml and simplifying distribution The conversation reflects efforts to improve documentation clarity and technical accuracy,0,0,0,1,1,0,0
The issue raised concerns Spring Data JPA s behavior of acting on Repository beans outside the defined data repositories scan path causing errors in certain integrations such as with Struts2 Although using Repository for Struts2 action classes may not be ideal it s technically acceptable This behavior is due to implicit activation of PersistenceExceptionTranslationBeanPostProcessor which ensures native exceptions are converted to Spring DataAccessExceptions This proxying is expected as documented for all classes annotated with Repository The issue was reframed to focus on improving documentation to clarify this behavior,0,0,0,1,1,0,0
The issue DATAJPA 56 involves documenting the IN and NOT IN keywords for query parsing in Spring Data JPA It affects version 1 0 M2 and relates to supporting the IN keyword as noted in DATAJPA 30 A user Huge B commented about difficulties using the IN query They attempted a query with Query FROM MyObject obj WHERE obj id in ids using a list of values but it didn t return results The correct syntax findBySomeValueIn Collection String values was found in the original bug report and works as intended but documentation is still needed to assist others facing similar issues,0,0,0,1,1,0,0
The reference documentation for Spring Data JPA contained an error in a JPQL example related to the OrderBy clause The incorrect query used instead of in the where clause sql where x age 1 order by x lastname desc The correct query should be sql where x age 1 order by x lastname desc This issue was reported in DATAJPA 20 https jira spring io browse DATAJPA 20 by Oliver Drotbohm It affects version 1 0 M1 and the correction is referenced in a specific commit on GitHub An attachment mylyn context zip is also included in the report,0,0,0,1,1,0,0
The issue DATAKV 213 highlights that the KeySpace annotation in the org springframework data keyvalue annotation KeySpace class contains outdated Javadoc examples The example involves using Persistent annotations to indicate a keyspace for an entity which should now be updated The recommendation is to use custom KeySpace annotations with AliasFor for more domain specific applications This approach involves creating a composed annotation that inherits Persistent An example of such an annotation is CacheCentricAnnotation which specifies a cacheRegion attribute This issue affects versions 1 2 10 Ingalls SR10 and 2 0 5 Kay SR5 and has been addressed in later versions as noted in specific commits The feedback from the community including Mark Paluch acknowledges the removal of KeySpace support on methods during Java 8 refactoring,0,0,1,1,0,0,0
To add fluent API support for QuerydslKeyValueRepository you need to enhance the Spring Data Commons library to facilitate a more intuitive and streamlined query creation process This involves implementing a fluent API that allows developers to construct queries using method chaining improving readability and usability The changes should focus on extending the existing functionality of QuerydslKeyValueRepository to support this new querying style This enhancement not only simplifies query construction but also aligns with modern programming practices Ensure comprehensive testing and documentation to guide developers in adopting these new features effectively,1,0,0,0,1,0,0
Mark Paluch opened DATAKV 242 https jira spring io browse DATAKV 242 to streamline the reference documentation setup for Spring Data KeyValue The update involves removing common properties from index adoc since they re now defined in Spring Data Build This change simplifies the documentation process The issue is linked to DATACMNS 1442 https jira spring io browse DATACMNS 1442 which shares a similar goal The relevant changes were made in a commit https github com spring projects spring data keyvalue commit 051b8db0b890f116c45d2cc83a988e2046a6d511,0,0,0,1,1,0,0
Oliver Drotbohm reported typos in the Spring Data KeyValue project documentation including corrections like SpelPropertyComperator to SpelPropertyComparator and KeyValaueTemplate to KeyValueTemplate These issues affected version 1 0 GA Gosling and were backported to version 1 0 1 Gosling SR1 Martin Macko submitted a pull request to address these typos which was successfully merged into both the master and maintenance branches,0,0,0,1,1,0,0
The document discusses the use of Cassandra support in Spring Data LDAP highlighting that its core functionality can be used directly without requiring Spring IoC services This approach might not be the most professional introduction The issue DATALDAP 82 was opened by James Green and later addressed with acknowledgments from Mark Paluch The problem affected version 1 0 14 and was referenced in several commits It has been backported to versions 2 0 10 and 1 0 15 ensuring the fix is applied in both new and older releases,0,0,1,1,0,0,0
Mark Paluch opened issue DATALDAP 25 to address a problem with the link to the Spring LDAP documentation in the reference materials The issue affects version 1 0 1 Ingalls SR1 and is associated with a pull request and several commits in the Spring Data LDAP GitHub repository The changes have been backported to version 1 0 2 Ingalls SR2 to ensure the documentation link is corrected The relevant commits are 3ad71d0 b9ce3e7 and 5984451 which collectively resolve the issue,0,0,1,1,0,0,0
Spring LDAP 2 4 M1 introduces several enhancements and fixes This release upgrades dependencies including support for Spring Framework 5 2 and Java 8 It improves compatibility and performance especially for LDAP operations The update includes better support for annotation based configurations and enhanced exception handling Developers will find improvements in documentation and examples facilitating easier integration and configuration Additionally the release addresses multiple bugs ensuring a more stable and reliable experience for applications utilizing LDAP Overall Spring LDAP 2 4 M1 offers a more robust and efficient foundation for managing LDAP directories in Java applications,1,0,0,0,0,0,1
Spring LDAP 3 0 M1 introduces several enhancements and new features for improved functionality and ease of use Key updates include support for Java 8 and later versions ensuring compatibility with modern applications The new release also simplifies configuration with annotations reducing the need for extensive XML setup Improved error handling and logging provide more clarity when troubleshooting issues Additionally the update enhances performance and security making it more robust and efficient for managing LDAP operations Overall this version streamlines integration and offers a more intuitive development experience,1,0,0,0,0,0,1
Mark Paluch opened issue DATALDAP 98 to simplify the reference documentation setup for Spring Data LDAP The goal is to remove common properties from index adoc as they are now defined in Spring Data Build streamlining the documentation process This change is linked to another issue DATACMNS 1442 which also focuses on simplifying documentation setup The adjustments are reflected in the commit aaf8bb9 on the Spring Data LDAP GitHub repository,0,0,0,1,1,0,0
In the task DATALDAP 76 Mark Paluch addressed the addition of a cover page for EPUB documentation output This enhancement was discussed in relation to a pull request and specific commits within the Spring Data LDAP project The changes were backported to version 2 0 8 Kay SR8 The goal was to improve the documentation format by including a cover page thereby enhancing the presentation and accessibility of the content for end users This update ensures a more professional and polished look for the EPUB outputs aligning with standards expected in technical documentation For further details you can refer to the JIRA issue https jira spring io browse DATALDAP 76 redirect false and associated GitHub pull request https github com spring projects spring data ldap pull 5,0,0,0,1,1,0,0
The issue DATALDAP 75 https jira spring io browse DATALDAP 75 redirect false opened by Mark Paluch involves a full editing pass on the reference documentation for Spring Data LDAP This task includes refining content for clarity accuracy and completeness to enhance user understanding and usability The changes were initially discussed in a pull request on GitHub and have been backported to version 2 0 8 Kay SR8 This ensures that improvements benefit both current and future versions maintaining consistency across documentation iterations,0,0,0,1,1,0,0
A bug was identified in the Spring Data MongoDB documentation version 3 1 2 specifically in examples 77 and 78 where the code snippet incorrectly shows the use of a searching method on the TextQuery class However the TextQuery class does not have this method The issue affects version 3 1 2 2020 0 2 This discrepancy could lead to confusion for developers trying to implement full text search using the documented approach The error was reported under the issue DATAMONGO 2673 highlighting the need for correction in the official documentation,0,0,1,1,0,0,0
The issue DATAMONGO 2553 was opened by Mark Paluch addressing problems in the Spring Data MongoDB documentation Specifically it involves links pointing to sections that have been removed This issue affects version 3 0 GA Neumann and has been backported to version 3 0 1 Neumann SR1 The goal is to ensure the documentation is accurate and free from broken links enhancing the usability and reliability of the reference materials for developers,0,0,1,1,0,0,0
In the Spring Data MongoDB documentation there s a discrepancy in paragraph 14 2 Example 134 The code snippet defines a Person class with an id field of type String annotated with Id However the accompanying text incorrectly states that the id field is of type ObjectId This inconsistency may confuse users regarding the expected type for the id field Additionally the documentation does not clarify the necessity of the Id annotation or whether the id field is automatically recognized due to its name These issues affect version 2 2 4 Moore SR4 and have been addressed in subsequent updates including backports to versions 2 2 5 and 2 1 16 The problem is tracked under the issue DATAMONGO 2457 and referenced in a related pull request,0,0,1,1,0,0,0
In the Spring Data MongoDB Reference Documentation a minor correction is needed in the explanation of the Document annotation in the Mapping Annotation Overview chapter The current text suggests that the annotation specifies the name of the database where data will be stored which is inaccurate Instead it should clarify that Document marks a class for mapping to the database and allows specifying the collection name where the data will be stored This fix affects version 2 1 10 and has been backported to version 2 1 11 The change is referenced in a pull request on the project s GitHub repository,0,0,1,1,0,0,0
This entry discusses a documentation issue in the Spring Data MongoDB project specifically related to incorrect code indentation The problem was reported by Mark Paluch under the issue number DATAMONGO 2288 A pull request on GitHub aimed to address this formatting concern ensuring the code samples are properly presented for better readability and usability The fix has been backported to version 2 1 9 also known as Lovelace SR9 The correction enhances the documentation s clarity assisting developers in implementing MongoDB functionalities with Spring more effectively,0,0,1,1,0,0,0
In the issue DATAMONGO 2252 https jira spring io browse DATAMONGO 2252 JulienRentrop reported a discrepancy between the JavaDoc description and the actual behavior of the getCollection String collectionName method in MongoOperations The JavaDoc suggests that the method creates a collection in MongoDB if it doesn t exist but in practice the collection is only created lazily when modifications like creating an index or inserting data are made This caused issues when the first insert was within a transaction as MongoDB does not permit collection creation inside transactions JulienRentrop suggested updating the JavaDoc to accurately reflect the behavior or changing the method to create the collection immediately The issue affected version 2 1 6 and was referenced in several commits and a pull request Christoph Strobl acknowledged the report and revised the documentation accordingly,0,0,1,1,0,0,0
The issue DATAMONGO 2118 reported by Mark Paluch addresses a typo in the reference documentation of the Spring Data MongoDB repositories This problem affects several versions including 1 10 16 Ingalls SR16 2 0 11 Kay SR11 2 2 M1 Moore and 2 1 1 Lovelace SR1 The resolution has been included in a pull request which is linked for reference The fix has been backported to multiple versions 2 1 2 Lovelace SR2 2 0 12 Kay SR12 and 1 10 17 Ingalls SR17 ensuring that users across various iterations of the software benefit from the correction,0,0,1,1,0,0,0
The reference documentation for Spring Data MongoDB currently lacks coverage on Transactions and Sessions as highlighted in issue DATAMONGO 1983 opened by Mark Paluch This gap in documentation affects version 2 1 M3 Lovelace Users looking to implement these features may struggle due to insufficient guidance which could lead to improper usage or misunderstanding of how Transactions and Sessions function within the framework Addressing this issue is crucial for enhancing user experience and ensuring developers have access to the necessary resources to effectively utilize these features in their applications,0,0,1,1,0,0,0
In issue DATAMONGO 1862 Erik Melander reported that both the website and GitHub links for the Spring Data MongoDB API documentation for version 2 0 3 return a 404 error This issue affects the Kay SR3 release indicating that users are unable to access the necessary API documentation Mark Paluch acknowledged the problem explaining that API documentation for all multi module projects was not included in the Kay SR3 release but has since been corrected This highlights a temporary lapse in documentation availability that could impact developers relying on the API for their projects,0,0,1,1,0,0,0
The issue DATAMONGO 1847 was opened by Mark Paluch highlighting a problem in the Spring Data MongoDB documentation where the query method reference displays an incorrect predicate This affects version 1 10 9 Ingalls SR9 The concern was raised in relation to a specific pull request on GitHub indicating a need for correction to ensure accurate documentation for users implementing query methods The resolution involves updating the documentation to reflect the correct predicate usage thereby improving clarity and functionality for developers relying on these references,0,0,1,1,0,0,0
The issue DATAMONGO 1818 opened by Mark Paluch addresses a discrepancy in the Spring Data MongoDB documentation where TailableCursor was mentioned instead of the correct Tailable annotation This affects version 2 0 2 Kay SR2 and was referenced from a pull request on the Spring Data MongoDB repository The correction has been backported to version 2 0 2 to ensure consistency and accuracy in the documentation,0,0,1,1,0,0,0
The issue DATAMONGO 1814 highlights missing documentation on faceted classification in the Spring Data MongoDB project During the merge of DATAMONGO 1552 a specific documentation commit was lost and not included in version 2 0 x This affects the 2 0 GA Kay release The missing documentation was referenced from certain commits but was not initially merged It was later backported to version 2 0 1 Kay SR1 to address the oversight This issue was opened by Mark Paluch to ensure that the documentation is properly integrated into the relevant versions,0,0,1,1,0,0,0
The issue DATAMONGO 1805 highlights an error in the Spring Data MongoDB documentation regarding the find operation for GridFS The current documentation incorrectly uses the type GridFSDBFile for the find operation whereas the correct type should be GridFSFindIterable This discrepancy can be seen in the example provided in the documentation The expected code snippet should reflect the correct type to prevent confusion among developers using this feature This issue affects version 2 0 GA Kay and has been addressed in specific commits on GitHub It has also been backported to version 2 0 1 Kay SR1 to ensure consistency across documentation and implementation For more details refer to the official Spring Data MongoDB documentation and API references,0,0,1,1,0,0,0
The issue DATAMONGO 1747 https jira spring io browse DATAMONGO 1747 highlights confusion in the Spring Data MongoDB documentation regarding projections The example provided in the documentation only explains one method of retrieving the address attribute through a custom Repository for the Address type It then abruptly shifts to discussing how to avoid exposing address details skipping the explanation of a second method for address retrieval This creates confusion as readers would expect a complete example demonstrating projection through a PersonRepository rather than switching to AddressRepository The issue is noted to be partially incorrect and improvements are being tracked under DATACMNS 1011 https jira spring io browse DATACMNS 1011,0,0,1,1,0,0,0
The error in the Projection Expressions section labeled as Aggregate was noted by Michael Simons who filed the issue DATAMONGO 1662 https jira spring io browse DATAMONGO 1662 redirect false The correct term should be Aggregation This issue was referenced in multiple GitHub commits and pull requests related to the Spring Data MongoDB project specifically pull request 455 and commits with hashes 2b0026931a9030c63257c129737d8433c796ea9d 20929b34f13a33293a69d5d96bee99f0b747c18f and 8f5091b2d5e101a7358cef79e466ced8ce45adfa The fix was backported to versions 1 10 2 Ingalls SR2 and 1 9 9 Hopper SR9,0,0,1,1,0,0,0
In the cross store reference documentation for Spring Data MongoDB a minor error was identified regarding annotation references The documentation incorrectly stated that a field in an entity was annotated with RelatedEntity whereas it should have been RelatedDocument This issue affected several versions including 1 10 RC1 Ingalls 2 0 M1 Kay and 1 9 6 Hopper SR6 The mistake was documented in several commits and has since been corrected and backported to versions 1 10 GA and 1 9 7 The correction ensures consistency and accuracy in the documentation for developers referencing these annotations,0,0,1,1,0,0,0
Machine learning involves algorithms and statistical models that enable computers to perform tasks without explicit instructions It focuses on pattern recognition and predictive analytics allowing systems to improve with experience Key techniques include supervised learning where models learn from labeled data and unsupervised learning which identifies patterns without predefined labels Reinforcement learning involves training models through rewards and penalties Applications span diverse fields such as healthcare finance and autonomous systems Challenges include data quality model interpretability and ethical considerations Continuous research aims to enhance accuracy efficiency and fairness in machine learning systems,0,0,1,1,0,0,0
Mark Paluch opened issue DATAMONGO 1493 regarding typos in the Spring Data MongoDB reference documentation specifically affecting version 1 9 2 Hopper SR2 The issue was introduced via a pull request and has been backported to version 1 9 3 Hopper SR3 This ensures the documentation s accuracy and consistency across versions improving user experience and reducing potential misunderstandings in the documentation The issue and its resolution can be tracked through the provided links to the Jira issue and GitHub pull request,0,0,1,1,0,0,0
A discrepancy was noted in the MongoDB repositories section of the documentation specifically regarding the query examples for handling null values The documentation incorrectly used age instead of firstname in query examples The incorrect examples were findByFirstnameNotNull represented as age ne null findByFirstnameNull represented as age null These should correctly reference firstname instead of age findByFirstnameNotNull should be firstname ne null findByFirstnameNull should be firstname null This correction has been documented and backported to version 1 6 2 Evans SR2,0,0,1,1,0,0,0
The issue discussed involves timezone sensitivity in Joda JSR 310 and ThreeTenBp converters when handling LocalDate and LocalDateTime fields in MongoDB When objects containing these fields are saved in one timezone and read in another discrepancies arise because these fields lack timezone context unlike java util Date A proposed solution involves custom converters that adjust for timezone differences by adding or subtracting offsets Some suggest converting LocalDate to from midnight UTC to maintain consistency aligning with MongoDB s Java driver handling An alternative approach is to store LocalDate as strings though this impacts aggregation capabilities The consensus suggests that Spring Data MongoDB should natively support UTC conversion to match MongoDB s driver behavior with optional configurations for other timezone strategies,0,0,1,1,0,0,0
The issue DATAMONGO 768 highlights the need for improved documentation on using PersistenceConstructor in Spring Data MongoDB This constructor often causes confusion as the current documentation lacks detailed examples for its use in domain classes To address this examples from MappingMongoConverterUnitTests can be utilized to illustrate advanced scenarios The problem affects version 1 3 1 with improvements backported to 1 3 2 Babbage SR1 A relevant pull request has been submitted to enhance the documentation aiming to clarify constructor parameter resolution and improve user understanding,0,0,1,1,0,0,0
Oliver Drotbohm opened issue DATAMONGO 704 to address the removal of references to SimpleMongoConverter from JavaDoc in the Spring Data MongoDB project The issue was resolved some time ago but remained open due to an oversight The resolution is confirmed through commits 607072c0d3c9617e35effba7aa9b1c96dcd53944 and 389a3ac066a9becc228ad2efc244a8a5179cf629,0,0,1,1,0,0,0
The issue DATAMONGO 674 https jira spring io browse DATAMONGO 674 redirect false was opened by Hantsy Bai to address the lack of documentation regarding the custom APT processor provided by Spring Data MongoDB Although Spring Data MongoDB uses its own MongoAnnotationProcessor instead of the standard QueryDSL processor this detail was not included in the reference documentation The affected version is 1 2 1 and the relevant documentation link is here http static springsource org spring data data mongodb docs current reference html mongo repositories html d0e4073 Mark Paluch commented that there is a reference to QueryDSL APT tooling in the current documentation suggesting that users refer to it for type safe query construction in MongoDB repositories,0,0,1,1,0,0,0
The configuration for Datacross in a reference document needs updating to reflect changes in the latest version The original setup incorrectly uses MongoTemplate with unsupported arguments The revised configuration should replace MongoChangeSetPersister and MongoDocumentBacking with their updated package locations org springframework data mongodb crossstore The new setup involves correcting bean definitions and ensuring properties like mongoTemplate and entityManagerFactory are correctly referenced This update affects version 1 2 1 and it s noted that cross store support will be deprecated with no further changes planned,0,0,1,1,0,0,0
In the Spring Data Mongo project an issue was identified where the link to the reference PDF was broken The original URL pointed to spring data mongo reference pdf but the correct file was located at spring data mongodb parent reference pdf This affected version 1 2 GA The issue was reported by Stevo Slavi and later addressed by Mark Paluch who noted that documentation links were updated The project site now correctly directs users to the fixed URLs ensuring access to the necessary documentation,0,0,1,1,0,0,0
The issue DATAMONGO 613 was opened by Oliver Drotbohm to address missing images in the reference documentation for Spring Data MongoDB affecting version 1 2 GA This problem is linked to specific commits in the project s GitHub repository identified by the hashes 7bcf142c8dfcb89fe50a398695f011bc71938567 and bf81d95d218eb70ee05f9d3023112e4f3a27e5d6 The absence of these images potentially impacts the clarity and usability of the documentation prompting a need for resolution to improve user experience,0,0,1,1,0,0,0
In the Spring Data MongoDB project an issue was identified regarding the incorrect naming of the PDF reference documentation Oliver Drotbohm opened the issue DATAMONGO 612 https jira spring io browse DATAMONGO 612 indicating a need to fix this discrepancy The issue is linked to specific commits in the project s repository which address the problem by correcting the documentation name These changes were made to ensure consistency and accuracy in the project s reference materials as seen in the commits 158e4f033c9f https github com spring projects spring data mongodb commit 158e4f033c9fbdb6fecb48c3963dbcdb51c82faf and d50d03a80ed2 https github com spring projects spring data mongodb commit d50d03a80ed2670f5ab90ee6718f49f574af9370 This fix is part of maintaining the quality and reliability of the project documentation for users and developers,0,0,1,1,0,0,0
The issue DATAMONGO 366 opened by Christoph G rn highlights a documentation error in Chapter 3 2 which incorrectly directs users to the Spring Data KV bugtracker instead of the appropriate Spring Data Mongo bugtracker This misdirection affects version 1 0 GA and needs correction to ensure users can report and track issues related to Spring Data Mongo efficiently,0,0,1,1,0,0,0
Example 5 5 of the reference documentation for Spring Data MongoDB used the deprecated function Mongo slaveOk This issue tracked as DATAMONGO 365 https jira spring io browse DATAMONGO 365 was opened by Christoph G rn It affects version 1 0 GA and relates to other documentation improvements such as DATAMONGO 2509 https jira spring io browse DATAMONGO 2509 and DATAMONGO 384 https jira spring io browse DATAMONGO 384 Mark Paluch confirmed that the issue has been fixed while Thomas Darimont noted that a broader update of the MongoDB configuration infrastructure is necessary suggesting the use of MongoClientOptions,0,0,1,1,0,0,0
The reference documentation for using Query with repositories contained an error in the field specification syntax requiring a JSON string to indicate which fields to return The correct format is java Query fields foo 1 bar 1 This issue identified in version 1 0 M2 was addressed by Oliver Drotbohm Mark Pollack confirmed the fix and initiated a new issue to propose using QueryDSL s Path T as a more flexible way to specify field restrictions in query methods,0,0,1,1,0,0,0
When encountering Micrometer based deployment issues particularly with a missing plugin during deployment to Artifactory first verify that the Micrometer plugin is correctly listed in your build configuration e g pom xml for Maven or build gradle for Gradle Ensure that the repository containing the plugin is accessible and correctly configured Check for typos in the dependency declaration and verify network connectivity to Artifactory If the issue persists update the build tool to the latest version as this might resolve potential compatibility problems Additionally consult the official Micrometer and Artifactory documentation for any specific configurations or known issues If necessary reach out to support forums or communities for further assistance,0,1,1,0,0,0,0
The MongoPersistentEntityIndexResolver should avoid traversing Map like properties when setting up indices Indices on Map structures require specific map keys which cannot be determined solely from type information Consequently following the path of the map s value type is ineffective for index setup in the store This approach ensures that indices are relevant and functional avoiding unnecessary or incorrect configurations This adjustment relates to issue 3869,0,0,0,1,1,0,0
To address the issue of registering custom converters in Spring Data MongoDB the documentation currently suggests using AbstractMongoConfiguration which is deprecated in favor of AbstractMongoClientConfiguration However neither is suitable for registering custom converters without affecting unrelated configurations such as database name and client setup which can interfere with Spring Boot autoconfiguration This complexity arises due to dependencies between Spring Boot and Spring Data Mongo The recommended approach is to register a bean of type MongoCustomConversions which simplifies the process and avoids altering configurations unrelated to the task of registering custom converters This method should be highlighted in the documentation to provide clearer guidance,0,0,0,1,1,0,0
Ryan Cloherty identified a typo in the Spring Data MongoDB documentation and submitted a fix under issue DATAMONGO 2352 He expressed his motivation to contribute since he frequently uses the documentation and hopes to make more significant contributions in the future The typo fix was referenced from a pull request and backported to version 2 1 11 Lovelace SR11 The related code can be found in the MongoOperations java file on the official GitHub repository,0,0,0,1,1,0,0
The issue DATAMONGO 2348 highlights a discrepancy in Spring Data MongoDB s documentation regarding the initial value of Version annotated fields The documentation claims that the initial value is zero aligning with Spring Boot 1 5 behavior and increments automatically with updates for optimistic locking However the actual initial value depends on the data type of the version field For primitive types like long the initial value is set to one while for non primitives it remains zero This behavior is managed by the EntityOperations class The documentation has been updated in commits to reflect this and changes have been backported to version 2 1 11,0,0,0,1,1,0,0
The issue DATAMONGO 2192 https jira spring io browse DATAMONGO 2192 addresses the need to improve the documentation and method availability for count and countDocuments in the Spring Data MongoDB library The MongoDB documentation differentiates between count and countDocuments highlighting that count may be inaccurate in some cases particularly right after a write operation The user encountered an intermittent integration test issue receiving a count lower than expected leading to concerns about the consistency of count Currently the Spring MongoDB library only provides a count method and it s unclear whether it maps to MongoDB s count or countDocuments The request is to clarify this mapping in the documentation and if necessary introduce a countDocuments method in the library This issue is tagged as Spring due to the uncertainty about whether it s purely a documentation matter or if it involves adding new functionality The affected version is 2 1 4 Lovelace SR4 with related issues focusing on updating deprecated methods and polishing documentation for future releases,0,0,0,1,1,0,0
Mark Paluch opened the issue DATAMONGO 2161 to simplify the reference documentation setup for Spring Data MongoDB The proposal involves removing common properties from the index adoc file as these properties are now defined in the Spring Data Build This change aims to streamline documentation management and reduce redundancy The issue is linked to DATACMNS 1442 which also focuses on simplifying documentation processes The implementation is reflected in recent commits to the Spring Data MongoDB repository indicating an ongoing effort to enhance the clarity and maintainability of the documentation,0,0,0,1,1,0,0
The issue DATAMONGO 2076 was opened by Oliver Drotbohm to address a problem with property substitution in the Getting Started section of the Spring Data MongoDB reference documentation The fix has been backported to versions 2 0 10 Kay SR10 and 1 10 15 Ingalls SR15 This ensures that property placeholders are correctly substituted enhancing the clarity and functionality of the documentation for developers The updates help maintain consistency across different versions of the documentation,0,0,0,1,1,0,0
The issue DATAMONGO 1768 https jira spring io browse DATAMONGO 1768 redirect false reported by Pavan Kumar Rayabharapu addresses a problem with the MongoExampleMapper in Spring Data MongoDB This mapper inspects the probe type and applies type restrictions based on the MappingContext It uses the in operator to include types assignable to the probe The problem arises when the probe type does not match the document types in the MongoDB collection causing mismatches The issue is related to other tickets like DATACMNS 1140 https jira spring io browse DATACMNS 1140 which aims to enhance Query by Example for module extensions and DATAMONGO 1636 https jira spring io browse DATAMONGO 1636 which deals with documents lacking the class column The solution has been backported to version 1 10 7 Ingalls SR7,0,0,0,1,1,0,0
John Lilley opened a ticket regarding the undocumented authentication dbname attribute in Spring Data MongoDB making it difficult to discover The issue affects version 1 9 4 and relates to an older ticket DATAMONGO 789 John attempted to contribute documentation but faced challenges with GitHub processes such as pushing changes due to limited experience After some guidance he realized the correct procedure fork the repository clone the fork make changes push to his fork and then create a pull request Oliver Drotbohm acknowledged John s efforts and clarified the necessary steps for contributing,0,0,0,1,1,0,0
In the Spring Data MongoDB issue DATAMONGO 1435 https jira spring io browse DATAMONGO 1435 Julien Graglia reported an exception related to querying dynamic bean properties java lang IllegalArgumentException Owning type must not be null This occurred because a non generic Map was used in the bean leading to ambiguity in type detection The issue was solved by specifying a generic type for the Map changing from Map to Map String Object Graglia suggested that a clearer error message or detection for non generic maps could be helpful The issue was closed due to a lack of further feedback,0,0,0,1,1,0,0
The update to the reference documentation involves changing the sort method in Query from Query sort to Query with Sort sort as per DATAMONGO 1378 https jira spring io browse DATAMONGO 1378 This change is documented in a pull request on the Spring Data MongoDB GitHub repository The update has been backported to versions 1 8 4 Gosling SR4 and 1 7 3 Fowler SR3 Mark Paluch initiated the change and requested confirmation of the Contributor License Agreement CLA from Ux o Fuentefr a whose details were provided for verification,0,0,0,1,1,0,0
The JavaDoc documentation for the Spring Data MongoDB project incorrectly referenced EnableJpaRepositories instead of the correct EnableMongoRepositories This issue was identified and reported by Mark Paluch under the identifier DATAMONGO 1377 The correction ensures that developers use the appropriate annotation for enabling MongoDB repositories This update was referenced from a specific pull request and has been backported to versions 1 8 4 Gosling SR4 and 1 7 3 Fowler SR3 of the project Mark Paluch also requested an ICLA number or full name as part of the process,0,0,0,1,1,0,0
The issue DATAMONGO 1275 was opened by Oliver Drotbohm to address the need for reference documentation on optimistic locking support in Spring Data for MongoDB It affects versions 1 7 2 Fowler SR2 and 1 8 RC1 Gosling and is referenced in a Stack Overflow discussion about MongoDB repository design The issue is linked to a pull request on GitHub and has been backported to version 1 7 3 Fowler SR3,0,0,0,1,1,0,0
The Spring Data MongoDB documentation previously recommended using MongoFactoryBean to provide a Mongo instance in the context However this approach is now deprecated in favor of MongoClientFactoryBean This change is reflected in various updates including a pull request and several commits in the Spring Data MongoDB repository The updates have been backported to versions 1 8 4 Gosling SR4 and 1 7 3 Fowler SR3 Users are advised to update their configurations accordingly to align with the latest practices and ensure compatibility with future releases,0,0,0,1,1,0,0
The feature request DATAMONGO 1245 https jira spring io browse DATAMONGO 1245 aims to introduce Query By Example QBE support in Spring Data MongoDB This enhancement allows developers to use a partially filled domain object as a template for queries For instance a Person object with only the lastname set can be used to find all matching entries in the database The proposal includes creating an Example wrapper to handle null values and String processing alongside a findByExample repository method This feature is linked to broader efforts like DATACMNS 810 https jira spring io browse DATACMNS 810 and DATAJPA 218 https jira spring io browse DATAJPA 218 which focus on integrating core types for QBE The initiative has garnered community interest as evidenced by votes and watchers,0,0,0,1,1,0,0
The task involves transitioning from using com mongodb types to org bson types for improved integration with the MongoDB Java Driver 3 Key changes include using org bson Document instead of BasicDBObject and replacing DBObject with Bson Common operations like queries projections and sorts will utilize Filters Projections and Sorts respectively For database operations Collection insert Collection replace and Collection update are employed with UpdateOptions available for upsert scenarios This update is necessary for supporting the Reactive Streams driver in MongoDB More details can be found in the MongoDB Java Driver documentation and related Spring Data MongoDB updates,0,0,0,1,1,0,0
The issue DATAMONGO 1164 https jira spring io browse DATAMONGO 1164 redirect false was opened by Ruben Dijkstra noting that the documentation for SpringDataMongodbSerializer was outdated Initially it referenced a MappingContext but recent updates had introduced a more complex MongoConverter Christoph Strobl later commented that the issue seemed resolved as the documentation on the master branch now correctly reflects these changes The issue was closed due to its age indicating that the necessary updates were made to align the documentation with the current implementation,0,0,0,1,1,0,0
The documentation build for Spring Data MongoDB needs fixes as identified in DATAMONGO 1153 https jira spring io browse DATAMONGO 1153 Key issues include the JConsole image which must be relocated to an images folder for proper rendering in EPub and PDF formats Additionally the section on auditing configuration should be reordered to follow the common auditing documentation import These issues affect version 1 7 M1 Fowler and 1 6 2 Evans SR2 and have been backported to version 1 6 3 Evans SR3 Oliver Drotbohm opened and commented on the need for these adjustments,0,0,0,1,1,0,0
The issue DATAMONGO 1137 opened by Christoph Strobl addresses the need to store geometric types such as Point Polygon and others from sd commons in GeoJSON format Examples of GeoJSON structures for Point LineString and Polygon are provided showcasing their respective coordinate formats The task involves ensuring that both legacy and GeoJSON formats can coexist potentially through a configuration flag to enable or disable this feature which would add converters based on the configuration The issue is linked to other tasks like DATAMONGO 626 and is currently on hold until the completion of DATAMONGO 1135,0,0,0,1,1,0,0
The Cross Store plugin documentation for Spring Data MongoDB has several inaccuracies that haven t been updated since RC1 Key issues include incorrect constructor arguments for MongoTemplate and incorrect class names such as MongoDocumentBacking and MongoChangeSetPersister Additionally the AspectJ plugin version should be upgraded from 1 0 to 1 7 requiring the addition of complianceLevel 1 6 complianceLevel in the documentation to prevent failures These issues affect versions 1 5 2 1 5 4 1 6 GA and 1 6 1 Despite these errors cross store support has been deprecated and no further changes are planned,0,0,0,1,1,0,0
To improve the documentation for alias usage in the aggregation framework of Spring Data MongoDB it was suggested to enhance the JavaDoc for the Fields field method which allows explicit alias definition Additionally the reference documentation should be checked for completeness regarding this feature This update affects version 1 6 1 Evans SR1 and was backported to version 1 6 2 Evans SR2 The issue tracked as DATAMONGO 1082 was linked to a pull request on GitHub and relates to a problem discussed on Stack Overflow Oliver Drotbohm initially opened the issue and Thomas Darimont later commented on it emphasizing the need for documentation revisions,0,0,0,1,1,0,0
The documentation issue DATAMONGO 1074 highlights confusion in the sample documentation for Query methods in Spring Data MongoDB Specifically there s an example where findByFirstnameNotNull incorrectly queries on age instead of firstname returning age ne null Additionally the Meta annotation uses maxExcecutionTime with a typo suggesting it should be maxExecutionTimeMs for clarity These errors were addressed as noted by Mark Paluch with fixes linked to DATACMNS 1132 and a related pull request These clarifications aim to improve the accuracy and understanding of the documentation for users,0,0,0,1,1,0,0
Lucas Pouzac suggested adding a retry mechanism to Spring Data MongoDB using Spring Retry The proposal involves integrating retry logic into MongoTemplate methods particularly for read only operations like findAll group aggregate mapReduce geoNear findOne exists find findById and count By default the retry count would be set to zero but it could be configured as needed This feature aims to enhance resilience against failures such as those occurring during primary re elections in MongoDB The idea was discussed in the context of version 1 6 RC1 Evans,0,0,0,1,1,0,0
I m unable to access external documents directly However if you provide specific content or details from the documentation you want summarized I d be happy to help,0,0,0,1,1,0,0
Phillip Wirth reported difficulties in understanding how MapReduce functions with Spring MongoDB specifically when using mongoTemplate mapReduce The issue involved the map function not being called as expected The original map js used a named function which did not execute properly Changing it to an anonymous function resolved the issue Wirth suggested improving the documentation with examples to clarify this behavior Mark Paluch acknowledged the delay in response and informed that documentation was updated in August 2014 providing a reference link to the current documentation This update aims to assist users by providing clearer guidance on implementing MapReduce with Spring MongoDB,0,0,0,1,1,0,0
The org springframework data mongodb core mapping Field annotation in Spring Data MongoDB is intended to map Java fields or accessor methods to fields in a MongoDB document However its behavior is not clearly documented particularly regarding its use on methods This ambiguity leads to confusion about whether a Java field is necessary if the Field annotation is used on a getter and how it interacts with transient fields The ticket suggests a need for improved documentation to clarify these aspects The annotation is meant to associate a MongoDB document field with a Java property regardless of whether it s applied to a field or accessor method,0,0,0,1,1,0,0
MongoDB 2 6 introduces text search capabilities using the text operator The TextCriteria class allows the creation of CriteriaDefinition for use with Query This enables searches like Default language search TextCriteria forDefaultLanguage matching coffee Specific language search TextCriteria forLanguage es matching leche Complex queries with exclusions TextCriteria forDefaultLanguage matchingAny bake coffee notMatching cake Additionally TextQuery can handle preformatted strings such as searching for ssl certificate authority key There s a need for sorting based on textScore as shown in the example using the meta projection The feature branch for text search is available for feedback on GitHub with repository support in progress,0,0,0,1,1,0,0
The GitHub documentation for Spring Data MongoDB incorrectly references the class org springframework data document mongodb MongoTemplate which does not exist It seems the intended reference was to org springframework data mongodb core MongoTemplate Phillip Wirth reported this issue under DATAMONGO 849 https jira spring io browse DATAMONGO 849 and Oliver Drotbohm confirmed the error stating it should be corrected,0,0,0,1,1,0,0
The issue DATAMONGO 847 opened by Christoph Strobl suggests enhancing the Spring Data MongoDB framework to allow the use of Criteria within Update operations This would enable developers to create more precise and detailed update statements An example given is the ability to pull elements from an array based on specific conditions such as new Update pull xyz where id is 1 This enhancement would provide greater flexibility and control over database operations The feature has been referenced in a pull request and backported to version 1 4 3 Codd SR3 of the framework,0,0,0,1,1,0,0
The issue DATAMONGO 839 highlights the need to improve documentation on defining field specifications in Spring Data MongoDB Currently the reference documentation mentions field specs only briefly in two sections making it difficult for users to find and understand this feature The suggestion is to provide a more comprehensive explanation to enhance discoverability Additionally the JavaDoc for the Query class requires refinement to better support developers This documentation improvement affects versions 1 3 3 Babbage SR2 and 1 4 RC1 Codd and is linked to a broader documentation overhaul under DATAMONGO 856,0,0,0,1,1,0,0
The issue DATAMONGO 713 https jira spring io browse DATAMONGO 713 redirect false was opened by Oliver Drotbohm https jira spring io secure ViewProfile jspa name olivergierke to address typos in the readme md file of the Spring Data MongoDB project This ticket serves as a reference for a specific commit linked to a pull request aimed at correcting these typos The associated pull request can be viewed here https github com SpringSource spring data mongodb pull 47 and the changes were committed in this commit https github com spring projects spring data mongodb commit 567a8d9d5b4057d0d3fc82b02611072e7ca06eac,0,0,0,1,1,0,0
The issue DATAMONGO 618 https jira spring io browse DATAMONGO 618 redirect false was reported by Gordon Dickens https jira spring io secure ViewProfile jspa name gordonad regarding a missing header in the Spring Data MongoDB Reference PDF The header on the second page incorrectly displayed the message please define productname in your docbook file This affected version 1 2 GA of the documentation The issue has since been resolved as noted by Mark Paluch https jira spring io secure ViewProfile jspa name mp911de who confirmed the fix and closed the ticket,0,0,0,1,1,0,0
The issue DATAMONGO 589 https jira spring io browse DATAMONGO 589 redirect false addresses improving the reference documentation for using Value to customize constructor argument injection in Spring Data MongoDB It was initially opened by Oliver Drotbohm https jira spring io secure ViewProfile jspa name olivergierke The problem related to discrepancies between constructor argument variable names and instance variable names This documentation update was necessary to clarify proper usage and to prevent confusion among developers The issue also linked to DATAMONGO 365 https jira spring io browse DATAMONGO 365 which involved deprecated functions in the reference documentation Christoph Strobl https jira spring io secure ViewProfile jspa name cstrobl later commented that the issue had been resolved in recent years and was no longer relevant for the current master branch,0,0,0,1,1,0,0
The Javadoc for a specific project has incorrect or missing parameter names causing errors in IntelliJ highlighted in red This issue was reported by Philipp Schneider under the identifier DATAMONGO 567 It affects version 1 1 1 Christoph Strobl later closed the issue due to inactivity but suggested that it could be reopened if further comments or details were provided Oliver Drotbohm also requested more specific information about the problematic parameters,0,0,0,1,1,0,0
John Kern reported a typo in the Spring Data MongoDB documentation where using was misspelled as usiing The typo was located in the section discussing alternatives to Map Reduce for data aggregation specifically referring to the MongoDB group operation This issue affects versions 1 0 2 and 1 1 M1 The typo has been corrected in the following commits 90240a8 https github com spring projects spring data mongodb commit 90240a8da5a9e86a140558f46d4c847cf2970cc1 and 7a9ba3f https github com spring projects spring data mongodb commit 7a9ba3fe3e8fbefe77a7d55245006a40d62f1335,0,0,0,1,1,0,0
John Kern reported broken links in the Spring Data MongoDB reference documentation The issue was identified using a link validator which found seven incorrect URLs These URLs mistakenly pointed to non existent pages due to a missing html directory in their paths The correct URLs should include this directory as shown in the website s structure To resolve the problem the URLs in spring data mongodb src docbkx introduction introduction xml were updated accordingly These changes were committed to the repository ensuring all links now correctly direct to the intended documentation pages,0,0,0,1,1,0,0
In Spring Data MongoDB there is an inconsistency between the official documentation and the XSD files spring mongo 1 0 xsd and spring mongo 1 1 xsd The XSD falsely claims that the mongo ref attribute in the mongo db factory element defaults to mongo suggesting that it will automatically reference any existing mongo mongo element if unspecified In reality the documentation clarifies that you must explicitly declare the mongo ref when another Mongo instance with advanced configurations is needed The XSD should be revised to accurately reflect that the mongo ref attribute must be set for more complex configurations rather than implying a default behavior that doesn t exist This issue affects versions 1 0 1 and 1 1 M1 and has been referenced in specific commits to the Spring Data MongoDB repository,0,0,0,1,1,0,0
In DATAMONGO 455 Sejal Patel highlighted the challenge of performing complex queries in Spring Data MongoDB and proposed a method for converting raw JSON queries into Criteria objects The provided code snippet demonstrates how to parse a JSON string into a DBObject and create corresponding Criteria objects allowing for complex queries like filtering by salary range and name patterns Oliver Drotbohm responded that such functionality has existed in the framework via BasicQuery which allows raw JSON queries directly He acknowledged the lack of documentation on BasicQuery and suggested enhancing the documentation to make this feature more discoverable as users were unaware of its existence despite searching through various resources,0,0,0,1,1,0,0
The issue DATAMONGO 384 involves improving the mapping documentation for a Spring MongoDB project Key points include updating sections 7 3 5 and 7 2 and moving section 5 9 into the Mapping section There s a need for better explanation of base package attributes in mapping converter and custom converters The task is linked to other documentation related issues like DATAMONGO 856 and DATAMONGO 2509 which focus on a documentation overhaul and polishing for a new release Additionally changes in section ordering over the years have made some references difficult to locate,0,0,0,1,1,0,0
The issue DATAMONGO 261 was opened by Oliver Drotbohm regarding the reference documentation for geoNear queries in Spring Data MongoDB The problem highlighted is the absence of a stable section ID which impacts the accessibility and usability of the documentation This issue affects version 1 0 M4 The lack of stable identifiers can lead to difficulties in linking directly to specific sections hindering efficient navigation and reference Addressing this would improve the documentation s structure making it more user friendly for developers working with geospatial queries in MongoDB,0,0,0,1,1,0,0
The M4 documentation incorrectly specifies SD Commons 1 1 0 M1 as a requirement when it actually needs 1 2 0 M1 This issue opened by Sergey Kling highlights that the MongoParameters class in Spring Data MongoDB extends a final class causing compatibility issues Oliver Drotbohm noted the M4 s pom xml correctly lists 1 2 0 M1 as a dependency questioning the reliance on 1 1 0 RELEASE Kling acknowledged the problem was resolved with 1 2 0 M1 noting the confusion arose from using pre built libraries without reviewing the pom xml The documentation s incorrect dependency led to significant troubleshooting time suggesting a need for clearer documentation,0,0,0,1,1,0,0
The Enforcer plugin encounters a dependency convergence failure due to different versions of the classgraph library being included in the project Specifically the dependency io github classgraph classgraph jar 4 8 147 is included through neo4j migrations while io github classgraph classgraph jar 4 8 108 is brought in via querydsl codegen and codegen utils Both paths originate from spring data neo4j This discrepancy arises because of conflicting transitive dependencies which can lead to runtime issues if not resolved It s essential to align the versions to ensure consistent behavior across the application,1,0,1,0,0,0,0
Marcos Stival reported an issue DATAGRAPH 1443 regarding a 404 error when accessing the Spring Data Neo4J 6 0 1 API documentation Gerrit Meier responded acknowledging the issue and stating that the API docs have been manually created and are now accessible The problem was fixed for future builds through a linked GitHub issue ensuring that similar issues won t occur again,0,0,1,1,0,0,0
To improve support for methods returning a Slice in Spring Data Neo4j adjustments are needed for handling Pageable objects in custom queries Unlike JPA where pagination can be automatically managed Cypher queries require manual insertion of skip and limit parameters The discussion highlights the need for dynamic sorting and pagination without a count query emphasizing that Slice should inherently manage pagination without requiring total count computation The proposal includes using custom SpEL functions for dynamic pagination and sorting allowing for more flexible query customization The goal is to streamline this process to avoid rewriting queries and to maintain efficiency especially in large projects with numerous API queries Overall the emphasis is on enhancing usability and maintaining compatibility with existing practices in Spring Data Neo4j,0,0,1,1,0,0,0
The issue DATAGRAPH 1402 https jira spring io browse DATAGRAPH 1402 was opened by hantsy due to the unavailability of the spring boot starter data neo4j version 6 0 0 SNAPSHOT artifact in the Spring repositories Gerrit Meier clarified that no extra starter is required if using the Spring Data Neo4j initializer and suggested defining the starter without a specific version to match the Spring Boot version Additionally he emphasized adding the milestone repositories in the pom xml to access these versions The issue was resolved in DATAGRAPH 1414 https jira spring io browse DATAGRAPH 1414 and further instructions were provided to check the milestone repository for available artifacts Hantsy noted that artifacts mentioned in the documentation were still missing in the repositories,0,0,1,1,0,0,0
The testing chapter for machine learning needs updating to align with changes in SDN 6 The spring data neo4j spring boot test autoconfigure artifact and ReactiveDataNeo4jTest are no longer available Testing support now falls under spring boot test and spring boot autoconfigure It s essential to adjust dependencies remove mentions of the reactive test slice and update references to the old driver starter The test harness should be simplified noting that JDK 8 supports Test Harness 3 5 no multi db or reactive while JDK 11 supports Test Harness 4 x The update should include examples for Harness 3 5 Harness 4 x and test containers using the Spring Boot 2 2 6 method for injecting properties An additional example should demonstrate the old property injection method for compatibility,0,0,1,1,0,0,0
Michael Simons opened issue DATAGRAPH 1368 to address a documentation error in the Spring Data Neo4j project The existing documentation incorrectly references version 3 1 x instead of the correct 3 2 x This issue affects versions 5 1 19 Lovelace SR19 5 2 9 Moore SR9 and 5 3 3 Neumann SR3 The fix has been backported to versions 5 2 10 Moore SR10 and 5 1 20 Lovelace SR20 to ensure the documentation reflects the correct version references,0,0,1,1,0,0,0
The issue described in DATAGRAPH 1032 involves the Spring Data Neo4j SDN version 4 2 documentation mistakenly embedding Object Graph Mapping OGM documentation from the master branch OGM 3 instead of the correct 2 1 branch This affects version 4 2 7 Ingalls SR7 of SDN potentially leading to discrepancies or confusion for developers referencing the documentation Nicolas Mervaillie reported this issue highlighting the need for alignment between the SDN documentation and the appropriate OGM version it supports,0,0,1,1,0,0,0
In the Spring Data Neo4j documentation for version 3 2 0 RELEASE there was a potentially incorrect Cypher query example for a friend recommendation system The original query aimed to find likeminded users who rate the same movies highly and are also friends but it did not exclude current friends The suggested correction involves using an optional match to exclude users who are already friends ensuring the recommendation only includes new potential connections The corrected query checks for users who like similar movies but are not yet friends enhancing the recommendation s relevance This issue was acknowledged and addressed in the documentation by Michael Hunger,0,0,1,1,0,0,0
In the issue DATAGRAPH 456 Craig Walls noted that Example 21 12 in the Spring Data Neo4j documentation for version 3 0 1 Codd SR1 contains errors The example pertains to Java configuration using XML and requires correction Michael Hunger responded by updating the documentation to address these inaccuracies The issue and its resolution are documented in the project s commits specifically at commit ca3481b5e4503cb6205e26d0e83e70959b4e33ca The documentation is intended to guide users in setting up Spring Data Neo4j and the reference URL provides access to the relevant section,0,0,1,1,0,0,0
The issue discussed in DATAGRAPH 317 highlights an inconsistency in the Javadoc for the RelatedTo annotation which states that elementClass must be specified for fields that are collections However examples and documentation didn t adhere to this and tests showed no difference in behavior whether elementClass was specified or not The necessity of specifying elementClass was questioned indicating potential redundancy The problem was addressed and resolved in the documentation as of version 2 2 where the Javadocs were corrected allowing the issue to be closed,0,0,1,1,0,0,0
Spring Data Neo4j uses internal indexing with a specific structure to manage nodes and relationships For nodes there s an index called types which maps the node ID to its full Java classname annotated with NodeEntity This index helps in identifying and managing node entities efficiently Additionally there is a relationship index named rel types although its structure wasn t detailed in the original documentation Understanding these structures is essential for users who wish to interact with the Neo4j database outside of the Spring Data APIs such as through REST API access This information is crucial for data integration and modification tasks The issue regarding this documentation was eventually closed as it was considered outdated but the need for clarity remains for those working with older versions,0,0,1,1,0,0,0
In the context of using a model with an inheritance tree in Spring Data Neo4j it is necessary to add a constructor like ExtendedModel Long graphId to the subclass This ensures that ModelRepository findBy returns instances of the subclass rather than the base class If this constructor is missing it defaults to returning instances of the base class Model The question arises whether Spring could automatically add this constructor and if not it should be documented as a requirement Alternatively an exception should be thrown if a subclass is saved without the necessary constructor The issue was opened in SDN version 2 0 M1 and was part of a bulk closure of issues deemed irrelevant to current versions However it seems the constructor should actually be ExtendedModel Node node to properly set the node ID There are discrepancies in behavior between local code and SDN tests indicating possible undocumented complexities,0,0,1,1,0,0,0
In a Spring Data Neo4j project excessive depth in entity loading was causing performance issues as queries were unintentionally traversing the entire graph including unnecessary relationships The attempt to use projection interfaces to mitigate this problem was ineffective as the library continued fetching all related entities The goal was to retrieve only a single level of nodes but due to the inheritance and relationships defined in the NodeWithChild and NodeWithoutChild interfaces the queries were overly broad A feature update in version 6 2 0 M3 introduced cyclic projection mapping addressing this issue by preventing broad query creation thus reducing data loading to only the necessary nodes This fix is pending further validation in the upcoming release to confirm if it resolves the too many requested data problem without additional limitations,0,0,1,0,1,0,0
The upgrade to Neo4j OGM 3 2 17 addresses issues in Spring Data Neo4j versions 5 2 10 Moore SR10 and 5 3 4 Neumann SR4 This update was initiated by Michael Simons and backported to version 5 2 11 Moore SR11 The changes aim to improve the integration and performance of Neo4j OGM within the Spring ecosystem ensuring better compatibility and stability across affected versions This upgrade is part of ongoing maintenance to enhance the functionality and reliability of data handling in applications using Neo4j,0,0,1,0,0,0,1
The upgrade to Neo4j OGM 3 2 4 addresses issues in versions 5 3 M1 Neumann and 5 2 3 Moore SR3 of Spring Data Neo4j The update referenced in a pull request on GitHub aims to improve performance and compatibility with newer database features This upgrade is part of ongoing efforts to ensure that Neo4j s object graph mapping capabilities are robust and up to date providing better integration and support for developers working with graph databases in Java applications,0,0,1,0,0,0,1
The upgrade to Neo4j OGM 3 0 3 for Spring Data Neo4j version 5 0 3 Kay SR3 addresses improvements and bug fixes This update referenced by several commits ensures better integration and performance for applications using the Neo4j graph database The changes are part of ongoing efforts to maintain compatibility and enhance the functionality of Spring Data Neo4j providing developers with a more robust framework for managing graph data,0,0,1,0,0,0,1
The issue DATAGRAPH 1058 opened by Franti ek Hartman involves upgrading Neo4j OGM to version 2 1 6 within the 4 2 x branch of the Spring Data Neo4j project The update is referenced in a specific commit on the project s GitHub repository This upgrade is aimed at improving compatibility and performance ensuring the integration of the latest features and bug fixes provided by Neo4j OGM The change is part of ongoing efforts to maintain and enhance the Spring Data Neo4j library,0,0,1,0,0,0,1
When migrating from OGM to SDN 6 0 5 an issue might arise with the ConvertWith annotation when used for mapping properties This error such as java lang IllegalStateException Required identifier property not found can occur if ConvertWith is incorrectly applied The provided code shows a DomainOne class with a DomainTwo object converted using DomainTwoConverterClass However for mapping properties like a boolean or a long use CompositeProperty with a DomainTwoCompositePropertyConverter instead This approach aligns with Neo4j OGM s CompositeAttributeConverter and avoids prefix issues during migration Additionally ensure correct implementation of GeneratedValueStrategy for ID generation using a pattern for random alphanumeric strings,0,0,0,1,1,0,0
The issue DATAGRAPH 1421 https jira spring io browse DATAGRAPH 1421 was opened by Michael Simons to address problems in the reference documentation for Spring Data Neo4j The documentation contains several unresolved includes and a few errors in the API docs This affects version 6 0 GA 2020 0 0 and has been backported to version 6 0 1 2020 0 1 The goal is to fix these issues to ensure accurate and complete documentation for users,0,0,0,1,1,0,0
Support for configuring SDN 6 in a CDI context has been requested to maintain functionality previously available even though it wasn t highly sophisticated or optimal for a Spring based framework Users have been utilizing this capability and reintroducing it requires moderate effort The goal is to ensure this feature is available before the final release This enhancement is tracked under DATAGRAPH 1358 https jira spring io browse DATAGRAPH 1358 and is associated with the 6 0 M2 milestone The discussion and work on this can be found in the related GitHub pull request https github com spring projects spring data neo4j pull 523,0,0,0,1,1,0,0
Michael Simons opened a discussion on improving the documentation for OpenSessionInViewFilter in Spring Data Neo4j He noted that the current documentation implies that using OpenSessionInViewFilter is necessary for web applications which can lead to issues in clustered environments To address these concerns he suggested removing this implication from the documentation The issue affects versions 5 1 15 5 2 4 and 5 3 M3 and changes have been backported to versions 5 2 5 and 5 1 16 This update is crucial to prevent potential problems in setups where multiple servers are involved as detailed in his blog and related GitHub discussions,0,0,0,1,1,0,0
Michael Simons opened DATAGRAPH 1196 to improve documentation for Spring Data Neo4j This initiative references a specific pull request and commits aimed at enhancing the clarity and usability of the documentation The improvements were also backported to version 5 1 6 Lovelace SR6 to ensure consistency across versions These updates are part of ongoing efforts to provide better guidance and support for developers working with Spring Data Neo4j,0,0,0,1,1,0,0
In the JIRA issue DATAGRAPH 1187 Michael Simons identified the need to update links from springsource org to spring io within the project documentation for the Spring Data Neo4j This change ensures that all references point to the current and correct domain improving accessibility and accuracy of the documentation The update is part of a commit to the Spring Data Neo4j project as referenced by the commit hash 758ec489334b9120546a2fe4f3b8022b901190ff Such maintenance tasks are crucial for keeping project resources up to date and aligned with the evolving structure of the Spring ecosystem,0,0,0,1,1,0,0
Michael Simons opened DATAGRAPH 1181 https jira spring io browse DATAGRAPH 1181 redirect false to address minor typos in the README for the Spring Data Neo4j project This issue references a pull request https github com spring projects spring data neo4j pull 450 and a commit https github com spring projects spring data neo4j commit 1c17059d9b1c333171f59b1457259aaf0b83bf6e which aim to improve the documentation by correcting these errors The changes enhance the clarity and accuracy of the project documentation ensuring that users have a better understanding of the content without being distracted by typographical mistakes,0,0,0,1,1,0,0
Mark Paluch opened DATAGRAPH 1167 to simplify the reference documentation setup for Spring Data projects The task involves removing common properties from index adoc since these properties are now included in the Spring Data Build This change aims to streamline the documentation process by centralizing property definitions reducing redundancy The issue is linked to DATACMNS 1442 which also focuses on simplifying the documentation setup A related commit can be found in the Spring Data Neo4j repository,0,0,0,1,1,0,0
EnableNeo4jAuditing is an annotation used in Spring Data Neo4j to enable auditing support It automatically populates auditing fields such as creation and modification timestamps on entities This feature is crucial for tracking changes and maintaining a history of data modifications within a Neo4j database The feature was introduced in Spring Data Neo4j versions 5 0 10 Kay SR10 and 5 1 GA Lovelace and has been backported to versions 5 1 1 and 5 0 11 The implementation details are discussed in pull requests and commits linked to the project s GitHub repository These enhancements ensure that Neo4j applications can efficiently manage audit trails improving data integrity and traceability,0,0,0,1,1,0,0
The issue DATAGRAPH 1130 was opened by Michael Simons to address problems with JavaDoc documentation for the EnableNeo4jAuditing feature in Spring Data Neo4j This affected versions 5 0 10 Kay SR10 and 5 1 GA Lovelace and was subsequently backported to version 5 0 11 Kay SR11 The goal was to improve the clarity and accuracy of the JavaDoc to ensure developers can effectively implement and utilize Neo4j auditing capabilities This update is part of ongoing efforts to enhance documentation and user experience in Spring Data projects,0,0,0,1,1,0,0
The issue DATAGRAPH 1125 https jira spring io browse DATAGRAPH 1125 was opened by Michael Simons to clarify the requirements for EnableBookmarkManagement in Spring Data Neo4j It affects versions 5 1 RC2 Lovelace and 5 0 10 Kay SR10 and has been backported to 5 0 11 Kay SR11 The discussion and changes are referenced in a pull request and several commits on GitHub highlighting the need for better documentation and understanding of how to enable and use bookmark management effectively within the framework This feature is crucial for ensuring transaction consistency and stability when working with Neo4j databases,0,0,0,1,1,0,0
Michael Simons opened DATAGRAPH 1118 regarding a need to fix dependencies in the Getting Started Guide for Spring Data Neo4j This issue affects versions 5 0 9 Kay SR9 and 5 1 RC2 Lovelace The problem was referenced in a pull request and addressed in specific commits to the Spring Data Neo4j repository The fixes were also backported to version 5 0 10 Kay SR10 The changes ensure that the guide provides accurate and up to date information on dependencies improving the onboarding process for new users,0,0,0,1,1,0,0
Franti ek Hartman opened DATAGRAPH 1050 to address potential conflicts with Jetty versions affecting Spring Data Neo4j specifically version 5 0 1 Kay SR1 The issue is referenced in commits 8115260 and bf9cd0b highlighting compatibility concerns that could arise due to differing Jetty dependencies These conflicts could impact the stability and functionality of applications using this setup necessitating careful management of the Jetty version to ensure consistent behavior across environments,0,0,0,1,1,0,0
The request for an auto increment feature for Long or Integer types in the context of Neo4j was discussed in DATAGRAPH 807 https jira spring io browse DATAGRAPH 807 David Vincent suggested adding this feature but Mark Angrish pointed out that it is more of a database feature than something for the Object Graph Mapping OGM tool He advised using UUIDs along with the Index unique true primary true annotation to ensure unique identifiers for entities The provided example demonstrates using a UUID as the primary key while the GraphId is used internally by Neo4j This approach offers a way to uniquely identify each entity without relying on auto increment functionality,0,0,0,1,1,0,0
I m unable to directly access external content such as JIRA tickets or specific commits However if you provide details or key points from the documentation I can help you summarize them for machine learning purposes,0,0,0,1,1,0,0
The new TypeSafetyPolicy for queries in Spring Data Neo4j introduces handling for type safety affecting methods like deleteAll When the policy is set to options like THROW EXCEPTION or RETURN NULL developers encounter exceptions related to entity types during operations For instance an InvalidEntityTypeException occurs when attempting to delete or project entities that don t match the expected types highlighting issues with type inheritance and auto projection Users have reported challenges with the policy not accommodating type hierarchies leading to difficulties in scenarios where entities are expected to be treated as their base types This ongoing issue suggests a need for improved documentation and handling of type inheritance in queries,0,0,0,1,1,0,0
The issue reported involves the Good Relationships PDF on InfoQ which is unusually large at 138MB compared to the ePub version of about 4MB This size discrepancy caused problems for users such as crashing PDF readers and resulted in a negative first impression The problem was highlighted in a JIRA ticket by Johannes Mockenhaupt who suggested updating the book with an upcoming release Michael Hunger noted that within the build process the generated PDF is only 1 7MB indicating a possible error in the version uploaded to InfoQ This suggests that fixing the file size issue could significantly improve user experience,0,0,0,1,1,0,0
The issue DATAGRAPH 197 was opened by Alberto Gonzalez addressing the lack of support for OR queries in autogenerated finder methods in Spring Data Neo4j This limitation results in an UnsupportedOperationException Gonzalez requested documentation on workarounds or implementation of the feature However Nicolas Mervaillie later commented that many issues are being closed as they pertain to outdated versions of Spring Data Neo4j Relevant feature requests remain open but some might have been closed mistakenly and can be reopened if necessary,0,0,0,1,1,0,0
The documentation for repository composition in Spring Data lacks clarity regarding its reliance on naming conventions For example when defining a repository like PersonRepository that extends an interface such as PersonRepositoryExtension the implementing class must be named PersonRepositoryImpl rather than PersonRepositoryExtensionImpl This naming requirement is crucial for the proper functioning of custom implementations The issue was raised in the context of Spring Data Commons which provides detailed documentation on this topic Additionally outdated issues related to old Spring Data Neo4j SDN versions have been closed to maintain relevance although some critical feature requests remain open for further attention,0,0,0,1,1,0,0
In the Spring Data Neo4j documentation there s a noted lack of examples for Query methods which complicates integrating Cypher queries with SDN repositories Mark Spritzler highlighted this issue emphasizing the need for practical examples showing how to incorporate parameters into queries using the Query annotation Specific scenarios include using node types node IDs strings with indexes parameters in the WHERE clause and multiple parameters in different query parts Spritzler suggested adding these examples to section 20 8 4 4 of the documentation to enhance clarity and usability He also mentioned writing examples locally and was exploring how to submit a pull request to integrate them into the official docs This effort aims to bridge the gap between Neo4j documentation and SDN repositories making it easier for developers to implement complex queries,0,0,0,1,1,0,0
The update for DATAGRAPH 115 involves splitting up the library and adding several new features These include non AJ mapping capabilities support for duplicate relationships and the introduction of an Indexed annotation for level indexing Additionally there are enhancements to the return types of traversals and support for new Cypher syntax with parameters These changes affect version 2 0 and have been fully updated as noted by Michael Hunger,0,0,0,1,1,0,0
Michael Hunger opened issue DATAGRAPH 93 to enhance build support by adding sample build scripts and plugins for various systems A Gradle plugin was introduced in src build gradle and sample scripts for Ant Ivy were added to src build ivy These additions aim to improve flexibility and ease of use for developers working with different build tools The changes affect version 1 1 M1,0,0,0,1,1,0,0
The issue DATAGRAPH 82 involved fixing the docbkx build to ensure images were included in the PDF output Thomas Risberg initially reported the problem which required addressing compatibility issues between Maven and the docbkx plugin Michael Hunger later commented that the issue was resolved after extensive troubleshooting This fix was crucial for maintaining visual elements in the documentation enhancing the overall quality and completeness of the generated PDFs,0,0,0,1,1,0,0
The lifecycle of Spring Data Graph SDG entities involves understanding when entities are persisted how transactions are created or participated in and when modifications may fail Developers need this knowledge to accurately describe application behaviors The lifecycle explanation should be included as part of the tutorial focusing on the transition of entities from a detached state and detailing transaction management This ensures that developers can effectively manage entity states and handle exceptions in their applications The documentation should provide a comprehensive chapter on detached entities within the reference materials,0,0,0,1,1,0,0
In the tutorial section on handling relationships it is crucial to clearly explain the methods for relating entities in data graphs Developers often encounter multiple approaches and may be unsure about the best one to implement Providing a comprehensive guide will enable them to efficiently add and manage relationships within their domain models This involves detailing the pros and cons of each method offering practical examples and clarifying common pitfalls Ensuring that these explanations are accessible will help developers make informed decisions and effectively utilize relationship features in their projects,0,0,0,1,1,0,0
The task involves enhancing the README txt for Spring Data Graph to provide meaningful information beyond its current empty state The update should include a Getting Started section that guides users on how to begin using Spring Data Graph Additionally it should specify the Maven repository locations necessary for obtaining the required dependencies This enhancement aims to eliminate the GitHub warning about the empty file and improve the user experience by offering practical guidance and resources,0,0,0,1,1,0,0
In the provided code the createdDate and lastModifiedDate fields are not being populated for new versioned entities due to an issue with how optimistic locking interacts with auditing The entity is initially prepared for insertion but when the version is incremented the auditing callback incorrectly identifies the entity as not new preventing the createdDate from being set This issue was identified and fixed in recent updates and testing with the latest snapshots shows the problem resolved However similar issues may still arise in other PostgreSQL based examples where the creation event is not triggered indicating further investigation may be needed,0,1,1,0,0,0,0
The NoSuchMethodError in RowMetadataUtils occurs when using R2DBC 0 9 because version 1 4 0 is compiled with r2dbc spi 0 8 5 making it incompatible with 0 9 x versions of r2dbc spi and r2dbc postgresql To address this issue while using updated PostgreSQL drivers you can pin spring data r2dbc to version 1 3 6 The goal of versions 1 4 x and above is to utilize newer implementations To resolve the bytecode incompatibility dependencies should be updated to build with newer R2DBC libraries Additionally RowMetadataUtils should be modified to reflectively call getColumnMetadatas ensuring compatibility and preventing errors,1,0,0,0,1,0,0
When updating Spring Boot from 2 5 1 to 2 5 2 along with Spring Data R2DBC from 1 3 1 to 1 3 2 a problem arose with retrieving LocalDate directly from a ReactiveCrudRepository query The SQL table schema includes an id and a date column The repository query using Query SELECT MAX date FROM test table intended to return a Mono LocalDate worked in the previous version but now throws a MappingException The error indicates that Spring Data cannot find a PersistentEntity for LocalDate which suggests an issue with how the new version handles simple types in reactive queries As a workaround consider mapping the query result to a supported type or using a DTO,1,1,0,0,0,0,0
The unresolved references in the documentation for observability in Spring Data Redis indicate missing or improperly linked files specifically conventions adoc metrics adoc and spans adoc These directives suggest that the documentation is intended to include detailed sections on conventions metrics and spans related to observability features The absence of these files means that the documentation may lack crucial information potentially leading to gaps in understanding the observability capabilities and configurations within the framework Properly resolving these references would ensure comprehensive guidance on implementing and utilizing observability in Spring Data Redis applications,0,0,1,1,0,0,0
A typo was identified in the Javadoc of org springframework data redis core RedisTemplate setDefaultSerializer The documentation incorrectly used the word expect instead of except in the phrase All serializers expect the This was corrected to All serializers except the The issue tracked as DATAREDIS 1105 was reported by user aldobongio and subsequently fixed The correction was backported to versions 2 2 5 Moore SR5 and 2 1 16 Lovelace SR16 of the Spring Data Redis project Mark Paluch acknowledged the fix in a comment,0,0,1,1,0,0,0
In Spring Data Redis the RedisAtomicInteger constructor initializes a Redis key with a given initialValue even if the key already exists This behavior was unexpected for users who assumed the key would be preserved if it existed The constructor logic unconditionally sets the key to the initialValue leading to the key being reset to zero every time the application starts regardless of the key s prior existence This has been identified as either a bug in the code or a mistake in the documentation The issue affects version 2 2 3 and has been backported to later versions The documentation needs updating to clarify that the initialValue will overwrite any existing key value,0,0,1,1,0,0,0
The issue DATAREDIS 1070 was opened to correct a comment in the Spring Data Redis library It involved the ZSetOperations reverseRangeByScore method which should correspond to the Redis command zrevrangebyscore rather than zrevrange The fix affects version 2 2 2 Moore SR2 and has been backported to versions 2 2 3 Moore SR3 and 2 1 14 Lovelace SR14 The resolution was referenced in a pull request on GitHub,0,0,1,1,0,0,0
The issue DATAREDIS 1067 was opened by Mark Paluch highlighting incorrect arguments in the documentation for MappingConfiguration in the Spring Data Redis project This problem was discussed and referenced in a pull request on GitHub The fix was backported to versions 2 2 2 Moore SR2 and 2 1 13 Lovelace SR13 to ensure consistency and correctness across these releases The resolution aimed to enhance the accuracy of the documentation facilitating better understanding and utilization by developers,0,0,1,1,0,0,0
The issue DATAREDIS 1064 was reported by wqlm regarding incorrect comments for the rPush and lPush methods in the ListOperations class of the Spring Data Redis project Specifically the comments did not accurately describe the functionality of the leftPush K key V pivot V value and rightPush K key V pivot V value methods This discrepancy affected version 2 2 1 Moore SR1 and was referenced in a pull request aimed at correcting the comments The fix was backported to versions 2 2 2 Moore SR2 and 2 1 13 Lovelace SR13 to ensure consistency and clarity in documentation across these releases,0,0,1,1,0,0,0
The issue DATAREDIS 1060 was opened by Christoph Strobl to address a problem where Redis passwords were automatically applied to Sentinel which should not happen Instead it was proposed to introduce a separate property specifically for Sentinel authentication This issue affects version 2 2 1 of Spring Data Redis Related issues include DATAREDIS 1141 where the default Redis configuration failed to set the Sentinel password and DATAREDIS 1045 noting that Redis Sentinel authentication was not supported The changes were referenced in a pull request and backported to version 2 2 2 For more details see the linked GitHub and Jira references,0,0,1,1,0,0,0
A typo in the MessageListenerAdapter configuration example was identified where the XML tag constructor arg value chatroom was incomplete It should be properly closed as constructor arg value chatroom This issue affects versions 1 8 23 Ingalls SR23 and 2 2 GA Moore The correction has been backported to versions 2 2 1 Moore SR1 and 2 1 12 Lovelace SR12 The reference documentation is available here https docs spring io spring data data redis docs current reference html redis pubsub subscribe,0,0,1,1,0,0,0
The RedisCacheManager documentation contained an incorrect code example in version 2 1 3 as reported by Woojin Joe in issue DATAREDIS 915 The documentation in section 5 13 1 and the corresponding GitHub link showed a code snippet using initialCacheConfigurations which differed from the actual implementation in the source code The correct method name should be withInitialCacheConfigurations This discrepancy affected versions 2 1 3 and 2 0 13 but was later corrected in versions 2 1 5 and 2 0 14,0,0,1,1,0,0,0
In the Spring Data Redis project a typo was identified in the documentation link for the ValueOperations increment method This issue was reported by Mark Paluch under the identifier DATAREDIS 733 It affects version 1 8 8 Ingalls SR8 and was referenced in a pull request on GitHub The correction was backported to versions 2 0 2 Kay SR2 and 1 8 9 Ingalls SR9,0,0,1,1,0,0,0
The issue DATAREDIS 727 https jira spring io browse DATAREDIS 727 was opened by Kezhu Wang highlighting incorrect documentation for the RedisCacheManagerBuilder in Spring Data Redis The documentation incorrectly states that methods like cacheDefaults transactionAware initialCacheNames and withInitialCacheConfigurations return a new instance of RedisCacheManagerBuilder whereas the actual code returns the current instance this This discrepancy affects version 2 0 1 Kay SR1 and has been referenced in a pull request https github com spring projects spring data redis pull 292 The issue has been addressed and backported to version 2 0 2 Kay SR2,0,0,1,1,0,0,0
The libs release repository is mentioned in the README as the location for snapshot and nightly builds This setup allows developers to access the most recent updates and test new features in real time The repository is part of the Spring Data Redis project ensuring continuous integration and deployment processes are streamlined By leveraging these builds developers can experiment with the latest changes without waiting for official releases facilitating faster feedback and iteration cycles This approach enhances the overall development workflow and supports agile methodologies,0,0,1,1,0,0,0
In the Spring Data Redis project an issue was identified in the transaction reference documentation by Mircea Gaceanu The documentation lacked clarity and completeness particularly regarding the Transactional configuration Key improvements suggested include adding the EnableTransactionManagement annotation to the class which is crucial for managing transactions Additionally providing a clear example of a real TransactionManager definition was recommended as the existing DataSourceTransactionManager and DataSource examples were found to be confusing A minor typo was also noted where a comment line had an unnecessary line break before the word connection These changes aim to enhance the usability and accuracy of the documentation for better understanding and implementation of transactions in Spring Data Redis The issue affected version 1 8 GA Ingalls and was referenced in a pull request with backports to versions 2 0 7 and 1 8 12,0,0,1,1,0,0,0
A user reported an issue with integrating Spring Data Redis 1 7 1 with Spring 4 1 x noting it unexpectedly required Spring 4 2 x components The documentation didn t specify this dependency causing confusion They suggested updating the documentation or adjusting the pom xml to reflect accurate requirements Mark Paluch responded acknowledging the discrepancy and confirming plans to update the documentation to align with the actual Spring 4 2 5 baseline requirement The primary source for this dependency information is the pom xml file This clarification aims to prevent similar issues for other users,0,0,1,1,0,0,0
The issue DATAREDIS 1101 https jira spring io browse DATAREDIS 1101 redirect false highlights a gap in the Spring Data Redis documentation The documentation currently lacks instructions for including the spring boot starter data redis dependency in a Maven project when using Spring Data Redis SDR The user XSun discovered this information through an unofficial blog and suggests it should be readily available in the official documentation to save users the effort of searching externally Mark Paluch commented that this oversight pertains to Spring Boot rather than Spring Data Redis specifically However since similar dependencies are listed in other Spring Data documentation it s recommended to update the Spring Data Redis documentation to include this information This would ensure consistency and improve the user experience,0,0,0,1,1,0,0
The issue DATAREDIS 907 https jira spring io browse DATAREDIS 907 opened by Mark Paluch https jira spring io secure ViewProfile jspa name mp911de focuses on simplifying the reference documentation setup for Spring Data Redis The task involves removing common properties from index adoc because these properties are now managed within Spring Data Build This change aims to streamline the documentation process and ensure consistency across projects The issue is linked to DATACMNS 1442 https jira spring io browse DATACMNS 1442 which also addresses similar simplifications in documentation setup,0,0,0,1,1,0,0
In the Javadoc of RedisClusterConfiguration two configuration keys spring redis cluster timeout and spring redis cluster password are identified as unused Instead the cluster timeout and password are set using spring redis timeout and spring redis password in Spring Boot This issue affects versions 2 0 12 Kay SR12 and 2 1 3 Lovelace SR3 and is referenced in a pull request The changes have been backported to versions 2 0 13 Kay SR13 and 2 1 4 Lovelace SR4 The unused keys are noted in the context of configuration management within Spring s data Redis module,0,0,0,1,1,0,0
The improvement of repository operation documentation in Spring Data Redis as noted in DATAREDIS 741 involves providing more detailed information about the commands executed during repository operations Specifically these operations include save which involves looking up a key removing it and then inserting it back This enhancement aims to clarify the process and ensure better understanding and transparency for users The issue is linked to DATAREDIS 560 which addresses the save update operation s behavior of deleting and reinserting keys This documentation update has been backported to versions 2 0 10 Kay SR10 and 1 8 15 Ingalls SR15 and is referenced in a related pull request on GitHub,0,0,0,1,1,0,0
Spring Data Redis part of the IO Platform Cairo is one of the few projects still depending on Jackson 1 Andy Wilkinson suggested dropping support for Jackson 1 in the upcoming Kay release train Christoph Strobl confirmed that this change will be implemented aligning with modern practices and dependencies This move aims to streamline and update the project s dependencies ensuring better support and functionality,0,0,0,1,1,0,0
The issue in DATAREDIS 433 highlights a documentation gap regarding additional dependencies needed for specific serializers in Spring Data Redis Diego Magalhaes reported a compile error due to the missing jackson mapper asl dependency when using JacksonJsonRedisSerializer ShortenedURL Although this requirement is by design as noted by wilkinsona the documentation lacks clarity on this necessity Users need to manually add dependencies for serializers like Jackson which could be more explicitly stated in the documentation Diego suggested a simple note in the documentation to guide users on configuring their pom xml for non default serializers Oliver Drotbohm responded suggesting that such dependency management should be obvious but acknowledged the potential for documentation to become cluttered if every feature requiring third party dependencies were detailed extensively,0,0,0,1,1,0,0
The task DATAREDIS 336 https jira spring io browse DATAREDIS 336 initiated by Christoph Strobl involves transitioning to Asciidoctor for reference documentation in the Spring Data Redis project Greg Turnquist commented on the pull request stating that the Table of Contents remains consistent with past documents but changes can be made across all docs if needed The XSD file is now correctly included in the appendix and a new stylesheet by Ollie has been integrated This setup ensures that running gradlew docsZip generates a zip file with the Asciidoctor HTML and stylesheet eliminating DocBook content There are multiple commits in the PR and there is a discussion about whether to squash them Oliver Drotbohm mentioned that the branch is fixed and ready to be rebased onto master emphasizing the need to resolve minor issues promptly to avoid delaying the release,0,0,0,1,1,0,0
The task involves adding support for Redis Sentinel to enable connection to the current master node in the Spring Data Redis project Redis Sentinel provides high availability and monitoring for Redis instances Implementing this requires taking into account client side configurations as outlined in Redis Sentinel s client implementation guidelines This enhancement is discussed in DATAREDIS 324 https jira spring io browse DATAREDIS 324 initiated by Christoph Strobl The enhancement is referenced in a related pull request on GitHub indicating ongoing development and community interest with one vote and two watchers,0,0,0,1,1,0,0
The SCAN command supported by Jedis and emulated in Lettuce using the Lua script EVAL return redis call SCAN 0 0 is proposed for addition to the Spring Data Redis project This enhancement tracked under DATAREDIS 290 https jira spring io browse DATAREDIS 290 was initiated by Christoph Strobl The command allows incremental iteration over keys in Redis databases enabling efficient data retrieval without blocking the server The feature request is accompanied by a pull request on GitHub which has garnered community interest with one vote and one watcher indicating its potential utility in streamlining Redis operations,0,0,0,1,1,0,0
In Java 21 the introduction of the ReversedRedisListView aims to ensure compatibility with Spring Data Redis This requires RedisList to provide default implementations for several List and Deque methods such as addFirst addLast getFirst getLast removeFirst and removeLast A key issue arises because both List and Deque interfaces define a reversed method but with different return types List E and Deque E respectively This discrepancy prevents RedisList from implementing both interfaces simultaneously posing a challenge for maintaining compatibility across these Java collections frameworks,0,0,0,0,1,0,1
The issue reported in DATAJDBC 596 involves incorrect formatting in the reference documentation where the operator is being rendered as a ligature instead of showing the intended operator This affects the clarity of the documentation as seen in the attached screenshot The problem has been acknowledged and addressed with a backport to version 2 0 5 Neumann SR5 to ensure consistent presentation across documentation versions,0,0,1,1,0,0,0
In the issue DATAJDBC 483 https jira spring io browse DATAJDBC 483 redirect false opened by taeyeon Kim https jira spring io secure ViewProfile jspa name taeyeon kim there were updates proposed for the Spring Data JDBC reference documentation The main tasks included adding an anchor to the section on JDBC value and correcting the Lifecycle Events example These improvements aim to enhance the clarity and usability of the documentation The changes were implemented and referenced in a pull request https github com spring projects spring data jdbc pull 189 and have been backported to versions 1 1 5 Moore SR5 https github com spring projects spring data jdbc milestone 48 closed 1 and 1 0 16 Lovelace SR16 https github com spring projects spring data jdbc milestone 47 closed 1,0,0,1,1,0,0,0
The issue in DATAJDBC 448 opened by Clemens Hahn highlights a documentation error in Spring Data JDBC The documentation incorrectly references the method NamingStrategy getReverseColumnName RelationalPersistentProperty property for changing the reverse column name in a one to many relationship However implementing this method doesn t work as expected Instead the correct method to implement is NamingStrategy getReverseColumnName PersistentPropertyPathExtension path This issue affects version 1 1 2 Moore SR2 and has been backported to version 1 0 14 Lovelace SR14 The related documentation can be found in the Spring Data JDBC reference guide and the issue is referenced in specific GitHub commits,0,0,1,1,0,0,0
The documentation for Spring Data JDBC describes handling one to many relationships using Set and Map For Set some entity the referenced entity s table should have an additional column named after the table of the referencing entity This name can be customized via NamingStrategy getReverseColumnName For Map simple type some entity the table requires two extra columns one for the foreign key and another with a key suffix for the map key These can be customized using NamingStrategy methods or by annotating with MappedCollection to specify idColumn and keyColumn Although the documentation suggests MappedCollection for Map it also works with Set as tested by the user and should be mentioned for Set as well,0,0,0,1,1,0,0
The issue DATAJDBC 477 highlights the need for documentation clarity regarding the Version annotation in Spring Data JDBC Specifically setting a Version annotated property to 0 may cause the entity to be marked as new a behavior inferred from the code and seen in other Spring Data implementations It is suggested that this behavior be explicitly documented The issue affects version 1 1 4 Moore SR4 and has been addressed in a fix via 951 Relevant documentation can be found in the Spring Data JDBC reference guide,0,0,0,1,1,0,0
The MyBatis integration in the Spring Data JDBC documentation is currently outlined in section 4 6 Florent Biville suggests reorganizing the documentation to embed subsequent sections under 4 6 This would mean that section 4 7 would become 4 6 1 and section 4 8 would become 4 6 2 creating a more cohesive structure for users following MyBatis integration This change affects version 1 1 1 Moore SR1 and has been backported to version 1 1 2 Moore SR2,0,0,0,1,1,0,0
The issue DATAJDBC 429 involves enhancing the documentation for Spring Data JDBC to include guidance on using a ResultSetExtractor with the query annotation ResultSetExtractor allows for custom extraction of data from ResultSet providing flexibility in handling complex result sets that may not fit the standard mappings This documentation update will help developers understand how to implement and leverage ResultSetExtractor effectively within their Spring Data JDBC projects improving data retrieval processes by allowing more tailored data processing and transformation,0,0,0,1,1,0,0
Michael Simons opened DATAJDBC 365 to address typos in the README of the Spring Data JDBC project The issue is referenced in a pull request and several commits on GitHub showcasing the ongoing efforts to improve documentation accuracy The corrections have been backported to version 1 0 7 Lovelace SR7 ensuring that users of this version also benefit from the updates These improvements reflect a commitment to maintaining high quality user friendly documentation for the project,0,0,0,1,1,0,0
The issue DATAJDBC 306 opened by Mark Paluch focuses on simplifying the reference documentation setup for Spring Data JDBC The task involves removing common properties from the index adoc file as these are now defined within the Spring Data Build This change is linked to another issue DATACMNS 1442 which also aims to streamline documentation processes The modification is reflected in a specific commit within the Spring Data JDBC repository,0,0,0,1,1,0,0
In the Spring Data JDBC project an issue labeled DATAJDBC 285 was opened by Jens Schauder focusing on enhancing the reference documentation by adding descriptions for Table and Column annotations This enhancement aims to clarify how custom table and column names can be specified in Spring Data JDBC The improvement is linked to a pull request and has been backported to version 1 0 5 Lovelace SR5 Bastian Wilhelm contributed by creating sections titled Custom table names and Custom column names in the documentation addressing the need for clearer guidance on using these annotations effectively,0,0,0,1,1,0,0
In the issue DATAJDBC 279 Jens Schauder emphasizes the need for documentation clarification regarding the use of back references in entities It is specified that back references should not be included in the entity mappings when using Spring Data JDBC This clarification is crucial for users to avoid potential issues in their implementations For more context refer to the related issue DATAJDBC 274 The issue has received community attention indicated by its votes and watchers,0,0,0,1,1,0,0
The issue DATAREST 1046 highlights incorrect instructions in the Spring Data REST documentation regarding the manual assignment of validators The documentation suggests subclassing RepositoryRestMvcConfiguration and overriding configureValidatingRepositoryEventListener which is incorrect because this method is actually part of RepositoryRestConfigurer and RepositoryRestConfigurerAdapter This discrepancy has been acknowledged and referenced in a related pull request The correction has been backported to versions 2 6 2 Ingalls SR2 and 2 5 9 Hopper SR9 to ensure consistency across different releases,0,0,1,1,0,0,0
Patrik Mihalcin reported an issue with the Spring Data REST 2 6 1 documentation highlighting an obsolete example of global CORS configuration The outdated method addCorsMapping on RepositoryCorsRegistry has been replaced by getCorsConfigurations This issue affected versions 3 0 M1 Kay and 2 6 1 Ingalls SR1 and has been addressed in subsequent commits Mark Paluch confirmed the documentation has been updated to reflect the correct method addMapping This fix was backported to version 2 6 2 Ingalls SR2,0,0,1,1,0,0,0
Mark Paluch opened issue DATAREST 898 to address a typo in the assertion message within the EntityLookupConfiguration This issue affects version 2 5 2 Hopper SR2 of Spring Data REST The problem was identified in related pull requests and commits specifically PR 228 and commits e5a0bdfe9f and d6caac122e The correction has been backported to version 2 5 3 Hopper SR3,0,0,1,1,0,0,0
Jens von Pilgrim reported an issue DATAREST 859 regarding incorrect links in the AsciiDoc documentation for MongoDB and security related examples as well as HAL browser images in Spring Data REST The problem affected version 2 5 2 Hopper SR2 Jens promptly fixed the issues and provided a patch This fix is referenced in a pull request and commits on GitHub The changes were also backported to version 2 5 3 Hopper SR3,0,0,1,1,0,0,0
In the Spring Data REST security documentation a broken link issue prevents an example code snippet from being displayed correctly The problem lies in the documentation generation process where an unresolved directive points to the PreAuthorizedOrderRepository java file This affects version 2 5 2 Hopper SR2 and is referenced in a pull request aimed at resolving it The documentation error was also backported to version 2 5 3 Hopper SR3 The incorrect directive is found in the security adoc file pointing to a non existent code tag which needs correction to display the example properly,0,0,1,1,0,0,0
The issue in DATAREST 811 involves incorrect documentation regarding the use of the Version annotation in Spring Data REST Originally the documentation suggested using the Spring Data Commons Version annotation which does not generate the ETag header the JPA Version annotation is required for this functionality The error was identified and a pull request was submitted to correct it However Oliver Drotbohm pointed out that the choice of Version annotation depends on the datastore used The fix was applied but the documentation was expanded to clarify when to use each annotation This affects version 2 5 1 and has been backported to later versions,0,0,1,1,0,0,0
In the Spring Data REST project a minor typo was reported by Benjamin Ben Shalom in the documentation for the headForItemResource method The word repsoitory was incorrectly used instead of repository This issue was tracked under ticket DATAREST 810 and affected version 2 5 1 Hopper SR1 The correction was referenced in a pull request and subsequently backported to versions 3 0 9 Kay SR9 and 2 6 14 Ingalls SR14 The relevant file is located in the RepositoryEntityController class of the spring data rest webmvc module,0,0,1,1,0,0,0
Greg Turnquist opened issue DATAREST 596 https jira spring io browse DATAREST 596 redirect false to fix a small typo in the reference documentation for Spring Data REST The issue is addressed in pull request 183 https github com spring projects spring data rest pull 183 and is referenced in pull request 186 https github com spring projects spring data rest pull 186 This fix has been backported to version 2 3 2 Fowler SR2 https github com spring projects spring data rest milestone 35 closed 1,0,0,1,1,0,0,0
The documentation for Spring Data REST had a typo in the section on projections The incorrect URL was http localhost 8080 persons 1 projection noAddresses which should be http localhost 8080 persons 1 projection noAddresses This issue affected version 2 3 GA Fowler and was corrected in version 2 3 1 Fowler SR1 The reference URL for the documentation is here http docs spring io spring data rest docs current reference html projections excerpts projections The correction was tracked under the issue DATAREST 509 opened by Willie Wheeler,0,0,1,1,0,0,0
Greg Turnquist opened DATAREST 503 https jira spring io browse DATAREST 503 to address a typo in the reference documentation for Spring Data REST version 2 3 GA Fowler The issue was highlighted and fixed through a pull request and two commits on GitHub The typo fix has been backported to version 2 3 1 Fowler SR1 For more details you can view the pull request and commits directly on GitHub via the provided links pull request https github com spring projects spring data rest pull 172 commit 1 https github com spring projects spring data rest commit e741f90378a9d8af43c6e704b49819248b6e4423 and commit 2 https github com spring projects spring data rest commit 7e2752ec95b1e970c53baf58f22a14c32b6e069f,0,0,1,1,0,0,0
Greg Turnquist opened DATAREST 484 https jira spring io browse DATAREST 484 to address a typo in the Spring Data REST documentation The issue is linked to a pull request and a specific commit Turnquist awaited confirmation of the contributor s CLA Contributor License Agreement status Oliver Drotbohm appreciated the caution noting that while a CLA isn t strictly necessary for minor fixes it prepares contributors for future contributions Tom Crossland confirmed he signed the CLA despite finding it excessive for a simple spelling correction This process highlights the importance of even small contributions to open source projects,0,0,1,1,0,0,0
The issue DATAREST 457 https jira spring io browse DATAREST 457 redirect false was opened by Oliver Drotbohm to address a typo in the JavaDoc of the BaseUri class in the Spring Data REST project This issue was referenced in a pull request and several commits on GitHub indicating that the typo fix has been implemented and reviewed The corrections were backported to versions 2 2 2 Evans SR2 and 2 1 5 Dijkstra SR5 ensuring that the changes were applied to multiple maintained versions This demonstrates a proactive approach in maintaining documentation accuracy across different releases,0,0,1,1,0,0,0
In versions 4 0 5 and 4 2 0 SNAPSHOT of a software a bug was identified where nested entities are not created during PUT requests if they are missing on the target A test case in DomainObjectReaderUnitTests replicates this issue The test initializes an Outer object and attempts to update it with a JSON node containing a nested inner object The problem is that the nested entity isn t created when it s absent in the target This issue seems to have been introduced by a specific pull request The fix is recommended for all 4 0 and 3 7 branches and testing on 4 2 0 SNAPSHOT shows the fix works,0,1,1,0,0,0,0
In the latest version RepositoryRestConfigurer beans are not ordered according to the Ordered interface or Order annotation causing test failures This change disrupts the standard framework contract leading to unexpected behavior in applications relying on specific bean execution order The issue seems linked to commit 4b36f794dca3866cd817f7f48f05d4ab6 which may have introduced this alteration Adjusting configurations or updating tests might be necessary to accommodate this change and ensure compatibility with the new version,0,1,1,0,0,0,0
Integration testing for Apache Solr requires accessing a JAR not available on Maven Central necessitating authentication with Artifactory in the CI job This setup is temporary as Spring Data Solr will be removed in future releases making it relevant only for version 3 1 x,1,1,0,0,0,0,0
The issue DATAREST 1317 was raised by Mark Paluch to streamline the reference documentation setup for Spring Data REST The proposal involves removing common properties from index adoc since these are now specified in the Spring Data Build This change aims to simplify the documentation process and reduce redundancy Additionally this issue is linked to DATACMNS 1442 which shares a similar goal of simplification The changes were referenced in a commit that can be viewed on GitHub,0,0,0,1,1,0,0
In Spring Data REST projections require methods to have a get prefix to be included in the response This can be confusing when using virtual fields as methods without this prefix are ignored For example a method like lowerName won t be included unless prefixed with get This requirement isn t clearly documented leading to potential confusion and time spent debugging Adding clarification in the documentation could help developers avoid such issues The use of Value annotations for computed properties should also follow this convention as the current examples only show getters The documentation will be updated to emphasize this requirement,0,0,0,1,1,0,0
In Spring Data REST a reported issue arises when using class level RequestMapping in a RepositoryRestController This setup causes GET requests to fail with a Method Not Allowed error if a custom POST endpoint is defined The workaround involves moving RequestMapping annotations to individual methods which resolves the inconsistency This behavior contrasts with standard Spring MVC leading to confusion The issue stems from how Spring MVC s default HandlerMapping interacts with class level annotations conflicting with Spring Data REST s handling Documentation improvements are suggested to clarify this behavior The issue relates to interface based proxies where RequestMapping might be used without an accompanying Controller annotation,0,0,0,1,1,0,0
The editorial overhaul of reference documents for Spring Data REST focuses on improving clarity and usability It addresses issues in version 3 1 M3 Lovelace and is linked to a pull request and specific commits on GitHub The changes aim to enhance the documentation structure making it more accessible and easier to understand for users This involves refining explanations updating examples and ensuring consistency throughout the reference materials The initiative is part of an effort to provide better support and guidance for developers using the framework,0,0,0,1,1,0,0
In the Spring Data REST project an issue was raised to include an example of setting spring data rest detection strategy annotated in the documentation This was suggested to be added to the section detailing which repositories are exposed by default However Oliver Drotbohm noted that this feature is specific to Spring Boot and not Spring Data REST itself Including such documentation could lead to inconsistencies as the lifecycle of Spring Boot features is separate from Spring Data REST The Spring Boot documentation already covers these configuration properties and JavaDoc for RepositoryDetectionStrategies provides detailed explanations Due to a lack of further feedback the issue was closed Here s an example of how application properties might look for setting the detection strategy properties spring data rest detection strategy annotated This property configures the detection strategy for repositories to be exposed based on annotations,0,0,0,1,1,0,0
Oliver Drotbohm opened issue DATAREST 951 to address an example fix in the reference documentation for Spring Data REST This issue is linked to DATAREST 930 which involves correcting typos in the CustomRestMvcConfiguration documentation The fix has been referenced from a pull request on GitHub and has been backported to multiple versions including 2 6 RC1 Ingalls 2 5 6 Hopper SR6 and 2 4 7 Gosling SR7 These updates ensure consistency and accuracy across the documentation for better usability and understanding by developers,0,0,0,1,1,0,0
Oliver Drotbohm opened a ticket DATAREST 950 to address typos in the reference documentation of the Spring Data REST project This issue is linked to a pull request on GitHub aimed at correcting these errors The fixes have been backported to multiple versions specifically 2 6 RC1 Ingalls 2 5 6 Hopper SR6 and 2 4 7 Gosling SR7 These updates ensure that the documentation is accurate and up to date across different releases improving the overall quality and usability for developers,0,0,0,1,1,0,0
The issue DATAREST 714 was opened by Oliver Drotbohm to enhance the reference documentation for Spring Data REST by including information about RepositoryRestConfigurer It affects version 2 4 1 Gosling SR1 and has been addressed in several commits The changes have been backported to versions 2 4 2 Gosling SR2 and 2 3 3 Fowler SR3 This improvement aims to provide clearer guidance on configuring repositories in Spring Data REST projects The related commits provide the necessary updates to ensure comprehensive documentation,0,0,0,1,1,0,0
To create custom endpoints that properly yield HAL documents in Spring Data REST it s essential to return Spring HATEOAS Resources Greg Turnquist highlighted this in DATAREST 684 noting that the existing documentation was unclear about this requirement The reference documents should be edited to explicitly guide users on these steps This was addressed in a pull request and specific commits with the changes backported to version 2 4 1 For detailed guidance refer to the official documentation s section on overriding Spring Data REST response handlers,0,0,0,1,1,0,0
Greg Turnquist opened DATAREST 624 https jira spring io browse DATAREST 624 to request the addition of reference documentation for the HAL Browser detailing how to integrate it into applications The documentation should include a cross link to the relevant section in Spring Boot This enhancement was referenced from a pull request and several commits in the Spring Data REST project repository aiming to improve user guidance on utilizing the HAL Browser effectively within the Spring ecosystem,0,0,0,1,1,0,0
Greg Turnquist opened DATAREST 623 https jira spring io browse DATAREST 623 to suggest extending the reference documentation for Spring Data REST The goal is to demonstrate how to programmatically link to various endpoints using Spring Data REST s APIs instead of relying on Spring HATEOAS s LinkBuilder or manual methods This enhancement is intended to provide developers with clearer guidance and improve the ease of linking within applications A related pull request can be found here https github com spring projects spring data rest pull 195,0,0,0,1,1,0,0
Greg Turnquist opened a JIRA issue DATAREST 576 https jira spring io browse DATAREST 576 highlighting the presence of duplicate README and CONTRIBUTING documents in Markdown format The task involves removing these redundant files This issue is referenced in a pull request and several commits on GitHub The changes have been backported to versions 2 3 1 Fowler SR1 and 2 2 3 Evans SR3 of the project,0,0,0,1,1,0,0
The issue DATAREST 550 https jira spring io browse DATAREST 550 redirect false opened by Oliver Drotbohm addresses the need for improved documentation on excerpt projections in Spring Data REST It emphasizes being more precise about when excerpt projections are applied and how to register a projection type effectively This issue affects versions 2 2 2 Evans SR2 and 2 3 GA Fowler The problem is discussed in a Stack Overflow post http stackoverflow com questions 30220333 why is an excerpt projection not applied automatically for a spring data rest it and is referenced through various pull requests and commits on GitHub including pull request 179 https github com spring projects spring data rest pull 179 The improvements have been backported to version 2 3 1 Fowler SR1,0,0,0,1,1,0,0
The issue DATAREST 508 https jira spring io browse DATAREST 508 opened by Oliver Drotbohm highlights the need for clearer documentation on how projection interfaces are identified in Spring Data REST The current documentation explains how to create a projection but lacks details on locating these interfaces There are two methods for picking them up placing them in the same package or a sub package of the entity they apply to or manually registering them via RepositoryRestConfiguration projectionConfiguration addProjection This issue affects version 2 3 GA Fowler and has been referenced in a related pull request and backported to version 2 3 1 Fowler SR1,0,0,0,1,1,0,0
The task involves updating the reference documentation for Spring Data REST to incorporate HAL Hypertext Application Language and remove deprecated annotations This update is tracked under the issue DATAREST 478 initiated by Greg Turnquist The issue is linked to DATAREST 450 which focuses on migrating wiki content into the reference documentation and replacing it with links The changes have been proposed in a pull request on GitHub and backported to version 2 2 3 Evans SR3 This update aims to ensure that the documentation reflects current best practices and technologies,0,0,0,1,1,0,0
The issue DATAREST 468 opened by Oliver Drotbohm highlights a documentation gap in Spring Data REST regarding supported media types for PATCH requests Specifically it suggests adding application patch json and application merge patch json to the reference documentation This enhancement is crucial for developers to understand the capabilities of the API when dealing with partial updates The issue is referenced in commits 3eb0691 https github com spring projects spring data rest commit 3eb0691d95daed24b89b08c33012e8a03723eebe and 6413765 https github com spring projects spring data rest commit 64137658ba453731c19d9a60fe1dc3d4bf0ef8b1 indicating its implementation progress,0,0,0,1,1,0,0
Summary for Machine Learning In the context of improving documentation for Spring Data REST a suggestion was made to include a miscellaneous section This section should cover integration details with Spring Security and provide links to auditing options tailored to different data stores The aim is to enhance user guidance and streamline the implementation of security and auditing features The task was initially duplicated as noted by the reference to a similar issue DATAREST 454 https jira spring io browse DATAREST 454 indicating the importance of these enhancements in the documentation process,0,0,0,1,1,0,0
Greg Turnquist opened a Jira issue DATAREST 454 to enhance the documentation by adding a section on conditional operations This section should demonstrate how to use conditional tags based on timestamps and versioning facilitating better control over data changes and updates The issue is linked to DATAREST 397 which focuses on integrating with Spring Security and DATAREST 449 which involves refining the reference documentation The enhancements are also referenced in a pull request and have been backported to version 2 3 1 Fowler SR1 of Spring Data REST These updates aim to improve the clarity and functionality of the documentation ensuring users can implement conditional logic effectively,0,0,0,1,1,0,0
Greg Turnquist opened DATAREST 453 https jira spring io browse DATAREST 453 redirect false to enhance the Spring Data documentation by adding links to relevant examples This improvement aims to assist users in understanding the application of Spring Data concepts through practical examples The issue is linked to DATAREST 449 https jira spring io browse DATAREST 449 which involves reviewing and refining the reference documentation to address any obvious gaps The changes are referenced in a pull request https github com spring projects spring data rest pull 168 and have been backported to version 2 2 3 Evans SR3 https github com spring projects spring data rest milestone 33 closed 1,0,0,0,1,1,0,0
The issue DATAREST 452 https jira spring io browse DATAREST 452 opened by Greg Turnquist involves adding ALPS Application Level Profile Semantics to the Spring Data REST reference documentation The goal is to enhance metadata documentation by using ALPS as detailed in a 2014 blog post https spring io blog 2014 07 14 spring data rest now comes with alps metadata This task is linked to another issue DATAREST 449 https jira spring io browse DATAREST 449 which focuses on reviewing and improving the documentation quality The changes related to this improvement were referenced in a pull request https github com spring projects spring data rest pull 164 and backported to version 2 2 3 Evans SR3 https github com spring projects spring data rest milestone 33 closed 1,0,0,0,1,1,0,0
Greg Turnquist opened issue DATAREST 451 to enhance the documentation of Spring Data REST by adding projections and excerpts This issue is linked to DATAREST 419 which focuses on documenting Projection usage and is considered both superseded and duplicated by it The improvements aim to address and clean up deficiencies in the reference documentation These updates are referenced in several commits to the Spring Data REST project indicating a comprehensive effort to integrate these changes The enhancements have been backported to version 2 2 3 Evans SR3 ensuring broader accessibility and application of the improvements,0,0,0,1,1,0,0
The task involves migrating wiki content into reference documentation and replacing it with links to streamline and update the documentation process This initiative tracked in issue DATAREST 450 is part of a broader effort to enhance the quality of the reference docs by addressing obvious deficiencies and updating them to reflect current standards such as using HAL and removing deprecated annotations These changes were initiated by Greg Turnquist and include a pull request on GitHub for further improvements The work has been backported to version 2 2 3 Evans SR3 and involves collaboration from other contributors like Oliver Drotbohm who helped refine the documentation with minor adjustments,0,0,0,1,1,0,0
The task involves reviewing and refining the reference documentation for Spring Data REST addressing gaps and ensuring clarity This includes integrating content from the wiki into the main docs and enhancing them with links to setup and Spring Boot resources Key updates involve documenting conditional operations adding projections and excerpts and incorporating ALPS Application Level Profile Semantics Additionally there is a focus on linking to Spring Data Examples to provide practical insights These improvements are tracked through several related issues and a pull request aiming for comprehensive and user friendly documentation,0,0,0,1,1,0,0
The issue DATAREST 422 https jira spring io browse DATAREST 422 redirect false was opened by Oliver Drotbohm https jira spring io secure ViewProfile jspa name olivergierke to address a problem with a broken link to the reference documentation in the README of the Spring Data REST project The fix was crucial for ensuring that users could access the correct documentation easily This update was backported to version 2 2 2 Evans SR2 https github com spring projects spring data rest milestone 28 closed 1 ensuring consistency across different versions of the project Such maintenance tasks are essential in software development to keep documentation accurate and user friendly supporting developers effectively,0,0,0,1,1,0,0
The user was looking for a what s new document for the 2 2 0 RELEASE but couldn t find it initially Later they discovered the necessary documentation and links in a blog post on the Spring website specifically related to the Spring Data Release Train Evans The issue was resolved and they suggested that the query could be closed,0,0,0,1,1,0,0
The documentation overhaul for DATAREST 252 https jira spring io browse DATAREST 252 focuses on improving clarity and organization for Spring Data REST Initiated by Oliver Drotbohm the update aims to address existing gaps and enhance user understanding Key changes include restructuring sections updating examples and ensuring consistency across the documentation This effort aligns with recent commits like afe2bd9 https github com spring projects spring data rest commit afe2bd936191ed9e43f55db29c953536c641dd50 which reflect these improvements The overhaul is part of a broader initiative to provide more comprehensive guidance for developers utilizing Spring Data REST in their projects,0,0,0,1,1,0,0
The issue DATAREST 212 highlights a problem with the way sorting options are parsed in Spring Data REST When making requests like http localhost 8080 web users size 100 sort email email dir desc the sorting direction wasn t mapped correctly defaulting to ascending order The documentation needed an update to reflect the new method for specifying sort order which uses a format like size 100 sort email asc This change is due to updates in the SortHandlerMethodArgumentResolver in Spring Data Commons Users can revert to the legacy method if needed by overriding the pageableResolver The documentation update aims to prevent confusion and save users time by clearly explaining the new sorting syntax,0,0,0,1,1,0,0
It seems there is an issue with the Spring Framework documentation links for version 6 1 0 Both the 6 1 0 SNAPSHOT and 6 1 0 RC1 in the version dropdown are directing users to the same URL which appears to be the Snapshot documentation This behavior is unexpected as confirmed by a contributor Additionally there is a 6 0 SNAPSHOT URL available but no equivalent 6 1 SNAPSHOT URL A pull request has been referenced for further details on this issue,0,0,1,1,0,0,0
In Spring Framework when an Bean method returns null the Autowired annotation will inject a NullBean instead of null for cached arguments This behavior is a backport from a change made in a later version gh 30485 The purpose of using NullBean is to prevent NullPointerExceptions and ensure that dependency injection can handle null returning beans gracefully This approach allows the framework to maintain consistency and robustness especially when dealing with complex dependency graphs By using NullBean developers can avoid common pitfalls associated with null values simplifying debugging and enhancing application stability,0,0,1,1,0,0,0
In Spring 5 x when a Bean method returns null Autowired injects a NullBean instead of null due to internal handling changes This behavior causes getBean calls to return NullBean rather than null which is unexpected for users The NullBean is an internal placeholder that mimics null behavior but its direct return from getBean may surprise developers The recommended approach is to resolve such beans using Autowired or BeanFactory getBeanProvider as getBean no longer returns null directly This discrepancy can lead to inconsistent results in tests indicating a potential bug in the resolution algorithm The issue persists in 5 x versions but might be addressed in 6 x Documentation will be updated to clarify these behaviors and suggest alternative methods for handling optional beans,0,0,1,1,0,0,0
The task involves enhancing the documentation and matching algorithm within data binders This includes refining the way data is organized and retrieved ensuring that the documentation is clear and comprehensive for users The improvement is a backport of changes initially made in pull request gh 28333 The primary focus is on optimizing the algorithm to increase accuracy and efficiency in matching data sets This might involve updating methods to handle edge cases better improving performance and making the system more intuitive for developers Overall these changes aim to streamline processes and enhance the usability and functionality of data binders in machine learning applications,0,0,1,1,0,0,0
To improve the documentation and matching algorithm in data binders focus on clear concise guides that outline usage functionality and troubleshooting steps Ensure the documentation is structured logically with sections for beginners and advanced users For the matching algorithm enhance accuracy by refining feature extraction techniques and implementing machine learning models that can learn from previous matches Regularly update both the documentation and algorithm based on user feedback and performance metrics Incorporate examples and visual aids in the documentation to facilitate understanding Additionally consider integrating an FAQ section to address common queries and issues efficiently,0,0,1,1,0,0,0
In Spring Framework 4 3 3 an issue was identified where ModelAndView s setStatus method does not work as expected in ExceptionHandler methods Specifically when using mav setViewName redirect error the HTTP status is set to 302 and with mav setViewName error it defaults to 200 ignoring the status set by mav setStatus httpStatus This occurs because the view name can override the status during view rendering particularly with RedirectView which sets its own status code The issue was acknowledged and fixed ensuring that the response status is set before the view rendering process This fix aims to align the behavior of ExceptionHandler with RequestMapping methods which already support setting response status through ModelAndView Documentation improvements were also suggested for clarity on this behavior,0,0,1,1,0,0,0
In the Spring Framework documentation there s an error in the section about Multiple Transaction Managers The incorrect class name used is org springframework jdbc DataSourceTransactionManager It should be org springframework jdbc datasource DataSourceTransactionManager This typo affects the proper configuration of transaction managers in Spring applications The issue was identified and reported by Wies aw M ynarski and acknowledged by St phane Nicoll The correction ensures that users configure their transaction managers correctly which is essential for handling multiple data sources This issue affects version 4 1 GA of the framework and has been noted in the project s commit history,0,0,1,1,0,0,0
In the issue SPR 11412 https jira spring io browse SPR 11412 Rob Winch highlighted the need to update Javadoc styling to align with JDK8 standards The update is necessary because JDK8 removed the resources folder which affected customizations related to the background images used in the Javadoc banner These changes were initially implemented in commit 1c724069 to ensure visibility of the white banner The update should focus on adapting the styling to JDK8 s default while retaining essential customizations This issue affects version 4 0 1 and is referenced in commit 14616a445a6e54a6ff18d037634bb1450db71719 on GitHub,0,0,1,1,0,0,0
A typo was identified in the Spring MVC reference documentation for version 3 2 x where ContentNeogitatingViewResolver was mistakenly used instead of ContentNegotiatingViewResolver This issue was reported by Andi Rustandi Djunaedi highlighting the error in the documentation The problem was acknowledged by Phil Webb who appreciated the feedback The correction was referenced in two commits on the Spring Framework GitHub repository ensuring the documentation was updated to reflect the correct term,0,0,1,1,0,0,0
Christopher Hotchkiss reported a typo in a code example on the Spring Framework documentation The annotation EnableSCheduling is incorrectly capitalized and should be EnableScheduling This issue was documented in SPR 10394 https jira spring io browse SPR 10394 redirect false,0,0,1,1,0,0,0
Karl Bennett highlighted errors in the Spring MVC Test examples in the reference manual Specifically the MockHttpServletRequestBuilder accept MediaType method incorrectly uses a String instead of MediaType Additionally there is a syntax error where a closing parenthesis is missing in the jsonPath assertion example These issues affect version 3 2 2 A related issue suggested creating an overload for accept String mediaTypes Sam Brannen submitted a pull request to address these problems For more details refer to the Spring Framework documentation and the pull request on GitHub,0,0,1,1,0,0,0
The JavaDoc generation for the Spring Framework is reporting multiple warnings primarily due to missing or incorrect references in the documentation tags These issues include errors fetching URL package lists unresolved link and see tags and missing closing characters for inline tags The warnings occur on a Linux system using JDK 7 update 9 x64 affecting version 3 2 1 of the framework Some problems stem from longstanding unresolved JavaDoc tool bugs with potential solutions suggested from related bug reports A pull request has been created to address these issues,0,0,1,1,0,0,0
The issue SPR 10311 addresses incorrect documentation regarding the scope of inner beans in the Spring framework The documentation incorrectly states that inner beans automatically become prototype beans which is misleading Prototype beans by definition do not have destruction callbacks yet inner beans do receive these callbacks causing confusion The intended meaning was likely to describe the creation of multiple instances but the analogy to prototype scope was inaccurate Inner beans are created alongside their enclosing beans resulting in multiple instances if the outer bean is prototype scoped However if the outer bean is singleton destruction callbacks are still applied contradicting the prototype definition The discussion emphasizes the need to clarify the distinction and scope behavior in the documentation to prevent misunderstandings,0,0,1,1,0,0,0
The Spring Framework s 3 2 migration guide has been updated to address changes in dependencies related to JUnit and Hamcrest The spring test module now depends on JUnit 4 11 TestNG 6 5 2 and Hamcrest Core 1 3 all declared as optional in the Maven POM Notably JUnit 4 11 no longer includes Hamcrest Core within its artifact requiring explicit declarations for Hamcrest dependencies if matchers are used This change addresses previous issues with duplicate classes due to Hamcrest being inlined in older versions of JUnit and hamcrest all The migration guide now accurately describes Hamcrest Core as a transitive dependency helping developers manage dependencies more effectively The update includes recommendations to adjust Maven or Gradle configurations accordingly ensuring proper scope management for test dependencies,0,0,1,1,0,0,0
The issue with building the 3 2 x branch using Java 7 is due to the api javadoc task failing because it relies on asmRepackJar to be executed first This problem was identified by Stevo Slavi and acknowledged by Chris Beams who mentioned that Phil Webb had already fixed the issue in a commit However the fix hadn t been merged into the 3 2 x branch The commit by Phil Webb ensured that the Gradle api task depends on the jar tasks of all subprojects which guarantees the execution of asmRepackJar and cglibRepackJar tasks necessary for JavaDoc generation Phil Webb confirmed that the fix has now been merged As a temporary workaround Stevo Slavi suggested using the command gradlew clean jar build,0,0,1,1,0,0,0
In the Spring Framework documentation an issue was reported in section 13 4 3 Batch operations with multiple batches by Manuel Jordan The sample code included an unnecessary loop which prompted Jordan to open a ticket SPR 9937 This affected version 3 1 2 of the documentation Phil Webb responded acknowledging the error and confirming that it was fixed in the Git repository The corrected documentation will be available with the release of version 3 2 Jordan also expressed his intention to contribute more after learning Git,0,0,1,1,0,0,0
The issue in SPR 9855 involves the ServletConfigAware interface in Spring where an expected exception is not thrown outside a Servlet specific WebApplicationContext Ivan Sopov reported that despite the Javadoc indicating an exception should occur if ServletConfigAware is used outside this context it doesn t happen A sample code test confirmed this behavior Chris Beams suggested that updating the documentation might be necessary as changing the behavior now could affect backward compatibility for existing applications Ivan Sopov agreed that removing the exception statement from the Javadoc is acceptable but suggested logging a warning or error instead Juergen Hoeller decided to revise the documentation to clarify that ServletConfig is not set when not in a Servlet specific context aligning with intended behavior since ServletConfigAware is used for optional introspection of init parameters,0,0,1,1,0,0,0
The issue SPR 9267 addresses missing images in the Spring 3 1 PDF documentation Despite previous reports claiming it was fixed in version 3 1RC1 the final release still lacked images Sylvain Laurent reported the issue and Chris Beams acknowledged it stating a fix was implemented However the problem persisted as Kirill Kazakov noted that the images were still absent in the 3 1 x version Sylvain confirmed that images were present in the 3 1 0 release but not in subsequent versions like 3 1 1 The issue highlights ongoing challenges with ensuring documentation completeness across versions,0,0,1,1,0,0,0
Stevo Slavi reported multiple Javadoc warnings in the Spring Framework affecting version 3 2 M1 He created a pull request to address most of these issues but 104 warnings remained unresolved Despite efforts to submit another pull request for additional fixes he faced difficulties due to GitHub limitations and previous unaccepted submissions Chris Beams acknowledged that the issue was fixed referencing a related pull request for details The discussion highlights ongoing efforts and collaboration to resolve documentation warnings in the project,0,0,1,1,0,0,0
The issue SPR 9097 opened by Stevo Slavi involves a failure in Javadoc generation due to encoding problems when using Java 1 7 The build log indicates errors related to unmappable character for encoding UTF8 in certain Java files causing the Javadoc task to fail This problem does not occur with Java 1 6 suggesting a version specific issue The matter was referenced in commits and discussed by Chris Beams who confirmed a fix linked to a pull request Slavi proposed a patch and submitted pull requests to address the encoding issue ensuring compatibility with Java 1 7,0,0,1,1,0,0,0
The issue reported in SPR 8915 was about the Spring Framework 3 1 documentation referencing an outdated link to the OpenSymphony Quartz Scheduler Zemian Deng noted that the documentation should instead refer to the Quartz Scheduler with the correct link to http quartz scheduler org This was addressed and corrected by Chris Beams who acknowledged the update and thanked Zemian for bringing it to their attention,0,0,1,1,0,0,0
Igor Mihalik reported an issue in the Spring Framework SPR 8720 regarding an incorrect link in the Javadoc for ServletContainerInitializer The link pointed to an outdated URL The issue affected version 3 1 M2 and was referenced in a commit by Chris Beams The commit addressed several broken or outdated external Javadoc links including those for Hibernate Java SE and EE 6 Quartz and Apache Pluto ensuring they now resolve correctly This update was committed on October 10 2011,0,0,1,1,0,0,0
In the Spring Framework Cache Abstraction document a bug was identified in section 28 4 2 s example code The original code used incorrect attribute names p cache manager and p config location The correct attributes should be p cacheManager ref and p configLocation However only the cache manager attribute needs correction as the p namespace accommodates camel case making p config location valid The corrected code should specify p cacheManager ref ehcache to ensure proper configuration This issue specifically affects version 3 1 M2 of the framework,0,0,1,1,0,0,0
A bug in the Spring Framework cache abstraction document SPR 8670 was reported by Keesun Baik The issue involved a typographical error in the documentation specifically in the sentence All the other caches that do not contain the method will be updated as well event though the cached method was not actually executed The word event needed to be corrected to even This issue affected version 3 1 M2 and was referenced in a commit Chris Beams confirmed the fix thanking Keesun for the report,0,0,1,1,0,0,0
The issue SPR 8512 was opened by Michael K nig highlighting that certain Spring Framework PDF documents lack images specifically diagrams This affects versions 3 0 5 3 1 M1 and 3 1 M2 The problem is linked to similar issues such as 13323 and 13315 which also report missing diagrams in the PDF reference manual Chris Beams confirmed the issue and mentioned plans to resolve it by the RC1 release,0,0,1,1,0,0,0
In the Spring Framework the introduction of nested beans elements has changed the id attribute from xsd ID to xsd string making id no longer unique per XML file This change affects version 3 1 M1 and requires updates to the documentation specifically section 3 3 1 The change also impacts sections 3 4 2 1 and 3 4 2 2 regarding the idref element The matter was addressed by Grzegorz Grzybek and further discussed by Chris Beams who noted the diminishing value of the local attribute prompting the creation of a separate issue 12711 for its resolution The adjustments have been acknowledged and implemented promptly,0,0,1,1,0,0,0
In section 15 4 1 Intercepting requests the HandlerInterceptor interface of the Spring Framework documentation an example contains invalid Java code java if openingTime hour closingTime return true This syntax results in an error because Java does not allow chained comparisons like this The error message is operator cannot be applied to boolean int This issue was identified by Costa Theodosiou in ticket SPR 7750 https jira spring io browse SPR 7750 and has been fixed by Chris Beams The affected version was 3 0 5 with a correction referenced in a commit on GitHub,0,0,1,1,0,0,0
In section 1 3 of the Spring Framework documentation a typo was identified in the Typical full fledged Spring web application diagram where Dynamic binding was misspelled as Dymaic binding This issue documented under SPR 7715 was opened by Don Mitchell and has since been addressed The typo affected version 3 0 5 of the framework and was linked to another typo issue 11137 Chris Beams fixed the issue in a commit and Oliver Drotbohm reassigned the task to ensure the correct file overview full graffle was updated,0,0,1,1,0,0,0
The reference documentation for Spring 3 0 still mentions ServerSessionMessageListenerContainer which was deprecated in Spring 2 5 and removed in Spring 3 0 This class has been replaced by DefaultMessageListenerContainer and JmsMessageEndpointManager The issue affects version 3 0 1 as noted in the JIRA ticket SPR 7207 opened by Stefan Scheidt The outdated section can be found in the JMS documentation under asynchronous message reception,0,0,1,1,0,0,0
In the Spring Framework version 3 0 1 there was an issue with OSGi dependencies where all packages in the spring bundles required dependency bundles with versions between 3 0 0 3 0 1 This was a known issue often humorously referred to by developers Juergen Hoeller noted that the problem was resolved in the 3 0 1 RELEASE A update and also in the 3 0 2 snapshots,0,0,1,1,0,0,0
The issue SPR 6781 addresses errors in Spring s documentation regarding multiple persistence units Key corrections include changing persistenceXmlLocation to persistenceXmlLocations in DefaultPersistenceUnitManager to prevent conversion errors Additionally specifying persistenceUnitName in LocalContainerEntityManagerFactoryBean is crucial to avoid exceptions related to undefined persistence units It is necessary to create a separate LocalContainerEntityManagerFactoryBean for each persistence unit as JPA maps one persistence unit to one EntityManagerFactory This setup while not ideal is manageable due to the typically low number of units The documentation should clarify these points and provide examples with multiple EntityManagerFactoryBeans There s a suggestion for a more convenient setup for multiple persistence units reflecting its common use in enterprise applications,0,0,1,1,0,0,0
In the Pooling target sources section of the Spring reference manual there s a typo where havadoc should be javadoc This issue identified in version 3 0 GA affects documentation clarity The correction ensures accurate reference to the Java documentation for AbstractPoolingTargetSource and its implementations The issue was documented in SPR 6748 https jira spring io browse SPR 6748 by Stevo Slavi with related details in a specific commit on GitHub,0,0,1,1,0,0,0
In the Spring Framework issue SPR 6725 https jira spring io browse SPR 6725 Grzegorz Grzybek pointed out that the ProxyFactory in the AdvisedSupport class does not include a method to add interceptors directly contrary to some documentation claims The documentation inaccurately suggested that interceptors a type of advice could be manipulated throughout the lifecycle of a ProxyFactory Instead the ProxyFactory supports adding Advisors and Advices without specific emphasis on interceptors This discrepancy was acknowledged by Juergen Hoeller noting that the documentation had been outdated for some time This issue affects version 3 0 GA and was referenced in a specific commit on the Spring Framework s GitHub repository,0,0,1,1,0,0,0
In the Spring Framework the issue SPR 6723 was raised by Grzegorz Grzybek to address a documentation concern regarding the aopProxyFactory property This property is found in org springframework aop framework ProxyCreatorSupport but is not part of ProxyConfig The concern was acknowledged by Juergen Hoeller who encouraged further feedback and contributions to improve the documentation This reflects the collaborative nature of open source projects where community input is valued for enhancing clarity and functionality,0,0,1,1,0,0,0
In the Spring Framework reference documentation there was an error in chapter 6 5 1 regarding the method for escaping single quotes in strings Initially it stated that a backslash should be used but the correct method is to use two single quote characters as per the Tokenizer lexQuotedStringLiteral method in the code This issue was identified by Grzegorz Grzybek and acknowledged by Juergen Hoeller who appreciated the correction,0,0,1,1,0,0,0
The issue in SPR 6713 highlights an error in the documentation of the GenericConverter interface specifically in the method signature of getConvertibleTypes The documented signature is incorrectly shown as returning a 2D array of Class but the correct signature should return a Set ConvertiblePair This discrepancy affects version 3 0 GA of the software Grzegorz Grzybek opened the issue to address this mistake suggesting that the correct signature be used to avoid confusion and ensure accurate implementation,0,0,1,1,0,0,0
The issue SPR 6691 opened by Stevo Slavi highlights a broken link in the Spring reference manual related to method injection Specifically the link in the Lookup method injection section incorrectly points to a non existent page and should be updated to Rod s correct blog entry on method injection This affects version 3 0 GA of the Spring Framework Juergen Hoeller acknowledged the error and thanked Stevo for bringing it to attention The issue is also referenced in a specific GitHub commit,0,0,1,1,0,0,0
The issue in ResourceDatabasePopulator involves the splitSqlScript method which incorrectly handles SQL strings with escaped single quotes This occurs because the method checks each character individually leading to misinterpretation of escaped characters as real single quotes This flaw causes incorrect splitting of the SQL script when it encounters an escaped single quote The problem affects version 3 0 GA and was referenced in a specific commit Dave Syer noted that while double single quotes work by default a fix was added for backslash detection although it lacks MySQL integration tests Juergen Hoeller pointed out that SQL escaping methods vary across databases with MySQL using backslashes and others using double single quotes,0,0,1,1,0,0,0
The error in the JavaConfig sample code in section 3 11 2 2 of the Spring Framework documentation involves an incorrect use of the ApplicationContext interface The method register is mistakenly attributed to ApplicationContext when it should be used with AnnotationConfigApplicationContext The corrected code initializes an AnnotationConfigApplicationContext object directly allowing the registration of configuration classes and subsequent context refresh This adjustment ensures that beans like MyService can be retrieved and used correctly The issue affects version 3 0 GA and is documented in the Spring issue tracker as SPR 6638 with references to specific commits for further details,0,0,1,1,0,0,0
In the JavaConfig sample code from the Spring documentation there is an error in the method signature The method is incorrectly defined with a void return type which is unnecessary and incorrect for a Bean method The correct definition should specify the return type of the bean being created This issue was reported by Gildas Cuisinier and is linked to another documentation error under issue 11298 The error was referenced in a specific commit in the Spring Framework s GitHub repository highlighting the need for accurate coding examples in official documentation to prevent misunderstandings,0,0,1,1,0,0,0
In the JSR 303 documentation section 5 7 1 an example incorrectly uses the Max 64 annotation on a string field which is meant for numeric validation This causes validation to fail with Hibernate Validator if the intention is to restrict string length The correct approach is to use the Size max 64 annotation for limiting the string length This issue was identified in version 3 0 RC2 and referenced in a commit by Juergen Hoeller confirming that Size is the appropriate annotation for this case,0,0,1,1,0,0,0
The issue SPR 6507 reported by Kenny MacLeod highlights a minor documentation oversight in the org springframework instrument classloading jboss JBossLoadTimeWeaver class Specifically the Javadoc is missing the since annotation for version 3 0 This is a trivial but necessary update to ensure clarity about when the class was introduced The problem affects version 3 0 RC3 of the Spring Framework Addressing this will improve documentation consistency and help developers identify the version history of components more easily,0,0,1,1,0,0,0
In the Spring Framework reference guide a typo was identified in section 15 3 2 3 which discusses supported handler method arguments and return types The annotation PathVariabe was mistakenly written instead of the correct PathVariable This error affects version 3 0 RC3 The issue was reported by Andrew Swan in the Spring issue tracker under the identifier SPR 6487,0,0,1,1,0,0,0
Matthias Koch reported an issue with the ResourceBundleViewResolver documentation in Spring 3 where the syntax for specifying a view class was incorrect The documentation suggested using viewname class but the correct syntax is viewname class which has been applicable since Spring 2 Koch identified outdated documentation links that contained this error The issue was acknowledged by Luke Taylor who confirmed that the necessary updates were made to the documentation files to reflect the correct syntax This change ensures that users reference the accurate method for defining view classes in properties files,0,0,1,1,0,0,0
In Chapter 15 3 of the MVC section there s an error in the code example on page 399 of the PDF The issue lies in the variable naming within the HelloWorldController class The variable mac should be corrected to mav in the helloWorld method This involves changing ModelAndView mac new ModelAndView to ModelAndView mav new ModelAndView This mistake affects version 3 0 RC1 Luke Taylor commented that the error appears to have already been corrected in the current trunk version,0,0,1,1,0,0,0
In the Registering field specific Formatters section there is a discrepancy between the documentation and the codebase The WebDataBinder class lacks a registerFormatter String Formatter method while DataBinder includes a getFormatterRegistry method However the FormatterRegistry does not support registering field specific formatters This issue marked as SPR 6171 affects version 3 0 RC1 and relates to other issues such as the inability to register Formatter instances by field Although the task is several years old it was resolved in Spring 3 0 RC2 There are questions about the best practices for registering custom formatters across different scopes per controller per DispatcherServlet or per web app and how to handle custom PropertyEditors versus Formatters including their precedence and combination within a web application,0,0,1,1,0,0,0
The issue reported in SPR 6095 involves a discrepancy in the O X Mapping exception hierarchy diagram in the Spring Framework documentation On page 370 of the M4 release the diagram incorrectly labels a class as GenericMarshallingFailureException while the actual class name is MarshallingException This error was noted by Tareq Abedrabbo and affects version 3 0 M4 The mistake is documented in a commit on the Spring Framework s GitHub repository,0,0,1,1,0,0,0
The issue SPR 6089 was opened by Paul Benedict on the Spring JIRA platform It addresses a typo in the Javadoc for the DocumentDefaultsDefinition class in Spring s XML bean definition The error involves an incorrect use of the symbol instead of for the beans tag This typo affects versions 2 5 6 and 3 0 M1 of the framework The class in question manages default settings like default lazy init and default autowire in Spring s XML configuration,0,0,1,1,0,0,0
The issue SPR 5979 highlights an error in the Spring Framework reference guide specifically in the Classpath scanning and managed components section The guide incorrectly refers to a type called StandardScopes which does not exist This needs correction to ensure clarity and accuracy The problem affects version 3 0 M4 and is referenced in a specific commit Mark Pollack suggested using Scope annotations correctly with examples like Scope BeanDefinition SCOPE SINGLETON for singleton beans and Scope value WebApplicationContext SCOPE SESSION proxyMode ScopedProxyMode TARGET CLASS for session scoped beans These adjustments aim to provide accurate guidance on bean scope configurations,0,0,1,1,0,0,0
The issue SPR 5978 was opened by Joris Kuipers highlighting a broken reference in the Spring Framework documentation After building the reference docs from SVN Kuipers noticed that section 2 5 5 1 still links to a non existent REST chapter which has been removed This broken reference affects version 3 0 M4 and needs correction to ensure the documentation is accurate and up to date,0,0,1,1,0,0,0
In the Spring Framework s documentation for version 3 0 a typo was identified by Billy Gong Liming The error involves the word generified which appears in sections discussing Java 5 features like FactoryBeans and ApplicationListeners This typo is noted in the JIRA issue SPR 5965 The issue references a specific commit in the Spring Framework s GitHub repository suggesting where the error exists in the documentation The correction aims to ensure clarity and accuracy in describing the new features introduced in Spring 3 0,0,0,1,1,0,0,0
In the issue SPR 5851 Dave Syer requested that Maven repositories be marked as non snapshot in the Spring Framework s project This change involves adding the snapshots enabled false enabled snapshots tag to all repository elements in the project s POM files This adjustment prevents unnecessary snapshot dependency checks which can streamline builds for projects that rely on Spring The issue affects version 3 0 M3 and includes an attached pom xml file with the necessary modifications Syer also referenced a related commit and requested the updated POM be added to SVN,0,0,1,1,0,0,0
Greg Turnquist identified a typo in the Spring Framework documentation related to 4 12 5 4 Specifying bean scope specifically under Lookup method injection He submitted a patch to correct the documentation error in beans xml revising Java configuration details to properly subclass CommandManager and override the createCommand method This correction ensures the method effectively looks up a new prototype command object The issue tracked as SPR 5750 https jira spring io browse SPR 5750 affects version 3 0 M3 Turnquist provided the patch as an attachment and confirmed its submission at the root directory level linking it to a specific GitHub commit,0,0,1,1,0,0,0
In the Spring 3 0 Reference Documentation section 2 4 5 1 contains a typographical error where MarshallingHttpMessageConverter is misspelled as MarhsallingHttpMessageConverter This issue was reported by Andrew Goudzwaard under the identifier SPR 5748 The error affects version 3 0 M3 and is noted in the single page HTML version of the documentation The related commit can be found on GitHub indicating where the mistake occurs in the project s source code,0,0,1,1,0,0,0
The issue SPR 5725 https jira spring io browse SPR 5725 highlights typographical errors in the Spring REST documentation Specifically on page 463 the phrase for converting for converting is repeated and on page 469 ExceptionHandling should be corrected to ExceptionHandler These errors affect version 3 0 M3 of the documentation and are referenced in a commit on GitHub,0,0,1,1,0,0,0
In the Spring Framework issue SPR 5723 Chris Beams reported that code examples in the 3 0 M3 PDF documentation extend beyond page margins causing readability issues A screenshot was attached to illustrate the problem This issue affects version 3 0 M3 and is referenced in a specific commit on GitHub The problem highlights the need for better formatting in the documentation to ensure proper display of code examples,0,0,1,1,0,0,0
The addApplicationListener method in Spring s AbstractApplicationContext was introduced in version 2 0 4 as part of the ConfigurableApplicationContext interface This was confirmed by Juergen Hoeller addressing confusion due to inconsistent documentation The method isn t marked with since tags in the JavaDocs particularly during point releases leading to misunderstandings about its availability in earlier versions Although some JavaConfig milestones may still work with Spring 2 0 8 official support is primarily for the latest Spring core versions like 2 5 Grzegorz Borkowski initially encountered issues while using Spring 2 0 1 as the method was not available in that version,0,0,1,1,0,0,0
In section 12 6 1 4 of the documentation there was an error in the XML configuration where persistenceXmlLocation was used instead of the correct persistenceXmlLocations This issue was reported by Simon Olofsson in the Spring project under ticket SPR 5063 The problem affected version 2 5 5 Juergen Hoeller responded choosing to address the issue by adding a new persistenceXmlLocation property to the DefaultPersistenceUnitManager as an alternative to the existing persistenceXmlLocations property This solution allows for more flexibility in the configuration,0,0,1,1,0,0,0
A typo in the Spring Framework documentation for JMS Chapter 19 4 5 was reported by Dries Van Autreve The text mistakenly says you will need to configured a transaction manager instead of the correct you will need to configure a transaction manager This error affects versions 2 0 8 and 2 5 4 and has been backported to version 2 0 9 Juergen Hoeller acknowledged and thanked Dries for identifying the mistake,0,0,1,1,0,0,0
In section 3 4 5 2 of the Spring Framework documentation a typo was identified in the code snippet for registering a custom scope The incorrect line uses scope instead of customScope The correct line should be beanFactory registerScope thread customScope This issue was reported by Karl Palsson in SPR 4779 A humorous suggestion to use a verbose variable name was made but ultimately a straightforward correction to customScope was preferred The error affects versions 2 0 8 through 2 5 4 and has been backported to version 2 0 9 Juergen Hoeller a Spring Framework contributor acknowledged and fixed the typo,0,0,1,1,0,0,0
The user guide for the Spring Framework referenced a non existent class FormatHelper in section 14 5 1 3 which was supposed to assist in converting model data to XML This was noted in versions 2 0 8 and 2 5 4 Dave Syer raised the issue pointing out that the documentation directed users to consult the Javadocs for this class Juergen Hoeller responded stating there is no direct alternative to FormatHelper as it was removed long ago However its functionality could be achieved using standard Java libraries Consequently the misleading reference was removed from the documentation to prevent further confusion,0,0,1,1,0,0,0
The DriverManagerDataSource class in Spring Framework version 2 5 2 is incorrectly noted as implementing the SmartDataSource interface In reality DriverManagerDataSource extends AbstractDataSource which implements the DataSource interface The SmartDataSource interface has only one implementing class SingleConnectionDataSource This issue affects versions 2 0 8 and 2 5 2 and has been backported to version 2 0 9 Juergen Hoeller acknowledged this discrepancy and appreciated the identification of the error,0,0,1,1,0,0,0
In section 11 2 1 1 3 of The Spring Framework Reference Documentation there was an error noted by Rodolfo Federico Gamarra regarding the use of the term bind which should be replaced with binding This section discusses operations that are overloaded with variants involving callback interfaces and bind variable arrays The issue affected versions 2 0 8 and 2 5 3 and was backported to version 2 0 9 Juergen Hoeller acknowledged the correction thanking Gamarra for identifying the mistake,0,0,1,1,0,0,0
In the Spring Framework Reference Documentation a typographical error was identified in section 13 3 The text discusses the role of controllers in the MVC design pattern but it omits a closing parenthesis after MVC This issue was reported by Rodolfo Federico Gamarra and affects version 2 5 3 of the documentation Juergen Hoeller acknowledged the oversight and expressed gratitude for bringing it to attention The role of the controller as the C in MVC is crucial as it facilitates access to various components within the framework,0,0,1,1,0,0,0
In the Spring Framework Reference Documentation a typo was reported in chapter 8 section 3 5 under Common annotations The error involves the repetition of the word of in the description of DirtiesContext This typo was highlighted by Rodolfo Federico Gamarra in issue SPR 4722 The mistake reads during the execution of of the test method and affects version 2 5 3 Juergen Hoeller acknowledged the report and expressed gratitude for identifying the error,0,0,1,1,0,0,0
In the context of fine tuning annotation based autowiring with qualifiers in Spring it s crucial to ensure that bean definitions contain matching qualifier values The original XML configuration for beans uses an incorrect attribute naming convention which was identified as a misspelling The attribute element incorrectly uses name instead of key The corrected syntax is attribute key format value VHS This precision allows Spring to correctly process the bean configurations and ensure that dependencies are injected as expected This issue affecting version 2 5 3 was noted by Lee Seok Kyeom and acknowledged by Juergen Hoeller reflecting the collaborative nature of refining Spring s framework,0,0,1,1,0,0,0
In section 6 2 of the MVC tutorial the import statements for InventoryControllerTests java are incomplete The necessary imports should include both java util Map and java util ArrayList instead of just java util Map This issue was identified by Christian Delfs and affects version 2 5 1 Juergen Hoeller acknowledged the oversight and thanked Delfs for pointing it out,0,0,1,1,0,0,0
The JdbcProductDaoTests java from section 5 5 of the tutorial could not be compiled due to missing imports Specifically AbstractTransactionalDataSourceSpringContextTests was not recognized by the compiler To resolve this the following imports needed to be added java import java util List import org springframework test AbstractTransactionalDataSourceSpringContextTests import springapp domain Product Originally only import java util List was included which was insufficient The issue was reported by Christian Delfs and acknowledged by Juergen Hoeller highlighting a necessary correction in version 2 5 1,0,0,1,1,0,0,0
In the document SPR 4555 Paul Benedict highlights an inconsistency in Section 3 8 3 which mentions three standard events in Spring but lists five applicable to version 2 0 x He suggests removing the numbering to avoid further edits and to accurately reflect updates in version 2 5 Juergen Hoeller acknowledges this oversight and thanks Paul for identifying the issue This update aims to ensure clarity and correctness in the documentation of standard events,0,0,1,1,0,0,0
The documentation for Spring version 2 5 1 contains a typo in section 6 2 3 1 Supported Pointcut Designators where the word token is misspelled as toekn This error occurs in the context of describing the idOrNameOfBean token which can refer to the name of any Spring bean Paul Newport reported this issue and Juergen Hoeller acknowledged the mistake with thanks for identifying it,0,0,1,1,0,0,0
The issue SPR 4437 opened by Rick Evans highlights a problem with the Ant build file for the formtags showcase application Changes to the jar packaging in the Spring framework have caused the build to fail because the Spring MVC classes are no longer included in spring jar which the build file references Rick suggests a quick fix by modifying the build file to include all jar files from the spring dist modules directory Alternatively the build file could explicitly reference the necessary spring and spring mvc jars Juergen Hoeller acknowledged the issue noting that while regular sample applications were tested the showcases were overlooked He confirmed that all showcase build scripts have been fixed,0,0,1,1,0,0,0
The JavaDoc for AbstractRoutingDataSource setDefaultTargetDataSource in the Spring Framework had a typo with a trailing in its final sentence This affected versions 2 0 8 and 2 5 1 and was backported to 2 0 9 The issue was noted by Chris Lee who also received thanks from Juergen Hoeller for identifying it Despite the minor nature of the error it was acknowledged and appreciated as a useful contribution to maintaining the quality of the documentation,0,0,1,1,0,0,0
In the Spring reference manual version 2 5 1 Table 9 2 contains a markup issue where the order attribute s description improperly includes the literal string code Transactional code This affects versions 2 0 8 and 2 5 1 and has been backported to version 2 0 9 Chris Lee reported this issue and Juergen Hoeller acknowledged it thanking Chris for identifying the problem,0,0,1,1,0,0,0
The issue in the Spring Framework reference manual version 2 5 1 involves a poorly worded sentence under section 9 6 about programmatic transaction management The sentence in question is missing a matching closing parenthesis leading to confusion It suggests using the TransactionTemplate for programmatic transaction management but lacks clarity This problem affects versions 2 0 8 and 2 5 1 and has been addressed in version 2 0 9 as a backport fix,0,0,1,1,0,0,0
David Thomas Hume reported small spelling and grammar errors in the Spring Web MVC reference documentation affecting versions 2 0 8 and 2 5 1 A patch file webmvctypos diff was attached to address these issues The corrections were backported to version 2 0 9 Juergen Hoeller acknowledged the report expressing gratitude for highlighting the errors,0,0,1,1,0,0,0
Paul Newport reported a typo in the Spring documentation specifically in Section 3 10 The incorrect word libary should be corrected to library in the sentence about deploying a Spring ApplicationContext as a RAR file This typo affects version 2 5 1 Juergen Hoeller acknowledged and thanked Paul for identifying the error,0,0,1,1,0,0,0
The documentation bug in the Spring Framework involves a typo in chapter 3 4 2 where prototype scoped should be singleton scoped This section discusses the responsibility of client code in cleaning up prototype scoped objects and releasing resources The mistake implies that a custom bean post processor can help release resources for singleton scoped beans which is incorrect The issue affects versions 2 0 7 and 2 5 final and has been backported to version 2 0 8 Juergen Hoeller acknowledged the error and thanked the reporter Oleksandr Alesinskyy for identifying it,0,0,1,1,0,0,0
In the Spring framework references to DelegatingFacesELResolver need to be updated to SpringBeanFacesELResolver in both the reference documentation and Javadoc This issue identified under ticket SPR 4198 https jira spring io browse SPR 4198 was highlighted by Joris Kuipers Despite some initial corrections the outdated classname persisted in the Spring 2 5 final documentation Jawher Moussa pointed out its presence in the reference PDF Juergen Hoeller confirmed the oversight noting that while the reference documentation had been updated the Javadoc had not This correction was slated for the Spring 2 5 1 release and reflected in nightly snapshots with plans to update online documentation post release,0,0,1,1,0,0,0
In the Spring 2 0 2 5 documentation there was confusion about which features were deprecated in which version The section 2 7 1 4 initially mentioned deprecations since Spring 2 0 but lacked clarity on whether certain deprecations applied to version 2 0 or 2 5 It was suggested to clarify this by specifying As of Spring 2 5 to make the versioning clear Juergen Hoeller acknowledged this issue and updated the documentation to clearly mark which deprecations apply to Spring 2 0 and which to 2 5 addressing the ambiguity,0,0,1,1,0,0,0
In section 23 2 3 of the Spring reference manual there was a broken link to the SchedulerFactoryBean Javadoc resulting in a 404 error The incorrect link was http www springframework org docs api org springframework scheduling quartz SchedulerFactoryBean html It should be corrected to http static springframework org spring docs 2 5 x api org springframework scheduling quartz SchedulerFactoryBean html This issue affected version 2 5 RC2 Juergen Hoeller acknowledged the problem and confirmed that all Javadoc links in the reference manual have been updated to the correct Spring 2 5 documentation,0,0,1,1,0,0,0
The issue in SPR 4085 highlights that the JavaDoc for DispatcherServlet in Spring Framework version 2 5 RC2 did not include recent updates specifically the addition of DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter Chris Lee identified the discrepancy and Juergen Hoeller acknowledged the oversight confirming the documentation has been updated for both DispatcherServlet and DispatcherPortlet to accurately reflect these defaults This ensures that developers have accurate information about the default components used in the servlet configuration,0,0,1,1,0,0,0
The JavaDoc for AbstractDetectingUrlHandlerMapping detectHandlers incorrectly claims that it registers any bean with a name resembling a URL However the actual implementation does not examine the bean name Instead it delegates the task to the abstract method determineUrlsForHandler This discrepancy was identified and reported in issue SPR 4078 by Chris Lee The issue affects version 2 5 RC1 and Juergen Hoeller acknowledged the oversight thanking Chris for pointing it out,0,0,1,1,0,0,0
A typo was identified in the Spring 2 5 JMX documentation by Peter Mularien In Table 20 3 titled Source Level Metadata Parameters the first parameter s capitalization was incorrect It should be objectName instead of ObjectName This issue affects versions 2 0 7 and 2 5 RC1 Juergen Hoeller acknowledged the correction with appreciation,0,0,1,1,0,0,0
The reference manual for section 9 5 8 contains a typo in the first paragraph where Hhow is mistakenly written This section discusses executing both transactional operations and basic profiling advice within the context of using tx annotation driven The issue was identified in version 2 5 RC1 and Martin Ahrer reported it under SPR 4044 Juergen Hoeller acknowledged and thanked Martin for catching the error,0,0,1,1,0,0,0
In the Spring Framework issue SPR 4003 Eberhard Wolff noted that the reference manual incorrectly stated that import elements must precede bean elements He observed that imports can successfully occur after beans Juergen Hoeller confirmed the outdated nature of this documentation and stated that the incorrect comment has been removed This issue affects versions 2 0 7 and 2 5 RC1,0,0,1,1,0,0,0
Mike Dillon reported an issue in the Spring configuration documentation SPR 4000 regarding invalid XML examples in xsd configuration xml The problem was that XML comments were placed before the XML declaration rendering the document not well formed This error affects version 2 5 RC1 Juergen Hoeller acknowledged the issue and thanked Mike for identifying it indicating it would be addressed,0,0,1,1,0,0,0
A typo was identified in the Spring documentation by John Towell specifically in section 3 7 2 1 regarding the PropertyPlaceholderConfigurer The text incorrectly referred to it as PropertiesPlaceholderConfigurer This caused confusion when searching for the Javadoc Juergen Hoeller acknowledged the mistake and thanked John for reporting it The issue affects version 2 0 7 of the documentation,0,0,1,1,0,0,0
The issue SPR 3917 https jira spring io browse SPR 3917 redirect false highlights minor typographical errors in the Spring AOP reference documentation Specifically in section 6 3 4 there s an unnecessary comma in types matching com xzy myapp service and the implement interface attribute uses an unqualified type UsageTracked Juergen Hoeller notes that the id attributes for elements like advisor and aspect are primarily descriptive While not strictly necessary they serve for custom identifiers and registration purposes in the context of advisors The discussion also touches on the purpose of these elements and their attributes within AOP configurations,0,0,1,1,0,0,0
The issue SPR 3889 was reported by Svend Vanderveken highlighting a typo in the documentation for Spring framework versions 2 0 6 and 2 1 M4 The error was in chapter 3 3 7 where the phrase The above example is generally is not a desirable solution since should be corrected to The above example generally is not a desirable solution since Juergen Hoeller acknowledged and thanked Svend for identifying the mistake,0,0,1,1,0,0,0
In the Spring documentation Chapter 9 section 9 5 7 an error in the sample configuration file was identified The configuration for advising transactional operations incorrectly uses the attribute order within a property tag The line property name order order 1 should be corrected to property name order value 1 This mistake affects versions 2 0 6 and 2 1 M4 The issue was reported by Steven and acknowledged by Juergen Hoeller who thanked Steven for identifying the error,0,0,1,1,0,0,0
The NativeJdbcExtractorAdapter in Spring s JDBC module has incorrect JavaDoc comments for its getNative methods These comments mistakenly indicate that the return type is always the original Connection regardless of the actual type such as Statement PreparedStatement etc The expected behavior is that these methods should return the underlying native JDBC object if possible or else the original object type This issue affects versions 2 0 6 and 2 1 M3 Juergen Hoeller acknowledged the error and thanked the reporter for identifying it,0,0,1,1,0,0,0
In the Spring documentation for aop aspectj autoproxy an error was identified where the aop prefix was missing from the include tags The correct format should use aop include for each bean This issue affects versions 2 0 6 and 2 1 M3 Kaj Hejer reported this and Juergen Hoeller acknowledged the oversight expressing gratitude for the correction,0,0,1,1,0,0,0
Chris Lee identified an error in the Spring reference manual version 2 1M3 Chapter 10 regarding DAO support The manual incorrectly states that a class hierarchy image is above the text when it is actually located below This issue affects versions 2 0 6 and 2 1 M3 Juergen Hoeller acknowledged the mistake and thanked Chris for pointing it out,0,0,1,1,0,0,0
In the Extensible XML authoring section an issue was identified with inconsistent use of namespaces in examples Specifically examples intended to use http www mycompany com schema myns mistakenly used http www springframework org schema myns causing them to fail out of the box Stefan Bodewig opened the issue SPR 3808 and provided a trivial patch to correct the namespace inconsistency This patch ensures all examples use the correct namespace enabling them to function properly The issue affects versions 2 0 6 and 2 1 M3 Juergen Hoeller acknowledged the correction and expressed gratitude for the fix,0,0,1,1,0,0,0
The JavaDoc for CommonAnnotationBeanPostProcessor in Spring lacked information about its implicit configuration which is important for understanding its usage with context component scan and context annotation config This oversight also applies to similar post processors like RequiredAnnotationBeanPostProcessor PersistenceAnnotationBeanPostProcessor and AutowiredAnnotationBeanPostProcessor Chris Lee highlighted this issue prompting Juergen Hoeller to update the JavaDocs with the necessary details to aid developers in correctly implementing these components,0,0,1,1,0,0,0
In the Spring reference manual 2 1M3 section B7 2 there s a typo involving custom attributes on bean elements A bean is defined with a jcache cache name attribute but in the subsequent text it s mistakenly referred to as cache cache name missing the leading j This issue affects versions 2 0 6 and 2 1 M3 Chris Lee reported the discrepancy and Juergen Hoeller acknowledged the error thanking Chris for identifying it,0,0,1,1,0,0,0
The Spring Framework reference manual for version 2 1M3 incorrectly states that it supports Java 1 3 while failing to mention its support for Java 6 As of version 2 1M1 Java 1 3 is no longer supported and Java 6 support has been added according to the changelog Additionally the manual refers to Java 1 5 which should be updated to Java 5 This discrepancy was noted by Chris Lee in issue SPR 3765 Juergen Hoeller acknowledged the error and mentioned that the Java 1 3 references have been corrected although there is still no updated What s new in Spring 2 1 section,0,0,1,1,0,0,0
The Spring Framework documentation for version 2 1 M3 fails to mention the inclusion of PersistenceAnnotationBeanPostProcessor among the implicitly registered post processors While it correctly lists AutowiredAnnotationBeanPostProcessor CommonAnnotationBeanPostProcessor and RequiredAnnotationBeanPostProcessor the documentation overlooks that PersistenceAnnotationBeanPostProcessor is also registered when JPA is present This oversight was noted by Chris Lee and acknowledged by Juergen Hoeller who confirmed the change in version 2 1 M3 and thanked Chris for identifying the documentation gap,0,0,1,1,0,0,0
The issue SPR 3723 addresses the unclear documentation on whether the argNames annotation parameter and arg names XML attribute should include a JoinPoint ProceedingJoinPoint parameter in advice methods The behavior differs between schema and Aspect styles In schema based aspects such as aop around omitting the ProceedingJoinPoint in arg names causes exceptions However in Aspect style with aop aspectj autoproxy this is not required The request is to document this clearly with examples and ensure consistency between the two styles Updates have been made to process arg names and argNames consistently and to clarify documentation with examples included Feedback on documentation clarity is requested and considerations for backporting to 2 0 x are ongoing,0,0,1,1,0,0,0
In the JRuby documentation an issue was identified where the Messenger example incorrectly extends an interface causing a TypeError because JRuby requires a superclass to be a class This behavior was supported in JRuby versions up to 0 9 9 but was removed in JRuby 1 0 Since Spring 2 1 supports JRuby 1 0 the documentation has been updated accordingly Juergen Hoeller acknowledged the oversight and thanked the community for pointing it out Additionally Paul Gresham mentioned that the example is overly complicated and suggested improvements to highlight the effective JRuby integration,0,0,1,1,0,0,0
The issue SPR 3667 was raised by Paul Benedict to address outdated references to Hibernate 2 x in Spring s documentation specifically in chapter 12 2 The text incorrectly stated that Hibernate 2 x was still supported prompting a request for editing or deletion of such references Rick Evans acknowledged the issue and confirmed that it had been resolved,0,0,1,1,0,0,0
The issue reported in SPR 3597 involves missing explicit order attributes in example code from the Spring reference manual specifically in section 9 5 7 Advising transactional operations The first example lacks an explicit order attribute on the tx annotation driven element while the second example correctly sets the order for both custom and transactional advice This discrepancy affects versions 2 0 5 2 1 M1 and 2 1 M2 Rick Evans acknowledged that the first example s order defaults to Integer MAX VALUE if not specified indicating the lowest precedence To address this the documentation was updated to include the explicit order attribute in the first example ensuring consistency between both examples,0,0,1,1,0,0,0
The issue reported in SPR 3595 highlights a documentation error for the org springframework test annotation Timed annotation in Spring 2 0 5 The Javadoc incorrectly mirrors that of org springframework test annotation Repeat describing the annotation as one that allows a test method to be invoked repeatedly This is misleading because Timed includes a long millis attribute which is not reflected in the documentation Juergen Hoeller mentioned that the issue has been backported to version 2 0 6 as part of a broader update while Rick Evans confirmed the fix for the CVS HEAD 2 1 M3 and planned to address it in the 2 0 6 branch,0,0,1,1,0,0,0
The Spring documentation initially stated that the Transactional annotation only applied to public methods However since Spring 2 0 1 it supports protected and private methods as well Juergen Hoeller clarified that the documentation was updated in versions 2 0 6 and 2 1 M3 He explained that Spring AOP generally avoids intercepting non public methods to maintain consistent proxy behavior between JDK and CGLIB proxies Proxies can t handle internal method calls which AspectJ weaving can This distinction helps prevent confusion Taras Tielkes suggested including more background in the documentation about these limitations for better clarity,0,0,1,1,0,0,0
In the Spring Framework advice ordering within the same aspect depends on the declaration order according to the AOP documentation However in Java the order of method declarations cannot be reliably queried at runtime This issue was highlighted in SPR 3589 noting that while AspectJ might handle this differently Java lacks this capability To address this Juergen Hoeller suggested collapsing multiple advice methods into a single method per joinpoint or refactoring them into separate aspect classes to establish a clear order This change is pertinent to versions 2 0 5 and 2 1 M2,0,0,1,1,0,0,0
The documentation on aop pointcut visibility in Spring is incorrect It claims that a pointcut declared inside an aspect is visible only within that aspect while one declared inside an aop config can be shared across multiple aspects However in practice these visibility rules are not enforced The aop config parser registers any pointcut without considering visibility and using pointcut elements with the same id in different aop aspect elements results in a runtime exception due to duplicate xsd ID values The documentation should be corrected to reflect this behavior as the current visibility logic is unnecessary Juergen Hoeller acknowledged this issue and thanked the reporter,0,0,1,1,0,0,0
In Section 8 3 1 of the documentation it was incorrectly stated that getConfigLocations is an abstract method However this method is no longer abstract due to the introduction of alternative template methods for specifying configuration locations or paths This discrepancy was noted in issue SPR 3475 by Rusty Wright and confirmed by Juergen Hoeller who acknowledged the mistake and thanked Wright for highlighting it The issue affects version 2 0 5 of the software,0,0,1,1,0,0,0
Marc Logemann reported an error in the documentation for version 2 0 3 specifically in Table 9 2 where tx annotation drive should be corrected to tx annotation driven Juergen Hoeller acknowledged the issue and thanked Marc for identifying it,0,0,1,1,0,0,0
In the Spring framework reference documentation an error was identified where a bean definition contained a duplicate attribute in the XML snippet Specifically the proxy target class attribute appeared twice within the aop scoped proxy tag xml bean id userPreferences class com foo DefaultUserPreferences scope session aop scoped proxy proxy target class false proxy target class false bean This mistake results in malformed XML which can cause issues during parsing The issue was reported by J rg Heinicke and acknowledged by Juergen Hoeller affecting version 2 0 3 of the framework,0,0,1,1,0,0,0
The issue SPR 3206 opened by Alef Arendsen highlights the absence of JavaDoc for the ManagedNotification and ManagedNotifications annotations in the Spring Framework These annotations are part of the org springframework jmx export annotation package and were not documented affecting version 2 0 2 The lack of documentation can hinder developers understanding and usage of these annotations which are intended for managing JMX notifications Proper JavaDoc would provide necessary guidance and enhance the usability of these features in the framework,0,0,1,1,0,0,0
The issue reported in SPR 3157 involves a mistake in the DTD file name within the Spring Framework documentation for version 2 0 2 The incorrect DTD reference in the file springapp servlet xml was xml DOCTYPE beans PUBLIC SPRING DTD BEAN 2 0 EN http www springframework org dtd spring beans 2 0 dtd This should be corrected to xml DOCTYPE beans PUBLIC SPRING DTD BEAN 2 0 EN http www springframework org dtd spring beans 2 0 dtd The error was in the underscore instead of a hyphen in the DTD URL However Rick Evans commented that the example has since been updated to use the Spring XSD schema instead of the DTD resolving the issue,0,0,1,1,0,0,0
The Javadoc documentation for the Spring Framework had several cosmetic and missing issues Claus Ibsen opened a ticket to address these highlighting ten specific areas Some key issues included a humorous Here be dragons comment in RuntimeTestWalker indicating code that needed refinement Missing class level Javadocs were noted for several classes such as AdvisorComponentDefinition LangNamespaceHandler and TxNamespaceHandler Additionally annotations like ManagedNotification lacked documentation A link update was required for org springframework orm ibatis due to a move to Apache Formatting issues affected summary text visibility in classes like TilesJstlView These issues were mostly addressed with fixes scheduled for version 2 0 3,0,0,1,1,0,0,0
The Javadoc for the ReflectiveLoadTimeWeaver class in the Spring Framework has an excessively long text description in its summary This issue identified by Claus Ibsen and acknowledged by Juergen Hoeller is located in the package org springframework instrument classloading The summary s length is considered problematic and it is suggested that it should be shortened to improve readability and clarity This issue affects version 2 0 2 of the framework,0,0,1,1,0,0,0
Saladin Sharif reported an error in section 9 5 4 of the Spring reference documentation where an XML code example for configuring different transactional semantics for beans was incorrect and caused errors when followed More details on this issue can be found in a Spring Forum post Rick Evans later confirmed that the issue has been fixed and thanked Saladin for identifying the problem,0,0,1,1,0,0,0
A typo in the notice txt file of the Spring framework was identified by Andreas Senft suggesting Alternately should be corrected to Alternatively in the context of third party acknowledgments This correction is important as it relates to the license agreement Juergen Hoeller acknowledged the issue noting that the error originated from the original suggestion for the notice file and is common across many such files The Spring framework has since updated the notice to reflect the correct term The typo affected versions 1 2 8 and 2 0 2 and was backported to version 1 2 9,0,0,1,1,0,0,0
In the Spring Framework several classes within the org springframework core style package have Javadoc references to a non existent class called ToStringBuilder These references should be corrected to ToStringCreator This issue was identified by Fabio Grassi and impacts versions 1 2 8 and 2 0 2 The fix has been backported to version 1 2 9 Juergen Hoeller acknowledged the issue and expressed gratitude for the report,0,0,1,1,0,0,0
The documentation for the Groovy inline script bean in Spring had a bug regarding the order of elements The lang inline script element was incorrectly placed after the lang property elements in the example provided According to the spring lang 2 0 xsd schema the correct order requires the lang inline script to precede the lang property elements This misordering was highlighted in a patch attached to the issue SPR 3089 The error affected version 2 0 2 and was reported by Woonsan Ko Rick Evans acknowledged the issue and confirmed it was fixed The correction ensures the inline script is positioned correctly before the properties in the documentation,0,0,1,1,0,0,0
In Section 17 3 3 an issue was reported regarding incorrect URL configuration for a remote service in Spring The property serviceUrl was mistakenly set to http remotehost 8080 AccountService instead of the correct http remotehost 8080 remoting AccountService This error was identified by Carsten Ziegeler and acknowledged by Rick Evans who confirmed that the issue was corrected in version 2 0 3 of the software The problem affected version 2 0 2 highlighting the importance of precise URL configurations in remote service integrations,0,0,1,1,0,0,0
The issue in BeanConfigurerSupport java involved a missing parenthesis in the Javadoc for the configureBean method This was reported by Kaj Hejer under issue SPR 3068 https jira spring io browse SPR 3068 redirect false affecting version 2 0 2 of the software Rick Evans acknowledged and fixed the problem thanking Kaj for identifying it This highlights the importance of community feedback in maintaining code quality and documentation accuracy,0,0,1,1,0,0,0
In Chapter 11 of the code documentation two typos were identified in different sections In the SimpleJdbcTemplate section the method actor setId rs getLong Long valueOf rs getLong id should be corrected to actor setId rs getLong id This simplifies the retrieval of the ID from the result set In the StoredProcedure section fifth example the method declaraParameter new SqlParameter CUTOFF DATE PARAM Types DATE should be corrected to declareParameter new SqlParameter CUTOFF DATE PARAM Types DATE This resolves a spelling error in the method name These issues were noted by Karl Moore and addressed by Rick Evans,0,0,1,1,0,0,0
Paul Benedict reported a markup error in Java code related to the SqlUpdate section in the Spring Framework documentation The issue involved incorrect inclusion of markup tags around a Java comment block The code snippet provided mistakenly wrapped the comment with lineannotation lineannotation Juergen Hoeller acknowledged the issue thanking Paul for identifying it Despite being marked as fixed Paul noted that the correction was not visible in the 2 0 2 reference documentation specifically in the Single HTML page version,0,0,1,1,0,0,0
In the issue SPR 2990 Oran Epelbaum highlights a documentation error in the setProtocol method for JavaMailSender The documentation incorrectly states that the default protocol is SMTP when it is actually smtp This mistake can lead to a NoSuchProviderException if the protocol is explicitly set to SMTP by users expecting default behavior Rick Evans acknowledges the issue and confirms it has been corrected The affected version is 2 0 1,0,0,1,1,0,0,0
In the Spring framework issue SPR 2984 Ryan Berdeen identified two typographical errors in Appendix B The first error in Section B 7 2 involves the incorrect use of the attribute name cache name instead of jcache name in an XML listing The second error located in Section B 8 features an extra X in XXML These issues affected version 2 0 1 Rick Evans acknowledged the report and confirmed that the errors have been corrected,0,0,1,1,0,0,0
The issue SPR 2973 opened by Dave Kelly highlights a broken link in the Spring documentation The link meant to direct users to Bob Martin s article on the Open Closed Principle is incorrect in Section III Chapter 13 1 The correct URL should be http www objectmentor com resources articles ocp pdf This issue affects version 2 0 1 of the documentation Juergen Hoeller acknowledged the problem and thanked Dave for identifying it,0,0,1,1,0,0,0
In Chapter 12 2 of a Spring documentation a typo was identified in the code for implementing Spring based DAOs without callbacks The incorrect code used a non existent session find method The correct implementation involves using session createQuery to fetch products by category This code error was noted by Karl Moore and affects version 2 0 1 Juergen Hoeller commented that the error likely stems from outdated Hibernate 2 1 code samples as Hibernate 3 x uses different methods Rick Evans confirmed that the ORM chapter examples have been updated to be Hibernate 3 x specific removing the outdated references,0,0,1,1,0,0,0
In Chapter 5 of the document a typo was noted regarding the name property which was incorrectly associated with the Employee class instead of the company The issue logged as SPR 2938 by Karl Moore highlighted that Employee only had a salary property An example code snippet demonstrated this mistake by attempting to assign a name to an Employee object Juergen Hoeller acknowledged the error and confirmed adding the missing name property to the Employee class to resolve the problem The issue affected version 2 0 1 of the software,0,0,1,1,0,0,0
The issue SPR 2936 reported by Karl Moore highlights a typo in the implementation of BlackListNotifier It should correctly use implements instead of implement when declaring that BlackListNotifier adheres to the ApplicationListener interface in the code Juergen Hoeller acknowledged the correction and thanked Moore for identifying the error,0,0,1,1,0,0,0
A typo in the ReplacementComputeValue code was reported by Karl Moore noting a missing bracket that affects the reimplement method Juergen Hoeller confirmed that such issues should indeed be reported though suggested consolidating multiple typos into a single report Karl acknowledged this advice mentioning he had been reviewing the new manual and would compile future reports unless individual fixes were preferred This exchange underscores the importance of clear communication and efficient issue tracking in development,0,0,1,1,0,0,0
In the Spring Framework issue SPR 2934 Karl Moore identified a typo in a method name it reads setMoveFinder but should be setMovieFinder This issue affects version 2 0 1 Juergen Hoeller acknowledged and thanked Karl for catching the error,0,0,1,1,0,0,0
In the Spring Reference documentation a few minor bugs were noted First the property editor for Pattern was missing from the Built In property editors section Additionally the cover page of the 2 0 1 PDF incorrectly displayed 2 0 instead of 2 0 1 Juergen Hoeller acknowledged the omission and confirmed that PatternEditor would be added to the list Upon review he found the PDF for 2 0 1 appeared correct but he planned to verify it again for the 2 0 2 release Oleksandr Alesinskyy later admitted his mistake regarding the PDF appearance,0,0,1,1,0,0,0
In the Spring Framework documentation for version 2 0 an error was identified in Section 5 2 which discusses validation using Spring s Validator interface The example class CustomerValidator had a constructor incorrectly named UserValidator This issue was reported by Steve Miner under ticket SPR 2889 Juergen Hoeller noted that the error has been corrected by Rick for version 2 0 1,0,0,1,1,0,0,0
In the Spring Framework issue SPR 2812 https jira spring io browse SPR 2812 Fabio Grassi pointed out a typo in the reference manual version 2 0 page 93 The constructor declaration in the example code was incorrectly written as public UserValidator Validator addressValidator and should have been public CustomerValidator Validator addressValidator Rick Evans acknowledged the error and confirmed it was fixed,0,0,1,1,0,0,0
Fabio Grassi reported a typo in the Spring 2 0 reference manual page 53 The method declaration shown is protected abstract CommandHelper createHelper but it should be protected abstract Command createCommand Rick Evans responded that the issue had already been identified and corrected in the CVS HEAD,0,0,1,1,0,0,0
Julio Aguilar reported an issue with the Spring 2 0 package noting that invoking doc html without the necessary libraries references a missing docs reference readme txt file The entire source for documentation and several style files are also absent prompting consideration for a new issue Aguilar managed to obtain the HTML reference using wget but suggests that either the HTML docs should be included in the release or the README should provide instructions for obtaining or building them Rick Evans addressed the concern by attaching the README txt file and suggesting that users can access the source directory via anonymous CVS for editing Evans is open to including DocBook sources in the release seeking clarification on Aguilar s objectives,0,0,1,1,0,0,0
The documentation for the frozen property in ProxyFactoryBean was confusing It originally stated that when frozen is true advice changes should be disallowed after the proxy factory is configured which contradicts the default setting being false The source code indicates that setting frozen to true prevents changes aligning with the intent for optimization and preventing configuration manipulation The documentation was updated to clarify that when frozen is false changes to the proxy configuration are indeed allowed after configuration,0,0,1,1,0,0,0
The issue SPR 2695 opened by David Varnes highlights the absence of two test packages org springframework test annotation and org springframework test jpa from the distribution zip and published site of Spring s 2 0 final release Juergen Hoeller acknowledged the oversight noting that the omission was due to not including the new tiger mock directory in the javadoc target,0,0,1,1,0,0,0
The issue SPR 2676 notes that the BeanDefinitionBuilder Javadoc mistakenly references BeanDefinitionRegistryBuilder which was removed in the Spring 2 0 release The removal was due to its limited utility as recent improvements in BeanDefinitionReaderUtils made it redundant Additionally BeanDefinitionRegistryBuilder did not actually construct a BeanDefinitionRegistry making its name misleading Juergen Hoeller confirmed that all Javadoc references to the removed class have been updated accordingly,0,0,1,1,0,0,0
In the Spring reference manual a user identified potential typos related to transaction configuration On page 161 a sample configuration in a gray box shows a pointcut expression for transaction semantics However a discrepancy was noted where the classes for two beans meant to receive transactional advice didn t match the package structure specified in the pointcut Additionally inconsistencies were found on page 159 between the terms fooServiceMethods and fooServiceOperation in the example and explanatory text The issue was confirmed as a typo by Rick Evans and corrected in time for the 2 0 final release,0,0,1,1,0,0,0
In the Spring Framework Reference Manual PDF the link to the taglib documentation in section 14 2 3 was reported as broken by Jing Xue in issue SPR 2654 This issue affected version 2 0 RC4 Rick Evans resolved the problem by updating the link to point to the relevant appendix within the reference documentation ensuring it no longer directed users to an external site This fix enhances the accessibility and reliability of the documentation,0,0,1,1,0,0,0
A minor typo was found in the Spring Framework documentation for the spring bind tag present since version 1 x The typo involves a missing equal sign between var and error in example usages which should be corrected from var error to var error This issue affects versions 1 2 8 and 2 0 RC4 and has been backported to version 1 2 9 Juergen Hoeller acknowledged the correction,0,0,1,1,0,0,0
The issue SPR 2626 was opened by J rg Heinicke highlighting a discrepancy in the naming of a DTD file within the Spring documentation The file is incorrectly referred to as spring beans 2 0 dtd instead of the correct spring beans 2 0 dtd This inconsistency appears throughout the document and specifically in Appendix C Juergen Hoeller acknowledged the mistake and expressed gratitude for identifying it The issue affects version 2 0 RC4 of the software,0,0,1,1,0,0,0
The issue SPR 2545 discusses an incorrect property name in the Spring Framework documentation for configuring LocalEntityManagerFactoryBean The example incorrectly uses entityManagerName instead of the correct persistenceUnitName This affects version 2 0 RC3 and was identified by Tan Quach Juergen Hoeller acknowledged the mistake thanking Tan for highlighting it Tan later commented that the issue should be marked as Trivial,0,0,1,1,0,0,0
In the Spring framework reference documentation an error was identified in the example usage of ControllerClassNameHandlerMapping The documentation incorrectly stated that AdminController maps to the welcome URL when it should map to admin This was pointed out by Andrew Swan who also noted a spelling mistake understandeable instead of understandable Rick Evans acknowledged the mistake and corrected it expressing regret for the initial error The issue affects version 2 0 RC3,0,0,1,1,0,0,0
In Section 11 2 3 of the Spring 2 0 Manual a documentation issue was identified regarding the RowMapper and ParameterizedRowMapper interfaces The original examples won t compile as they lack concrete implementations Rick Evans clarified that these interfaces are intended to be implemented using Java s anonymous inner classes where users provide specific logic in the mapRow method There are no predefined implementations in Spring instead examples can be found in the Spring test suite or JDBC chapter of the documentation The documentation was corrected to illustrate proper usage with anonymous inner classes,0,0,1,1,0,0,0
In Spring there s an issue with the Transactional annotation applied to interfaces Its behavior changes based on the proxy target class attribute in the tx annotation driven tag When proxy target class is set to false the annotation works as expected However if it s true the annotation on the interface is ignored unless also present on the class This affects not just Transactional but potentially all Spring AOP configurations The problem isn t well documented and suggestions include adding detailed documentation and allowing class filtering in transaction tags Annotating classes is preferred as it ensures consistent transactional behavior JDK proxies can handle interfaces but caution is needed with interfaces sharing method names,0,0,1,1,0,0,0
In the Spring framework there s an issue with Transactional annotations on interfaces not behaving as expected The problem arises because annotations on interfaces are not inherited by implementing classes as per Java s specification Despite AspectJ s weaving showing that methods from interfaces are properly processed transactions aren t created if the implementing class isn t directly annotated This behavior contradicts Spring s documentation which has been updated to clarify that the Transactional annotation must be on the implementation class or its methods not on the interface This ensures transaction semantics are applied correctly The AspectJ team decided to adhere to Java s rules even though it leads to inconsistencies with the tx annotation driven feature which sometimes recognizes interface annotations,0,0,1,1,0,0,0
The documentation for BaseCommandController createCommand in Spring suggests that commands require public no arg constructors as it uses BeanUtils instantiateClass However BeanUtils instantiateClass can actually work with private constructors by attempting to make them accessible This discrepancy led to a proposal to update the documentation indicating that public no arg constructors are not required This was noted as an issue in version 2 0 RC3 with acknowledgment from Juergen Hoeller for highlighting the inconsistency,0,0,1,1,0,0,0
In the reported issue SPR 2504 there is a bug involving transaction processing when using a mix of Spring managed beans and load time weaved objects The problem arises when a class annotated with Configurable and having methods marked with Transactional is instantiated using new The load time weaving is enabled via AspectJ which causes conflicts The TransactionSynchronizationManager reports an active transaction but PlatformTransactionManager fails to recognize it causing exceptions This occurs specifically with CGLIB proxy classes which aren t correctly picked up due to the proxy class naming The resolution involved adjusting the AnnotationBeanWiringInfoResolver to handle these proxies Additionally an AOPAlliance bug which throws a NullPointerException when constructing exceptions exacerbates the issue The problem is specific to configurations where Transactional and Configurable are combined under these conditions,0,0,1,1,0,0,0
The documentation for the tx annotation driven tag in Spring contains an error it lacks the transaction manager attribute assuming a default name transactionManager for the transaction manager bean while it is actually named txManager The documentation on transaction tags is scattered and incomplete making it unclear which attributes are available for each tag The default value for the transaction manager attribute is not specified and the relevant information is buried in a long code snippet It s suggested that instead of claiming comprehensive coverage in Chapter 9 the documentation should direct users to the Spring XML schema file spring tx xsd for syntax details Rick Evans responded acknowledging the issue and stating that corrections were made He invited further feedback to improve the transaction documentation which is still in the draft phase,0,0,1,1,0,0,0
In the Spring 2 0 AOP section of the Spring 2 0 reference PDF a sentence in the second paragraph refers to section 6 4 but lacks clarity The phrase choosing which AOP declaration style to use should be enclosed in quotes and prefixed with section to clarify its reference to the section title This adjustment aims to improve readability and understanding The issue was noted in version 2 0 RC3 and Juergen Hoeller confirmed that the correction has been made,0,0,1,1,0,0,0
In the Spring Framework issue SPR 2486 Rick Mann identified an error in the Spring 2 0 reference documentation The example configuration XML for the transaction manager incorrectly uses the xmlns jndi namespace It should be xmlns jee http www springframework org schema jee aligning with the guidelines in Appendix A 2 3 The issue affects version 2 0 RC3 Juergen Hoeller acknowledged the mistake and thanked Mann for reporting it Mann noted the priority of the issue as minor,0,0,1,1,0,0,0
In an integration test example from the Spring Reference 2 0 manual there was a database type mismatch noted by Rick Mann The text incorrectly referred to a JDBC implementation in the PetClinic tests which should have been Hibernate This error appeared on pages 144 145 of the manual Rick Evans acknowledged the mistake and confirmed it was fixed The issue affected version 2 0 RC2 of the documentation,0,0,1,1,0,0,0
In a reported issue SPR 2473 Oleksandr Alesinskyy identified a documentation bug in the aop xml snippet within the Spring Reference Guide The problematic code involved incorrect usage of commas to separate options whereas AspectJ requires whitespace separation The erroneous snippet used commas while the corrected version removed them to comply with AspectJ s requirements Despite this error it was noted that the output remains the same regardless of whether showWeaveInfo is included The issue affected version 2 0 RC3 and was acknowledged and fixed by Rick Evans who thanked Alesinskyy for catching the mistake,0,0,1,1,0,0,0
In the Spring Framework documentation a bug was identified in the import statements for Configurable on page 124 of the Reference Guide The incorrect import import org springframework beans factory annotation was used instead of the correct import org springframework beans factory annotation Configurable or import org springframework beans factory annotation This issue affected version 2 0 RC3 Rick Evans acknowledged and fixed the error thanking Oleksandr Alesinskyy for reporting it,0,0,1,1,0,0,0
The issue SPR 2423 opened by Esko Luontola addresses several typographical and stylistic errors in the Spring documentation Esko suggests avoiding less common idioms like to wit and replacing Latin abbreviations such as i e and e g with their English equivalents Various sections contain errors such as incorrect bean attribute names beans names to bean names and deprecated syntax using singleton instead of scope Inaccuracies also include misspellings registerd to registered improper sentence structure and misplaced phrases Additionally some code samples lack clarity or correctness such as missing fields and incorrect formatting Rick Evans acknowledges these errors and appreciates the comprehensive report expressing regret for the mistakes,0,0,1,1,0,0,0
In the Spring MVC tutorial there was an inconsistency where the example code used log4j rootLogger but the accompanying text referred to log4j rootCategory Although these terms are nearly equivalent log4j rootLogger is preferred Arnout Engelen suggested correcting this inconsistency Rick Evans acknowledged the suggestion and updated the Spring 1 2 x tutorial accordingly He noted that the log4j section was removed in Spring 2 0 making the issue irrelevant for that version Rick thanked Arnout for identifying and reporting the issue,0,0,1,1,0,0,0
The Spring 2 0 RC2 Reference Manual contains several documentation errors and areas needing improvement Notable issues include typos such as cnfiguration instead of configuration and unclear explanations such as the injection process for beans and join point definitions in AOP There are formatting problems like schema locations not fitting within their frames Certain sections lack clarity for example the description of class path resources and the use of CGLIB proxies Suggestions are made for clearer examples and explanations especially regarding pointcuts and annotations in AOP Additionally some technical details like the DefaultMessageCodesResolver behavior and schema based AOP limitations for JDK 1 5 require further elaboration or alternative solutions These issues have been acknowledged and are being addressed,0,0,1,1,0,0,0
The JPA documentation example code in section 12 7 contains an error The incorrect code snippet java Query query em createQuery from Product List result query execute category should be updated to java Query query em createQuery from Product as p where p category category query setParameter category category List result query getResultList This correction ensures the query correctly filters products by category using a parameter The issue was identified and confirmed by community members,0,0,1,1,0,0,0
The JIRA issue SPR 2381 highlights several typographical errors concept clarifications and example corrections in a Spring framework document Key points include correcting XM based to XML based and fixing minor typos like itsel to itself It also suggests rephrasing confusing explanations such as the potential for exceptions in Spring containers due to bean creation issues The issue addresses coding style improvements recommending the use of concise XML syntax for property and constructor arguments Additionally it clarifies the use of dependency tags in XML and suggests a clearer example to avoid inherent dependencies The document also needs clarification on inheritance of scope in bean definitions and accurate descriptions of abstract definitions Corrections are made to method names and text consistency with a request for better examples in certain sections Rick Evans acknowledges the corrections and expresses gratitude for the detailed issue report,0,0,1,1,0,0,0
A JIRA issue SPR 2363 was opened by Paul Benedict regarding a copy paste error in the Spring Framework documentation The error involved the incorrect tool name VelocityEngineFactory getResourceLoader being used instead of the appropriate Spring ResourceLoader for FreeMarker templates This affected versions 1 2 8 and 2 0 RC2 Rick Evans acknowledged the oversight confirming that a fix had already been implemented in the CVS repository Paul was thanked for identifying the issue and reporting it,0,0,1,1,0,0,0
In the Spring Framework documentation for version 2 0 x several typos and unclear sentences were identified Key issues include an unclear sentence regarding bean dependencies which could be improved for clarity Additionally XM based was corrected to XML based in a section on configuration metadata Another sentence about instance factory methods was suggested to be rephrased for better clarity as its subject was unclear The possessive form Spring s was corrected in reference to XML based configuration metadata These edits were addressed and feedback was appreciated with an invitation for further issue reporting,0,0,1,1,0,0,0
The issue reported in SPR 2248 was that the JavaDoc documentation for the message attribute of spring message was missing from the Spring Framework 2 0 x tag library documentation Although it was absent from the JavaDoc it was correctly listed in the reference guide The problem affected version 2 0 RC1 Rick Evans acknowledged the issue and confirmed that it would be addressed by the RC3 release He also mentioned plans to fix the reference documentation s stylesheet to ensure completeness,0,0,1,1,0,0,0
In section 14 4 2 of the Spring documentation there s a correction needed for consistency The bean definition should change from bean id someViewController class org springframework web servlet mvc UrlFilenameViewController to bean id helpController class org springframework web servlet mvc UrlFilenameViewController This aligns with the description stating that requests for help html are routed to helpController The issue was noted in version 2 0 RC1 and has been fixed as acknowledged by Rick Evans,0,0,1,1,0,0,0
Mark Wolfe reported an issue with an example configuration in the Spring 1 2 documentation specifically section 9 3 5 which was non functional After comparing it with the 2 0 documentation he found differences and merged elements from both versions to create a working solution The original example improperly used AttributesJmxAttributeSource an interface rather than a concrete implementation Wolfe s corrected version included the AnnotationJmxAttributeSource and added a namingStrategy Rick Evans acknowledged the error apologized and appreciated the correction He encouraged Wolfe to contribute full examples for various use cases,0,0,1,1,0,0,0
In the Spring framework issue SPR 2127 Paul Benedict reported an error in the documentation that referenced a non existent class DependencyInjectionInterceptorFactoryBean in the org springframework orm hibernate support package After investigation it was found that this class does not ship with the Spring distribution but is available in the sandbox directory of the Spring CVS repository requiring users to compile it themselves Paul suggested that updating the documentation would resolve the issue which was agreed upon by Rick Evans The documentation was amended to clarify the class s location and users were encouraged to request its inclusion in the main distribution if desired,0,0,1,1,0,0,0
In the Spring Framework s documentation an error was identified in the section on sending attachments and inline resources The setText method was missing a comma in its parameters The incorrect code was java helper setText html body img src cid identifier1234 body html true It should be corrected to java helper setText html body img src cid identifier1234 body html true Additionally a typo was found in the createMimeMesage method call missing an s The corrected line is java MimeMessage message sender createMimeMessage These issues have been fixed as acknowledged by Rick Evans,0,0,1,1,0,0,0
An error in the Hivemind configuration for Tapestry integration was reported in SPR 2107 The issue arises when using construct class SpringApplicationInitializer in the configuration leading to exceptions due to the class not being fully qualified The correct configuration should be construct class com javaforge tapestry spring SpringApplicationInitializer This problem affected version 2 0 M5 and while it was fixed in the latest CVS HEAD and release it was initially missing from the online reference documentation Rick Evans acknowledged the oversight and promised to update the documentation Tony also confirmed encountering the issue in the Spring 2 0 documentation,0,0,1,1,0,0,0
The JavaDoc for org springframework jdbc core SqlReturnResultSet incorrectly stated it was a subclass of SqlOutParameter In reality SqlReturnResultSet extends ResultSetSupportingSqlParameter making it a sibling to SqlOutParameter not a subclass This error was reported by Fabio Grassi and affected version 1 2 8 Rick Evans acknowledged the issue and confirmed it was fixed,0,0,1,1,0,0,0
The issue SPR 1948 was opened by Rick Evans regarding the Spring reference documentation not displaying correctly because the CSS stylesheet wasn t resolved properly This affected the visual polish of the documentation though it remained legible The problem was specifically noted in version 2 0 M4 of the Spring framework There was a related issue 6651 about documentation images not being included in the distribution Rick Evans confirmed the CSS issue was fixed thanking the reporter for identifying it,0,0,1,1,0,0,0
In Spring version 2 0M3 the documentation initially stated that CGLIB proxies are used when no proxy interfaces are defined However this isn t accurate if the class implements interfaces The manual needed clarification on when Spring uses CGLIB versus JDK proxies and how they behave Juergen Hoeller noted that since version 2 0 x ProxyFactoryBean now automatically detects interfaces similar to TransactionProxyFactoryBean This change required updates in the documentation Rick Evans confirmed that the documentation was updated to describe the CGLIB versus JDK proxy strategies,0,0,1,1,0,0,0
The issue SPR 1843 opened by Costin Leau highlights that the HibernateInterceptor javadocs are outdated still reflecting Hibernate 2 behavior despite changes in Hibernate 3 which now uses unchecked exceptions The javadocs incorrectly state that checked HibernateException cannot be automatically converted requiring manual handling even if interception prevents it from being thrown This documentation discrepancy affects versions 1 2 7 and 2 0 M3 Costin offered to update the javadocs but Juergen Hoeller promptly resolved the issue,0,0,1,1,0,0,0
Carlos Sanchez opened issue SPR 1309 to report a wrong link in the Spring Framework s lib readme txt file The incorrect URL http www opensymphony org quartz should be updated to http www opensymphony com quartz Juergen Hoeller acknowledged the correction and thanked Carlos for identifying the error,0,0,1,1,0,0,0
The SampleController class in the MVC documentation is incorrect It defines a handleRequestInternal method that creates a ModelAndView but doesn t return it The method should return the created ModelAndView Additionally the XML bean definition uses outdated XML configuration style and should be updated The correct class should return a ModelAndView like this java package samples public class SampleController extends AbstractController public ModelAndView handleRequestInternal HttpServletRequest request HttpServletResponse response throws Exception return new ModelAndView foo new HashMap The XML configuration should also reflect the newer style for better consistency,0,0,1,1,0,0,0
In the JIRA issue SPR 1273 https jira spring io browse SPR 1273 redirect false Brad Schaefer highlighted a grammatical error in the JavaDocs for org springframework web servlet mvc Controller The documentation contained an incomplete phrase To be able to configure Controller in an easy Controllers are usually JavaBeans which likely intended to say in an easy way Juergen Hoeller acknowledged the mistake and thanked Brad for identifying it This issue affected version 1 2 4 of the software,0,0,1,1,0,0,0
In the Spring Framework documentation a typo in the term MultipartResovler was identified by Brad Schaefer under the issue SPR 1272 This was meant to be MultipartResolver Juergen Hoeller acknowledged the mistake and confirmed it has been corrected,0,0,1,1,0,0,0
In the Spring Framework documentation an issue was noted in section 22 2 2 regarding a typo in the description of dependency injection for test class instances The sentence mistakenly used yourr instead of your referring to the optional configuration of test class instances using Setter Injection Brad Schaefer identified this error and reported it in the issue SPR 1271 Juergen Hoeller acknowledged the mistake and confirmed that it had been corrected This highlights the continuous effort to maintain clarity and accuracy in documentation,0,0,1,1,0,0,0
The document highlights typographical errors in the Spring Framework documentation specifically in sections 10 2 1 and 10 2 5 In section 10 2 1 the term CallableStatementCreateor is misspelled and humorously suggested as a new term In section 10 2 5 singe should be corrected to single in the context of query methods The comments from users Brad Schaefer and Bob Armour add a lighthearted touch with Juergen Hoeller acknowledging the humor in the misspelling Createor The discussion reflects a focus on accuracy in documentation while maintaining a friendly tone,0,0,1,1,0,0,0
In the Spring framework documentation a typo was identified by Brad Schaefer in section 7 3 1 where integrationA was mistakenly used This error was reported under issue SPR 1269 Juergen Hoeller acknowledged the mistake and confirmed it was corrected promptly This illustrates the collaborative nature of documentation maintenance ensuring clarity and accuracy for users referencing these materials,0,0,1,1,0,0,0
Marius Scurtescu reported an issue in the Spring Framework s tag library documentation where two article links were broken This issue affected version 1 2 4 Rick Evans later confirmed that the problem was resolved in the latest release Spring 2 0 RC1 ensuring the links now function correctly,0,0,1,1,0,0,0
A minor edit was needed in the FactoryBean documentation for the Spring framework The original text incorrectly referred to the BeanFactory interface instead of the FactoryBean interface This documentation error was identified by Seth Ladd and was located in the Spring 1 2 x reference guide Juergen Hoeller acknowledged the mistake and confirmed that it was corrected This fix ensures clarity in the documentation for developers implementing the FactoryBean interface,0,0,1,1,0,0,0
The issue reported in SPR 1161 involves a minor syntax error in the documentation for iBATIS SqlMapClientDaoSupport The original example in the 1 2 2 PDF incorrectly uses the property name sqlMap instead of the correct sqlMapClient This error appears on page 135 of the documentation Juergen Hoeller acknowledged the mistake and confirmed it was fixed in a revision for version 1 2 3,0,0,1,1,0,0,0
The documentation on chaining ViewResolvers in Spring has an inconsistency regarding the InternalResourceViewResolver IRVR It was noted that Section 12 5 2 incorrectly states that IRVR has an order property However IRVR does not implement the Ordered interface and is always positioned as the last resolver in the chain This discrepancy was identified by Joshua Spiewak in issue SPR 1107 https jira spring io browse SPR 1107 Juergen Hoeller acknowledged the mistake and confirmed the documentation has been corrected The affected version is 1 2 1 and further details are linked to issue 5795,0,0,1,1,0,0,0
In the Web MVC documentation a typo was reported where UrlFilenameViewController was incorrectly listed as FilenameViewController Matt Benson noted this issue which could cause minor confusion Juergen Hoeller initially couldn t find the reference due to a case difference but later identified and fixed the issue The error was located in the last paragraph of chapter 12 3 2 of the manual specifically at the Spring documentation URL The correction involved ensuring the class name was consistently represented throughout the documentation,0,0,1,1,0,0,0
The issue SPR 1056 was reported by Artur Wronski who noted that the Spring manual incorrectly showed an XmlBeanFactory constructor using FileInputStream which doesn t exist The correct usage should involve wrapping the InputStream with InputStreamResource Brett Randall highlighted that the error persisted in the documentation prompting Juergen Hoeller to acknowledge and fix the mistake for versions 2 5 2 and 2 0 9 This correction ensures that the documentation accurately reflects the proper constructor usage enhancing clarity for users,0,0,1,1,0,0,0
A typo was identified on the Spring Framework MVC documentation page where a closing angle bracket was missing in an XML configuration example The incorrect line was xml property name cacheSeconds value 120 value property This was corrected to xml property name cacheSeconds value 120 value property The issue was reported by Kaj Hejer and promptly fixed by Juergen Hoeller as noted in the Spring JIRA issue SPR 1033,0,0,1,1,0,0,0
Chapter 20 of the JMX documentation contains several minor errors that need correction In section 20 2 the phrase registering them the JMX MBeanServer is missing a to and the reference to section XXX should likely be updated to 20 4 In section 20 2 1 the sentence about MBeanExporter needs to end with server Section 20 2 3 has registed instead of registered and again the section reference should be updated to 20 4 In section 20 3 proble should be corrected to problem and in section 20 3 2 show should be saw There s also a query about a missing server property in the final example in section 20 6 but it s noted that the example defaults to the default MBeanServer A patch has been provided to address these spelling issues,0,0,1,1,0,0,0
In the Spring Framework reference manual an error was identified in the description of shorthand forms for constructor arguments Specifically the document incorrectly used constructor arg value myBean instead of the correct constructor arg ref myBean This error was noted on page 18 section 3 3 3 1 under Value and Ref shortcut forms The issue tracked as SPR 1015 was reported by Ulrik Sandberg and has since been corrected by Juergen Hoeller This fix ensures the documentation accurately reflects the intended usage of the ref element for constructor arguments in Spring,0,0,1,1,0,0,0
Nicolas de Loof reported a broken link in the CVS documentation for required libraries to build Spring docs The original link was to a resource that no longer existed Colin Sampaleanu addressed the issue by making the libraries available at a new URL and updated the documentation to reflect this change Juergen Hoeller inquired about the current location of these libraries for further clarification The issue affected version 1 2 2 of the software,0,0,1,1,0,0,0
The JMX reference documentation for Spring is missing the autodetect property in Section 20 3 5 specifically in the AutodetectCapableMBeanInfoAssembler interface This omission causes the example provided in that section to not function correctly as reported by Carlos Sanchez in issue SPR 968 The issue affects version 1 2 final of the documentation A patch file named spring patch has been attached to address this problem,0,0,1,1,0,0,0
In the Spring Framework documentation Marius Scurtescu identified an incorrect package name the doc incorrectly referenced org springframework mvc Controller instead of the correct org springframework web servlet mvc Controller Juergen Hoeller addressed the issue by fixing the package name and updating terminology throughout the chapter to consistently use web MVC framework Additionally Scurtescu pointed out another incorrect reference in section 12 3 3 The MultiActionController to a non existent package org springframework web mvc multiaction He suggested searching for mvc in the documentation to catch similar errors,0,0,1,1,0,0,0
The issue with the Hibernate version of Petclinic on MySQL stems from using an outdated MySQL JDBC driver version 2 0 14 causing a java lang AbstractMethodError during record insertion The recommended solution is to update to the latest 3 0 x driver which resolves the problem Juergen Hoeller removed the old driver from the Petclinic directory and updated documentation references to MySQL Connector 3 x However MySQL Connector 3 x s GPL license complicates distribution within Spring unlike the LGPL licensed 2 x Therefore it s suggested to exclude the MySQL driver from the distribution entirely leaving users responsible for downloading and integrating the appropriate driver,0,0,1,1,0,0,0
A Quartz Cron job in the Spring project had an incorrect value reported by Carlos Sanchez in issue SPR 656 The intended schedule was to run the job at 6 a m with the correct cron expression being value 0 0 6 value Juergen Hoeller confirmed that the issue was already resolved,0,0,1,1,0,0,0
In the Spring framework documentation a misconfiguration was identified in the example for setting up a CronTriggerBean in Quartz Initially the cron expression value 0 6 1 value was provided which was incorrect due to a missing seconds field causing it to fail with Quartz 1 4 0 The correct expression should have been value 0 0 6 value ensuring the job runs every morning at 6 a m This mistake was noted by Carlos Sanchez and later confirmed and corrected by Juergen Hoeller The correction helps ensure proper scheduling functionality within the framework,0,0,1,1,0,0,0
The issue reported in SPR 533 involved two main problems with the Spring Framework documentation build process First there were duplicate IDs context create in the XML which was resolved by changing one ID to context import in the beans xml file Second an OutOfMemoryError occurred when running the target which was addressed by setting a maximum memory limit of 256m in the build xml file for the Apache FOP process This change helps manage the increased memory demands due to recent updates in the reference documentation Juergen Hoeller acknowledged the report noting the memory issue was unexpected but appreciated the solutions provided,0,0,1,1,0,0,0
In the Spring Mail reference documentation an error was identified by Carlos Sanchez who noted that MimeMessage was used instead of MimeMessageHelper This issue affected version 1 1 3 of the software A patch file was attached for review Juergen Hoeller acknowledged the error and confirmed that it was fixed,0,0,1,1,0,0,0
In the Spring Framework documentation there was an error in the transaction management section reference The document mistakenly referred to chapter 6 for transaction management which has since been updated to chapter 7 Chapter 6 now covers AspectJ integration This issue identified by Steven Devijver was documented under SPR 502 and has been corrected by Juergen Hoeller The error affected version 1 1 3 of the documentation,0,0,1,1,0,0,0
In SPR 429 Paul Furbacher highlights the inconsistent usage of BeanDefinition as beandefinition in section 3 6 suggesting the term should consistently follow the established format from section 3 2 to clearly indicate it refers to an object within the framework Juergen Hoeller responds acknowledging the fix but notes that operations like containsBean and isSingleton can apply to any type of bean definition whether registered BeanDefinitions or manually registered instances He clarifies that BeanFactory interfaces don t require factory implementations to work specifically with BeanDefinitions although the standard implementations do,0,0,1,1,0,0,0
In the Spring Framework Reference 1 1 x documentation a punctuation error is noted in Section 5 10 2 paragraph 9 The sentence should have a comma instead of a period after shown above making it read correctly from the Spring test suite shown above could be used in conjunction with This issue was identified by Paul Furbacher and acknowledged by Juergen Hoeller appreciating the attention to detail Additionally there was a typo in the issue title Punction instead of Punctuation,0,0,1,1,0,0,0
In section 5 10 2 of the Spring Framework reference manual there was a correction needed in the bean ID The phrase The DefaultAdvisorAutoProxyCreator bean definition called advisor in this case but the name is not significant should be corrected to autoproxy Alternatively if the XML declaration reads bean id adviser a coordinated update in the jpetstore attributes sample code specifically in WEB INF declarativeService xml line 26 is necessary to prevent confusion Juergen Hoeller acknowledged the issue and confirmed it has been fixed,0,0,1,1,0,0,0
The issue SPR 394 opened by Tim Nolan involves a code and spelling error in the beans xml file of the Spring Framework documentation Specifically a method name was corrected from ExampleBean to createInstance and a spelling mistake was fixed by changing areguments to arguments Juergen Hoeller acknowledged and appreciated Tim s contributions in identifying these errors,0,0,1,1,0,0,0
In the Spring Framework Jira issue SPR 366 https jira spring io browse SPR 366 Nilesh Kapadia identified an error in the taglib documentation where errors allGlobalErrors was incorrectly documented instead of errors globalErrors Juergen Hoeller acknowledged the mistake and confirmed it was fixed Tim Nolan proposed a solution to maintain consistent and up to date documentation by creating an XSL stylesheet and Ant target to transform the spring tld file into an HTML frameset This approach would ensure documentation stays current with TLD updates and links to Javadocs while maintaining manageability by incorporating tag specific comments into the XSL file This method aims to streamline documentation updates by modifying TLD or XSL files as needed,0,0,1,1,0,0,0
The docpdf target in the project build process is broken due to duplicate entries in the beans xml file specifically two id beans factory placeholderconfigurer entries This issue documented in version 1 38 also includes several non fatal errors and warnings related to missing or nonexistent IDs for various links and references in the documentation Despite these issues Juergen Hoeller confirmed that the problem has been fixed in the CVS repository Tim Nolan initially reported the issue and later acknowledged the resolution,0,0,1,1,0,0,0
The issue involves receiving unnecessary extra messages specifically empty lines or a n when using the ActiveMQ STOMP broker with Spring Boot The problem arises when sending objects as strings using JSON converters like Jackson or Gson This behavior doesn t occur with simple string payloads The extra lines appear after the message s terminating 0 byte which is permissible by the STOMP specification allowing multiple EOLs after the NULL octet These extra lines might be misinterpreted as heartbeat messages The AbstractMessageChannel component isn t related to this issue as it skips sending if an interceptor returns null This behavior seems specific to the broker s handling of larger payloads,0,0,1,0,1,0,0
The document addresses an issue where ResponseEntity Resource is not reliably closing an InputStream when using InputStreamResource in a file download API The problem arises when invalid content types such as excel are encountered causing Spring Web to fail to parse the content type which leads to the InputStream not being closed resulting in memory and connection pool leaks A workaround provided is to use a try with resources block to ensure the InputStream is closed properly The document suggests that Spring should be responsible for closing the InputStream regardless of exceptions and introduces an alternative approach using an AbstractResource for on demand InputStream retrieval which might be more reliable for S3 scenarios The discussion concludes with a proposal to improve Spring s handling of InputStreamResource by allowing a Supplier InputStream in the constructor to lazily retrieve the InputStream and ensuring reliable resource closure Additionally there are plans to update the documentation to provide guidelines for handling ResponseEntity Resource and file downloads more effectively,0,0,0,1,1,0,0
The document addresses an issue where multiple Method Mapping annotations e g GetMapping PostMapping on the same controller method result in only one being recognized In the example provided applying both GetMapping x and PostMapping x to a method only maps the GET request while the POST request is ignored leading to a 405 error Method Not Allowed The expectation was that both annotations should be processed making both GET and POST endpoints available The document suggests logging a warning when multiple such annotations are used as one of them is ignored without any notification A workaround is provided using RequestMapping method RequestMethod GET RequestMethod POST to explicitly handle multiple HTTP methods The Spring team decided to log a warning in Spring Framework 6 1 x when multiple RequestMapping annotations are detected on a method with only the first one being used For Spring Framework 6 2 they plan to explore the possibility of supporting multiple RequestMapping annotations on a single method,0,0,0,1,1,0,0
The document discusses an issue related to the incompatibility between Spring ORM spring orm 6 0 7 and Hibernate ORM 6 2 particularly when using the HibernateJpaVendorAdapter and LocalSessionFactoryBean The problem arises due to changes in Hibernate 6 2 where several methods in the Configuration class now return Configuration for method chaining instead of void which breaks compatibility with Spring s current Hibernate integration The document suggests that LocalSessionFactoryBuilder and related classes like HibernateTemplate are not compatible with Hibernate 6 2 and may need to be deprecated The solution recommended is to rely on JPA for Hibernate integration as Spring s Hibernate specific setup without JPA is no longer feasible for maintaining compatibility with newer Hibernate versions The Spring team also acknowledges the need to align with Hibernate 6 2 by updating dialect classes e g for Derby and PostgreSQL in the HibernateJpaVendorAdapter It is confirmed that Hibernate 6 x will only be supported via the JPA persistence API going forward The discussion includes a user request for continued support of LocalSessionFactoryBean citing ease of configuration and familiarity but the overall direction seems to favor JPA based integration for modern Hibernate support,0,0,0,1,1,0,0
The document discusses the need to improve the documentation on testing streaming responses in Spring MVC While the Streaming Responses section under MockMvc mentions WebTestClient the explanation is unclear particularly regarding the ability to test both with and without a running server Additionally there is no sample test included to demonstrate how to perform such testing The suggestion is to enhance the documentation with clearer instructions and example tests,0,0,0,1,1,0,0
The document refers to a backport of issue 25858 which addresses a problem with using JTA transaction management in native Hibernate 5 bootstrapping To avoid connection leaks the solution requires setting the hibernate transaction coordinator class property to jta This ensures proper session management when using JtaTransactionManager with native Hibernate configurations The backport was fixed through commit 2ade77304a1677493875b97adf5bf892a67d6d13,0,0,0,1,1,0,0
The document describes an issue with using JTA transaction management in a Spring Framework setup with native Hibernate bootstrapping In the provided application context a connection leak was suspected due to the Hibernate session not being closed when using JtaTransactionManager Debugging revealed that SpringSessionSynchronization was not registered which usually handles session closing because the hibernate transaction coordinator class was not set to jta The issue was resolved by explicitly setting the hibernate transaction coordinator class jta property which ensures proper session management and avoids connection leaks Additionally setting hibernate connection handling mode to DELAYED ACQUISITION AND RELEASE AFTER STATEMENT worked correctly while the default DELAYED ACQUISITION AND HOLD caused the problem The document recommends adding documentation or a side note in Spring to inform users that hibernate transaction coordinator class jta must be set when using JtaTransactionManager with native Hibernate bootstrapping This issue was resolved in Spring Framework 5 2 10 which now correctly handles the configuration and prevents connection leaks The issue was thoroughly analyzed and resolved through collaboration between the user and Spring maintainers,0,0,0,1,1,0,0
The document discusses various limitations and outdated aspects of the DataAccessException translation API in Spring specifically in the context of implementing transaction retry mechanisms The user highlights several areas needing improvement Subclassing for Custom Mapping in SQLErrorCodeSQLExceptionTranslator Custom mappings require subclassing which could be simplified by allowing a composition style API instead Partial Updates to SQLErrorCodes The current system does not allow partial updates to error codes for specific databases forcing users to override the entire error code mapping The user created a workaround using a SQLErrorCodesUpdater to add or modify error codes dynamically Complexity in Custom Error Code Mapping Applying custom error code mappings is complicated requiring manual retrieval of the database vendor name and extensive setup Database Vendor Dependency SQLErrorCodeSQLExceptionTranslator is tied to a specific vendor type making it difficult to manage multiple database types without further documentation Ordering of PersistenceExceptionTranslator There s no way to enforce ordering when multiple PersistenceExceptionTranslator instances are available This issue was addressed in a recent update 24644 which adds ordering support The document suggests revisiting the API in Spring Framework 6 1 to address these issues including improvements in customizability and documentation,0,0,0,1,1,0,0
The document discusses an inconsistency in the Javadoc for the ExceptionHandlerExceptionResolver setResponseBodyAdvice method The current Javadoc incorrectly states that the method adds components to the existing list of ResponseBodyAdvice but in reality it clears the list and sets it to the specified components This behavior contrasts with RequestMappingHandlerAdapter setResponseBodyAdvice which truly adds to the list To resolve this inconsistency two options were considered Update the Javadoc to accurately describe the behavior Modify the method s behavior to stop clearing the list making it consistent with the Javadoc and the behavior of RequestMappingHandlerAdapter The team decided to go with option 2 but the change will be implemented in Spring Framework 5 3 This will align the behavior of both ExceptionHandlerExceptionResolver and RequestMappingHandlerAdapter,0,0,0,1,1,0,0
The document discusses a limitation in the HttpComponentsClientHttpRequestFactory regarding timeout configurations for HTTP requests that require an SSL handshake or a CONNECT request to a proxy Brian Clozel explains that while the factory allows setting timeouts like setReadTimeout which controls the maximum inactivity between data packets these settings are only applied after the connection route has been fully established This means that during the initial connection phase SSL handshake or CONNECT the RequestConfig does not apply To handle timeouts at this stage configuration should be done at the HttpClient level using SocketConfig or other finer grained options for the connection manager This issue is about documenting that such behavior is outside the scope of HttpComponentsClientHttpRequestFactory and should be handled using the HttpClient builder API This affects Spring Framework version 5 0 5 and the documentation was updated to reflect this behavior,0,0,0,1,1,0,0
The document discusses an issue with handling errors in SseEmitter a subclass of ResponseBodyEmitter when clients disconnect in a Spring MVC application Guido reported that onComplete and onError callbacks are not consistently invoked when tabs are closed in the browser and attempts to manually mark the SseEmitter as completed after a failed send operation did not work as expected This led to confusion about the correct implementation for handling such errors Rossen Stoyanchev responded by explaining that a fix was introduced in Spring 5 0 to handle this situation The correct approach is to avoid calling emitter completeWithError ex for IOException errors during a send operation Instead the Servlet container will handle error notifications and Spring MVC will automatically invoke the appropriate callback methods Rossen also acknowledged that the documentation needed improvement which was subsequently updated to reflect this behavior Additionally a change was made to ignore calls to complete and completeWithError after a send failure,0,0,0,1,1,0,0
The document highlights a discrepancy in the Spring WebSocket documentation regarding the configuration of the SimpleBroker Aray Chou reported that the documentation suggests using config enableSimpleBroker topic queue but this configuration caused issues when sending messages to users using template convertAndSendToUser especially when using as the destination separator as required by RabbitMQ Aray found that the correct configuration should be config enableSimpleBroker topic queue without the leading slash for queue Rossen Stoyanchev responded explaining that the documentation was correct for the default configuration using as the separator However when is used as the separator common in environments such as RabbitMQ the behavior changes due to updates in Spring 4 3 18616 Rossen acknowledged the confusion and confirmed that this issue would be addressed by refining the DefaultUserDestinationResolver to handle the separator more appropriately The documentation and tests were subsequently updated to reflect these changes,0,0,0,1,1,0,0
The document discusses a suggestion by Logan Mauzaize to enhance Spring s Javadoc by including Use pages which help users discover where classes methods and fields are used within the API These pages similar to those in the official Java SE API documentation show how various components interact across the API Sam Brannen responded by confirming that this can be achieved by passing the use flag to the Javadoc generation process The issue was resolved through a commit that enabled the use flag Although Gradle documentation does not explicitly mention how to set this flag Sam was able to configure it after some investigation,0,0,0,1,1,0,0
The document addresses the issue of outdated references in the Spring Framework documentation Philippe Marschall pointed out that the documentation still mentions NativeJdbcExtractor implementations specifically CommonsDbcpNativeJdbcExtractor and XAPoolNativeJdbcExtractor which no longer exist These references need to be removed to avoid confusion The issue led to a pull request and subsequent commits which updated the documentation to reflect the removal of these obsolete classes,0,0,0,1,1,0,0
The document discusses a missing detail in the Spring Framework 5 0 reference manual for reactive web applications Daniel Fern ndez pointed out that the manual does not include String as a valid return type for Controller methods in reactive web applications even though String is used to specify view layer template names when performing server side markup rendering Rossen Stoyanchev responded by clarifying that the list in the documentation was not intended to be exhaustive but rather to illustrate common return types for RequestBody and ResponseBody methods He has since added a clarification to the documentation to make this clearer,0,0,0,1,1,0,0
The document discusses an issue where the HTML5 Application Cache Manifest is incorrectly served with the content type text html instead of the correct text cache manifest as specified by the HTML5 standard Craig Andrews reported the problem noting that it can be reproduced using a demo application A workaround for Spring Boot users is to add a line to application properties to manually set the content type Brian Clozel explored several potential fixes but concluded that none were ideal as they could lead to inconsistencies or conflicts in different configurations After considering options the decision was made to update the documentation including notes in the AppCacheManifestTransformer Javadoc rather than implementing a fix in Spring Framework s core This issue affects Spring 4 3 1,0,0,0,1,1,0,0
The document reports an issue in the Spring Framework reference documentation where a code example for JdbcTemplate contains a duplicate method signature which would result in a syntax error if used Greg Turnquist identified this problem and submitted a pull request to fix it St phane Nicoll thanked him for the contribution and the issue was resolved through commits that corrected the documentation This issue highlights the importance of accurate and error free code examples in documentation,0,0,0,1,1,0,0
The document discusses a common issue with Spring s HandlerInterceptor when used in asynchronous request scenarios Specifically the preHandle method is invoked twice and there is no documentation explaining how to distinguish between the two invocations to avoid executing the same logic twice Francisco Lozano suggests adding documentation that provides guidance on handling this issue such as using a check for DispatcherType ASYNC to differentiate the async dispatch Rossen Stoyanchev agrees that this would be helpful and notes that the documentation including Javadoc has been updated to address this concern especially in the context of HTTP streaming and Server Sent Events SSE which are also part of expanded async request handling in Spring,0,0,0,1,1,0,0
The document discusses a need to update the Spring Framework documentation regarding the default behavior of the RequestMapping annotation Manuel Jordan pointed out that while Spring Guides mention that RequestMapping maps all HTTP operations by default unless explicitly narrowed e g using method GET this information does not appear in the official Spring Reference Documentation or in the RequestMapping API JavaDoc The issue affects Spring versions 4 0 7 and 4 1 1 and Manuel suggests that the documentation should clearly state this detail to avoid confusion for developers,0,0,0,1,1,0,0
The document discusses the improvement of the Spring Framework s reference documentation for annotations like PathVariable RequestHeader and RequestParam when used with Map String String The user Manuel Jordan pointed out the lack of examples in the documentation for these annotations working with Map String String specifically in versions 4 0 7 and 4 1 1 He also questioned whether older versions like 3 2 x had similar documentation issues Rossen Stoyanchev responded by clarifying that the Javadoc for RequestMapping already includes such examples even in older versions like 3 2 and that he has added more references in the documentation The conversation emphasizes the need to improve documentation clarity for these annotations across different Spring versions,0,0,0,1,1,0,0
The document discusses the evolving role of JavaScript templating within modern web applications and its integration with Spring a popular Java framework It highlights the rise of JavaScript heavy platforms such as React js WebComponents Angular js and Node js which have shifted much of the web functionality to the client side Traditionally Spring has relied on server side rendering technologies like FreeMarker and JSP but this approach is increasingly seen as outdated in the context of modern web development practices Key points include The growing importance of JSON for client server communication Node js s ability to use the same templates for both server and client sides reducing duplication The challenge of integrating Spring with modern JavaScript frameworks to avoid duplicating logic across client and server as well as the need for better documentation and guidance from Spring on this front The potential for Spring to support JavaScript templating engines like Handlebars JSX and Dust similar to Node js s approach Discussions around integrating React js with Spring including server side rendering to improve performance particularly on mobile devices The potential for Spring to evolve by adopting a more opinionated stack integrating with popular JavaScript frameworks and addressing the needs of modern web applications with heavy client side logic Several Spring team members and contributors propose solutions such as a Nashorn based templating engine to support JavaScript templates on the server side and experiments are ongoing to improve Spring s compatibility with modern JavaScript practices look for instruction in first line inside,0,0,0,1,1,0,0
In Spring JIRA issue SPR 12073 Manuel Jordan requests improvements to the Spring JMS reference documentation specifically regarding the migration from XML to JavaConfig He notes that there is no direct equivalent to the destination type attribute from jms listener container in JavaConfig which caused confusion during his migration process St phane Nicoll comments that initially he considered adding a setDestinationType method but found it too complex due to the JMS JCA split Instead the documentation and XML schema XSD were updated to clarify the properties affected by this setting Manuel acknowledges and agrees with the solution This improvement affects Spring versions 4 0 6 and 4 1 RC1,0,0,0,1,1,0,0
In Spring JIRA issue SPR 11736 Lari Hotari reports that the Javadoc for Cacheable incorrectly explains how cache keys are generated The documentation states that both method arguments and the method signature are used to compute the cache key but in reality the SimpleKeyGenerator ignores the method signature leading to potential conflicts when caching multiple methods with the same arguments St phane Nicoll confirms that this is a documentation issue and updates the Javadoc to clarify the behavior of cache keys Craig and Lari discuss potential solutions including using method names or class names in cache keys but Nicoll advises that users should manage unique keys using SpEL expressions when caching unrelated objects in the same cache The issue is resolved by updating the Javadoc for Cacheable,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10960 Rob Winch initiates the migration of Spring Framework documentation from Docbook to Asciidoctor This migration involves multiple contributors with pull requests such as PR 377 and PR 378 laying the foundation Brian Clozel provides fixes and Gradle task improvements while Phil Webb supports the migration and helps with outstanding documentation pull requests One challenge noted is the lack of PDF support in the current Asciidoctor Gradle plugin but workaround solutions are proposed The migration is eventually completed and new documentation is available in Asciidoctor format with guidelines for contributors provided Rob also points out a JIRA issue related to Asciidoctor styling that affects the display of author names,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10960 Rob Winch leads the migration of Spring Framework documentation from Docbook to Asciidoctor The migration involves updating the documentation build process including addressing issues like PDF support and fixing style problems Brian Clozel contributes fixes and Gradle build improvements while Phil Webb expresses strong support for completing the migration Multiple pull requests and commits e g PR 377 PR 378 contribute to the effort and Rob eventually marks the task as complete with new documentation available in Asciidoctor format The migration also includes a guide for contributors on how to document using Asciidoctor,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10670 Brad Grow points out an error in the Spring documentation section 17 15 3 Configuring Interceptors where the mapping tag in the example should use the mvc namespace The current XML example omits the mvc prefix in the mapping tag which is incorrect Brad provides the corrected XML showing that mapping should be mvc mapping Phil Webb acknowledges the issue and thanks Brad for reporting it The fix applies to Spring Framework version 3 2 3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10556 Archie Cobbs suggests a small clarification to the CronTrigger Javadoc to explicitly state that it does not schedule overlapping executions He proposes adding documentation to clarify that the next execution time is calculated based on the lastCompletionTime of the previous execution ensuring no overlaps This enhancement would help prevent confusion for developers regarding overlapping task executions The change affects version 3 2 2 of the Spring Framework,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10317 Gordon Dickens highlights that the Spring documentation still uses SimpleJdbcTemplate which has been deprecated since Spring 3 0 or 3 1 He emphasizes that it is not advisable to guide developers toward deprecated classes Sections of the documentation such as 14 1 1 14 1 2 and others still reference SimpleJdbcTemplate and they need to be updated with non deprecated alternatives The issue is linked to a previous report SPR 13983 and a corresponding GitHub commit addresses this by updating the documentation,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10209 Roman Konoval points out that the Spring documentation still references the deprecated SimpleTriggerBean even though the Javadoc advises using SimpleTriggerFactoryBean instead This is confusing especially since SimpleTriggerBean is incompatible with Quartz 2 1 The documentation for Quartz scheduling examples needs to be updated accordingly Phil Webb acknowledges the issue and confirms that it will be fixed in the 3 2 2 release,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10180 Michael Osipov reports that the RequestParam default value is not set in certain edge cases Specifically when a request is made with an empty outputType parameter such as outputType or outputType without a value null is assigned instead of the default value even though RequestParam specifies a default Rossen Stoyanchev agrees that using null when a default value is provided is not intuitive and proposes tightening the behavior so the default value is always applied If users want to treat empty values as an error they can omit the default value and handle it manually in the controller The issue is reclassified as an improvement and Rossen agrees to update the RequestParam JavaDoc to reflect this change in behavior,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10132 Alex Sherwin raises concerns about the documentation related to which MVC annotations are required on interfaces when using proxying The documentation suggests that annotations like RequestMapping and ModelAttribute should be placed on the interface but this does not always work as expected Specifically ModelAttribute on the interface is ignored and moving it to the implementation class resolves the issue Rossen Stoyanchev clarifies that method argument annotations such as ModelAttribute and Valid should be on the implementation class while type and method level annotations like RequestMapping must be on the interface Rossen agrees to improve the documentation to make this distinction clearer,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10078 Chris Beams discusses adding support for external Javadoc links in the Spring framework s Gradle build Jon Brisbin initially suggested using options linksOffline but Chris clarifies that options links is the correct approach This change allows linking to external Javadoc references such as the Spring and Java SE API documentation Additionally Chris addresses and resolves various Javadoc warnings including typos references to non existent types and issues related to the Quartz 2 0 upgrade and HTTP PATCH method support The changes ensure that there are now zero Javadoc warnings across the entire framework as reflected in the corresponding GitHub commit,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10036 Chris Beams requests an update to the Spring reference documentation s CSS to reflect a more modern style This update is implemented by consuming the newly published docbook reference plugin version 0 2 0 which includes a revamped CSS that closely resembles the way GitHub renders Markdown files Phil Webb applies the changes which can be viewed in the Spring 3 2 documentation The corresponding GitHub commit finalizes this enhancement improving the visual appeal and modernizing the framework s reference documentation,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10033 Phil Webb notes that the Spring reference XML contains several duplicate imageobject items which are separated by roles for fo PDF and html He suggests that a single imageobject item should suffice for both roles The issue is resolved by removing unnecessary duplication of imagedata elements Since HTML generation ignores image scaling maintaining separate configurations for PDFs was redundant The fix is implemented in a corresponding GitHub commit,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10032 Phil Webb proposes migrating the Spring reference documentation to DocBook 5 to ensure well formed markup The migration involves several changes including adding the xsi schemaLocation element for tool support converting id elements to xml id converting ulink elements to link simplifying lineannotation markup fixing misplaced section tags and replacing interface tags with interfacename These changes along with general cleanup of trailing whitespace and tabs are reflected in a GitHub commit completing the migration,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10011 Phil Webb proposes dropping Appendix E which references spring beans 2 0 dtd from the Spring documentation as it is no longer relevant Chris Beams agrees stating that it makes sense to remove it and Juergen Hoeller is informed Phil Webb proceeds with the removal in the documentation as reflected in the corresponding GitHub commit,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10010 Phil Webb proposes removing version specific XSD links from the Spring reference documentation as many older versions are still included Chris Beams agrees suggesting the use of versionless schemas which aligns with Spring s advice to users However he cautions that removing version numbers could cause issues if deprecated attributes have been removed in newer versions Phil Webb proceeds to remove all version specific XSDs from the reference samples replacing them with versionless variants e g spring beans 3 0 xsd becomes spring beans xsd This change is backported to the 3 1 x branch in time for the 3 1 4 release,0,0,0,1,1,0,0
In Spring JIRA issue SPR 10008 Phil Webb discusses the need to restore the custom titlepage xml for the Spring reference manual The new Gradle plugin generates a title page that differs from the previous Ant build which allowed customization The main issue is the unsightly appearance caused by a large list of authors dominating the first page Chris Beams agrees and suggests that the custom title page could also reintroduce the Spring leaf logo Phil Webb implements a solution to remove the large author list and restore the custom title page noting that it will require an update to version 0 1 7 of the docbook reference plugin,0,0,0,1,1,0,0
In Spring JIRA issue SPR 9824 Marten Deinum points out that the cache and jdbc namespaces are missing from the Spring reference documentation He suggests that these namespaces should be added to the guide to provide clarity for developers Chris Beams acknowledges the issue and Phil Webb later confirms that the missing documentation has been addressed and fixed for the Spring 3 2 release,0,0,0,1,1,0,0
In Spring JIRA issue SPR 9468 Emil A Siemes suggests adding a section in the Spring reference documentation on using GemFire as a CacheManager Currently the documentation only covers JDK and EHcache setups sections 28 5 1 and 28 5 2 Emil proposes inserting a new section 28 5 3 titled GemFire based Cache outlining GemFire s capabilities as a memory oriented elastically scalable and actively replicated cache He also recommends providing a link to the Spring GemFire reference documentation for more detailed instructions as this content is already covered there Emil s suggestion involves a minor restructuring of the existing documentation,0,0,0,1,1,0,0
In Spring JIRA issue SPR 9467 Simon Wong points out an error in the Spring reference manual In Section 13 8 8 the default data script name is incorrectly listed as test data sql However the correct default script name as found in the EmbeddedDatabaseBuilder addDefaultScripts source code is actually data sql Sam Brannen confirms the issue and documents that the correction has been made in the reference manual The update also includes a cross reference in the JDBC Testing Support section to ensure clarity The changes are reflected in a commit on GitHub,0,0,0,1,1,0,0
In Spring JIRA issue SPR 9401 Sam Brannen addresses the need to improve the documentation for Bean lite mode and the support for annotated classes in the TestContext Framework TCF The issue stems from confusion regarding the classes attribute in ContextConfiguration and the lack of clear documentation on the Bean lite mode Annotated classes include stereotype components e g Component Service Configuration classes and classes with Bean methods running in lite mode Sam updates the Javadoc and the Testing chapter in the reference manual to replace references to configuration classes with annotated classes improving clarity and consistency The updates also remove deprecated references to JUnit 3 8,0,0,0,1,1,0,0
In Spring JIRA issue SPR 9346 Oliver Drotbohm suggests adding explicit Docbook section IDs to the transaction documentation to replace the current auto generated anchor IDs The concern is that auto generated IDs can break links if the document structure changes whereas fixed IDs provide stability Chris Beams agrees with the suggestion and notes that a search using git grep section reveals all sections missing explicit IDs He encourages a pull request to address this and Oliver follows up with a pull request which Chris acknowledges,0,0,0,1,1,0,0
In Spring JIRA issue SPR 9313 Sajal Dutta requests an update to the popular Spring MVC tutorial found at http static springsource org docs Spring MVC step by step which is outdated Sajal emphasizes that the tutorial is highly effective for beginners because it demonstrates how to integrate various Spring components in a cohesive way He suggests that the tutorial should be updated regularly with each new Spring version to maintain its relevance Rossen Stoyanchev responds by stating that the tutorial is no longer maintained indicating that it may not be updated in the future,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8896 Andrei Stefan highlights outdated and incorrect documentation regarding the usage of aspectjrt jar and aspectjweaver jar in enabling AspectJ support He points out two issues 1 the jars are no longer included in the Spring distribution and 2 aspectjrt jar is a subset of aspectjweaver jar making the inclusion of both unnecessary Chris Beams and Phil Webb update the documentation to reflect that only aspectjweaver jar is required as it includes everything from aspectjrt jar This correction ensures that developers use the correct jar for aspect oriented programming in Spring Later Mark Janssen catches a remaining inconsistency which was quickly addressed in a subsequent commit by Phil Webb,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8836 Jeremy Solarz suggests adding a link to the SpringSource Tool Suite STS in the Spring documentation highlighting its features and usefulness for Spring development He specifically recommends mentioning that STS provides a basic Spring MVC template which would help new developers get started quickly Chris Beams agrees with the idea and encourages Jeremy to submit a patch to the reference documentation Chris provides links to the Spring Framework GitHub repository and the contributor guidelines to assist with the submission process,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8691 Chris Beams proposes clarifying the Javadoc for stereotype annotations such as Repository and Service and exception translation The update includes referencing the original inspiration from Domain Driven Design DDD while emphasizing the flexible general purpose nature of Spring s annotations Additionally the Repository Javadoc is updated to provide clearer instructions on enabling exception translation using the PersistenceExceptionTranslationPostProcessor Examples of resource factories that implement the PersistenceExceptionTranslator interface are also included Keith Donald further refines the documentation by clarifying the repository definition from DDD and removing comparisons with DAO to avoid confusion,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8570 Juan Antonio Farr Basurte requests clarification on whether the Lifecycle stop method is intended to perform a synchronous stop or if it can initiate an asynchronous shutdown sequence He notes that the SmartLifecycle stop Runnable method is specifically designed for asynchronous behavior suggesting that stop should be synchronous However some components implement stop asynchronously leading to confusion Chris Beams updates the documentation to confirm that stop is typically synchronous while SmartLifecycle stop Runnable should be used for asynchronous shutdowns Juan also asks if SmartLifecycle stop Runnable takes precedence over Lifecycle stop and Chris clarifies that for SmartLifecycle implementations only the stop Runnable method is called This has been documented in the Javadoc,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8526 Chris Beams reports that text marked with emphasis role bold in syntax highlighted code examples is not rendered as bold in both the HTML and PDF versions of the Spring reference documentation This issue is likely related to conflicts in the CSS used for syntax highlighting Additionally in the PDF version spaces are sometimes incorrectly rendered as dash characters These issues were noted for improvement and the issue is linked to SPR 13165 Later Juergen Hoeller closed the issue considering it outdated but left the option to reopen it if necessary,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8493 Oliver Drotbohm suggests that the PreDestroy and PostConstruct annotations should be mentioned more prominently in the container callback section 3 6 1 1 of the Spring reference documentation Currently the section emphasizes the use of InitializingBean but Oliver notes that PostConstruct is the preferred approach for initialization callbacks He proposes adding a prominent note at the beginning of the section to guide users toward the preferred annotations The issue was discussed and eventually assigned for resolution with Chris Beams Juergen Hoeller and Phil involved in the follow up,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8390 Mattias Severson points out an inaccuracy in the JavaDocs for the TransactionCallback doInTransaction method The current documentation states that any exception thrown during the transaction will propagate to the caller which is incorrect for checked exceptions Mattias suggests clarifying that only unchecked exceptions i e RuntimeException will propagate and trigger a rollback Chris Beams confirms that the documentation has been updated accordingly Mattias also suggests explicitly mentioning that TransactionException will be thrown by TransactionTemplate or TransactionManager in case of a failed rollback,0,0,0,1,1,0,0
In Spring JIRA issue SPR 8025 Peter Perhac reports a documentation inconsistency in Section 15 3 2 of the Spring MVC reference manual The documentation mentions a post method but the corresponding example code does not include such a method Instead Peter suggests that the author likely meant to reference the add method This issue has been addressed and resolved in a subsequent commit,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7996 Caleb Jones suggests improving the documentation of the context caching mechanism in the TestContext framework Specifically he points out that the current documentation lacks details about how in memory caching works and that it only applies when tests run in the same JVM process He proposes adding information about cache key generation the MergedContextConfiguration algorithm and the implications of running tests in a forked mode e g via Surefire s forkMode Forking results in longer test execution times since the context is reloaded for each test Sam Brannen later confirms that the documentation has been updated to address these concerns This issue affects Spring 2 5 6 and 3 0 5,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7940 Bob Jacoby reports a problem where a bean implementing ApplicationListener which is also proxied due to the Transactional annotation results in the onApplicationEvent method being called twice for each event This happens because both the original bean and its proxy are added to the listeners list The issue is particularly noticeable when using interface based proxies The discussion reveals a deeper problem with Spring s handling of scoped proxy beans and singleton beans with contributors suggesting improvements in Spring s documentation Eventually Spring updated the documentation to clarify this behavior and the issue was marked resolved This issue affects Spring 3 0 5,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7849 Sam Brannen proposes revising the testing chapter of the Spring documentation based on an internal review conducted by Rob Harrop in September 2009 The goal is to incorporate feedback from the review to improve the chapter This issue affects Spring 3 0 5,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7848 Sam Brannen suggests improving the readability and formatting of the Container Extension Points section in the Spring reference manual This would enhance the clarity and user experience of this important section of the documentation This issue affects Spring 3 0 5,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7825 Daniel Mikusa reports that the JavaDocs for the package org springframework beans factory aspectj are incomplete showing only the ConfigurableObject interface while aspects like GenericInterfaceDrivenDependencyInjectionAspect and AbstractInterfaceDrivenDependencyInjectionAspect are missing He suggests including the JavaDocs for these aspects Chris Beams responds that generating documentation for aj AspectJ files is not straightforward as it requires ajdoc which doesn t integrate easily with the standard javadoc tool Due to the complexity and effort required the issue is marked as Won t Fix and users are directed to browse Spring s source code on GitHub for documentation This issue affects Spring 3 0 5,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7716 Sebastien Tardif highlights a potential thread safety issue in the Spring documentation where SimpleDateFormat is used inside a InitBinder method Since SimpleDateFormat is not thread safe and Spring controllers must be thread safe this could lead to problems if the same instance is reused across threads However after further investigation Sebastien realizes that in the provided code each thread gets its own instance of SimpleDateFormat making the code thread safe He suggests that Spring documentation should explicitly discuss thread safety and lifecycle concerns especially related to InitBinder For performance reasons he also recommends using a thread safe alternative like ThreadSafeSimpleDateFormat to avoid repeatedly instantiating SimpleDateFormat This issue affects Spring 3 0 GA,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7674 Daniel Hopper notes that default values using Value work with property placeholders e g fee 25 but not with SpEL expressions e g systemProperties fee 25 This causes failures especially with the new Environment Profiles introduced in Spring 3 1 Daniel suggests that SpEL should support default values similarly to property placeholders He later discovers that using the Elvis operator in SpEL e g systemProperties fee 25 works as expected for defaulting He recommends updating the documentation to reflect this behavior This issue affects Spring 3 0 4,0,0,0,1,1,0,0
In Spring JIRA issue SPR 7416 Michael Isvy identifies various minor improvements that can be made to the Spring reference documentation including fixing typos formatting issues wording adjustments and minor corrections in code samples This issue serves as a placeholder for all such fixes that he will apply The issue is referenced in a commit to the Spring Framework repository,0,0,0,1,1,0,0
In Spring JIRA issue SPR 6855 Michael Isvy suggests updating the Spring Struts 1 integration documentation He points out that the statement Struts is the de facto web framework for Java applications is outdated given that it was 2010 at the time of the comment The issue highlights the need to revise the documentation to reflect the current state of web frameworks The issue is referenced in a commit to the Spring Framework repository,0,0,0,1,1,0,0
In Spring JIRA issue SPR 6671 Oliver Drotbohm reports a ClassCastException that occurs when using EventListener in conjunction with JDK dynamic proxies The issue arises when a class implements EventListener ContextRefreshedEvent and is also annotated with Transactional causing a proxy to be created During reflective event type lookup Spring mistakenly assumes a raw EventListener leading to the listener receiving incompatible events like ContextClosedEvent resulting in a ClassCastException Oliver suggests logging a warning when this occurs to make the issue clearer Juergen Hoeller comments that the issue has already been discovered and fixed in Spring 3 0 1 snapshots This issue affects Spring 3 0 GA,0,0,0,1,1,0,0
In Spring JIRA issue SPR 6550 Keith Donald suggests indexing the HTML multi page reference documentation files by section id instead of by chapter and section number as this approach allows sections to be easily moved without breaking links This issue was reported by David Winterfeldt Keith Donald confirms that the issue has been fixed by adding the xsl param name use id as filename select 1 parameter to the custom XSL file used for generating the documentation The issue affects Spring 3 0 RC3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 6357 Jaro Kuruc points out that the jdbc embedded database tag still allows jdbc script sub elements even though he believes scripts should now be specified within the initialize database tag Keith Donald clarifies that the script tag for embedded database is correct as it handles creating populating and managing the lifecycle of an in memory database initialize database is used when the database already exists and is managed outside the application Dave Syer adds that the current documentation is clear and that initialize database can also populate in memory databases so no changes are necessary and the issue is closed as Won t Fix The issue affects Spring 3 0 RC2,0,0,0,1,1,0,0
In Spring JIRA issue SPR 6123 Andrei Stefan suggests updating the Spring documentation to recommend combining within with simple execution pointcuts when using AspectJ This combination reduces the creation and caching of ShadowMatchImpl objects by making method matching in beans stricter as highlighted in an AspectJ user discussion Andy Clement acknowledges the issue and confirms the documentation has been updated A new section Writing good pointcuts has been added to section 7 2 Declaring a pointcut in the AOP chapter Similar advice has also been included in the official AspectJ documentation This issue affects Spring 2 0 8 2 5 6 and 3 0 M4,0,0,0,1,1,0,0
In Spring JIRA issue SPR 6029 Paul Benedict suggests that the Spring documentation chapter 3 should explicitly state that Spring beans must return control back to the container during their initializing methods e g afterPropertiesSet or init method Failure to do so can cause the entire container initialization to pause He provides an example where starting a server and listening to sockets inside afterPropertiesSet can cause this issue Paul also proposes enhancing the Spring container to support asynchronous initialization or a timeout mechanism for bean creation Rossen Stoyanchev later comments that the issue was closed in a bulk update of older unresolved issues noting that it might be outdated due to changes in later Spring versions Rossen invites contributors to reopen the issue if it remains relevant This issue affects Spring 2 5 6,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5948 Brett Randall highlights a confusing example in the spring mvc step by step pdf version 2 5 specifically in section 4 5 Adding a form The example mixes short relative and JSP 1 2 absolute taglib URIs which could confuse users Brett suggests that the documentation could clarify that for JSP 1 2 or higher the taglib declaration in web xml can be omitted Rossen Stoyanchev later comments that the old tutorial is no longer maintained and the issue has been resolved as part of clearing outdated tickets This issue affects Spring 2 5 6,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5946 Vyas Sanzgiri suggests that the Spring documentation should include a section dedicated to using NetBeans IDE as it is a popular IDE with good Spring support He proposes adding this to the Spring reference documentation at http static springsource org spring docs 3 0 x spring framework reference html apas03 html Rossen Stoyanchev later comments that the issue was closed as part of a bulk update addressing older unresolved issues He explains that the issue may have become outdated due to changes in later Spring versions or lacked enough traction to be addressed Rossen invites contributors to reopen the issue or create a new one if it remains relevant,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5929 Thomas Risberg suggests revising the Spring reference manual to clarify the behavior of SimpleJdbcCall particularly in relation to the use of withoutProcedureColumnMetaDataAccess useInParameterNames and default values for some input parameters This would help improve understanding of how these options function in JDBC calls Thomas Risberg also notes that this chapter will be reviewed before the GA General Availability release to ensure the changes are incorporated This issue affects Spring 3 0 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5894 Ken Krueger suggests updating the Spring reference documentation in section 16 11 4 Supported handler method arguments and return types to include the newly introduced RequestBody annotation from section 18 2 1 2 which covers RESTful services He proposes adding a brief description RequestBody allows access to the entire body of the HTTP request This documentation enhancement would clarify the usage of RequestBody in the context of supported handler method arguments This affects Spring 3 0 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5734 Thomas Risberg points out that JavaDocs are difficult to read due to the use of fully qualified names for java lang java util and other non Spring classes Mark Pollack suggests using the noqualifier Javadoc option to remove fully qualified names which would simplify the output e g showing Future T instead of java util concurrent Future T nebhale mentions that instead of updating spring build with the noqualifier option the spring framework build was updated to link external types in the JavaDoc similar to how it was done in Spring 2 5 However he notes that the current list of dependencies is incomplete and requires further updates This affects Spring 3 0 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5650 Oleksandr Alesinskyy reports a mismatch between the Javadoc and the method signature of BeanWrapper getPropertyDescriptor String The Javadoc indicates that the method throws an InvalidPropertyException but the actual method signature throws BeansException which is the superclass of InvalidPropertyException Juergen Hoeller acknowledges the confusion noting that while it was not technically incorrect it was misleading He confirms that this has been clarified in Spring 3 0 This issue affects Spring 2 5 6,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5430 Steven Libonati reports that the Spring MVC documentation for views properties uses the class syntax e g home class xslt HomePage which has been deprecated in favor of the class alternative e g home class The outdated syntax is still shown in examples for XSLT and PDF views Luke Taylor acknowledges the report and confirms that he has fixed the syntax in the views xml documentation This issue affects Spring 3 0 M1 and is linked to issue 10892 which involves correcting the documentation for ResourceBundleViewResolver,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5158 Stephen M Wick raises a question about the Spring MVC Interceptor documentation in section 13 4 3 asking whether interceptors specified in the handler mapping are invoked for every request handled by the DispatcherServlet or only for requests that match the URL patterns in the handler mapping He suggests clarifying this point in the Spring reference documentation Luke Taylor responds noting that the documentation should be clear since interceptors are part of the handler mapping and are applied only to relevant requests He also mentions that he has expanded the text to make this more explicit particularly in the sample code This issue affects multiple versions from 2 0 1 to 2 0 9,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5132 Marten Deinum suggests updating the step by step guide to reflect the recommended use of Controller and MVC annotations instead of the older MVC interface approach which is still present in the Spring 2 5 tutorials Since Spring now recommends using MVC the tutorials should be updated accordingly Juergen Hoeller responds noting that since the step by step guide is no longer included with Spring 3 0 core a new guide covering MVC will likely be published on the web The issue has 1 vote and 1 watcher,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5130 Marten Deinum suggests improving the documentation regarding where namespaces like tx annotation driven and context component scan are applied He notes that users often expect these elements when defined in one context e g the root context to apply to other contexts e g the web context which is not the case These namespaces function as Bean Factory PostProcessors and only operate within the BeanFactory they are defined in Clarifying this behavior in the documentation would help prevent confusion This issue is based on recurring questions observed in Spring forums,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5113 Chris Beams reports that a paragraph in the JavaDoc for the AbstractMessageListenerContainer class is duplicated The paragraph explains that the default behavior of the message listener container is to not propagate exceptions thrown by a message listener to the JMS provider Instead the container logs the exception at the error level and rolls back the transaction if one is active Juergen Hoeller acknowledges the issue and thanks Chris for identifying it This affects Spring versions 2 0 8 and 2 5 5 with a backport to 2 0 9,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5089 Chris Beams notes that the context component scan element in the Spring XSD schema specifically spring context 2 5 xsd lacks documentation for its attributes He points out that most other Spring namespaces are fully documented and suggests filling in this gap to improve clarity and consistency across the framework s schemas The issue has received 1 vote and has 2 watchers,0,0,0,1,1,0,0
In Spring JIRA issue SPR 5078 Joern Barthel highlights that exceptions in scheduledExecutorTasks within ScheduledExecutorFactoryBean are swallowed by default making them difficult to detect He suggests either factoring logging behavior into a separate property or providing a specific exception handler with a default logging implementation At the very least he recommends documenting this behavior in the Javadoc Juergen Hoeller responds by adding an exception logging decorator by default to ensure terminated runnables are always logged and includes a warning about terminated execution in the ScheduledExecutorFactoryBean Javadoc This change is available in Spring 2 5 6 snapshots,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4984 Libor Tvrd k requests that the splitindex Javadoc parameter be used for the online documentation to split the index into one file per letter This would improve performance as the current index all html page for Spring 2 5 5 is very large 8 MB making it slow for web browsers to render The issue was addressed with commits that implemented the change and Chris Beams thanks Rossen for the pull request confirming that it has been merged This affects Spring 2 5 5,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4668 David J M Karlsen requests that Javadoc JARs be provided for each of the Maven2 modules as they are currently missing e g in spring core This would make it easier for IDEs like Eclipse or IntelliJ IDEA to automatically include the Javadocs when using Maven Rossen Stoyanchev responds by noting that source JARs are available and contain the Javadoc but asks if there is a specific advantage to having a separate Javadoc JAR in an IDE This issue affects Spring 2 5 3 and has generated some community interest with 2 votes and 3 watchers,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4637 Marten Deinum suggests improving the MVC documentation by adding details on how return values are handled in a MVC controller He proposes a small chapter explaining how different return types such as String ModelAndView Map and other objects are processed and added to the ModelAndView Juergen Hoeller thanks Marten for the suggestion and confirms that he has added a corresponding section to the MVC chapter in the reference documentation He also notes that some of this information is available in the RequestMapping Javadoc but acknowledges that it s not very obvious This issue affects Spring 2 5 2,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4441 Oliver Siegmar points out that the Spring documentation for ContextStartedEvent and ContextStoppedEvent which were introduced in Spring 2 5 is missing from chapter 3 8 3 Events This chapter lists built in events but these two new events are not included Juergen Hoeller thanks Oliver for identifying the oversight This issue affects Spring 2 5 1,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4316 Andreas Schildbach suggests upgrading the commons logging dependency in the Maven2 POMs from version 1 1 to 1 1 1 as the newer version declares transitive dependencies as optional making it cleaner and reducing the need for exclusions Commons logging 1 1 1 also includes bug fixes and resolves packaging issues for Maven users Juergen Hoeller agrees noting that commons logging 1 1 1 was overlooked when updating third party dependencies for Spring 2 5 1,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4296 Chris Beams reports that internal links in the PDF documentation generated with the link element are not underlined or colored blue unlike in the HTML output This makes the PDF less usable as links are not visually discoverable unless hovered over Chris provides an example from section 3 2 3 2 3 where internal links are clearly visible in the HTML version but not in the PDF although the links are clickable He attaches a patch underline internal links patch to fix this issue by modifying the fopdf xsl stylesheet Juergen Hoeller acknowledges the suggestion and Leigh Waller asks for guidance on how to apply the patch,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4295 Chris Beams reports a formatting issue in the PDF table of contents TOC generated from spring docs reference styles fopdf xsl The current configuration preserves newlines which results in undesirable breaks in the TOC For example section 3 8 1 is split into two lines BeanFactory or on one line and ApplicationContext on the next Chris suggests that the TOC should be formatted without these unnecessary newlines and provides a patch eliminate toc newlines patch to address this issue by ignoring whitespace and newlines during TOC generation Juergen Hoeller thanks Chris for identifying and addressing the problem,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4262 Tim Diggins suggests that the Spring website should include a dedicated Bugs or Suggested Process page to guide users on how to report bugs or improvements in the best way He proposes having clear steps such as discussing issues on mailing lists or forums before posting on JIRA similar to how eclipse org provides a clear process for bug reporting Rossen Stoyanchev responds by noting that the Spring project already offers sufficient guidance through various GitHub READMEs and Contributor Guidelines but agrees that a single page consolidating all options could be helpful Juergen Hoeller later closes the issue marking it as outdated with the option to reopen if still relevant,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4199 Paul Benedict points out that the documentation for Log4jWebConfigurer only provides examples using log4j properties and does not mention that log4j xml can be used as an alternative configuration file He suggests that the documentation should include this information Juergen Hoeller acknowledges the oversight and thanks Paul for noticing it This issue affects Spring versions 2 0 7 and 2 5 final and is backported to 2 0 8 Paul later suggests lowering the issue s priority to Trivial,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4158 Rick Evans suggests tightening the Javadoc contract for the ContextLoader loadContext method in org springframework test context ContextLoader The current Javadoc mentions that the method potentially refreshes the context but testing shows that the context must be refreshed for the Spring test framework to function correctly Rick proposes either updating the Javadoc to mandate that the context is always refreshed or adjusting the code to ensure refresh is always called Juergen Hoeller agrees confirming that loadContext should return a fully refreshed context This issue affects Spring 2 5 final,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4156 Rick Evans identifies a typo in section 3 7 2 of the Spring documentation titled Customizing configuration metadata with BeanFactoryPostProcessors The sentence BeanFactoryPostProcessors operate on ends abruptly and should be clarified Rick provides the corrected snippet explaining that BeanFactoryPostProcessors operate on bean configuration metadata allowing for its modification before the Spring IoC container instantiates any beans Juergen Hoeller thanks Rick for reporting the issue and it is noted that this typo affects Spring versions 2 0 7 and 2 5 final with a backport to 2 0 8,0,0,0,1,1,0,0
In Spring JIRA issue SPR 4067 Stefan Scheidt highlights a conflict when using Autowired and Required annotations simultaneously on the same injection point Since Autowired already implies a required dependency unless required false is set combining the two does not make sense and results in a BeanCreationException during bean initialization He suggests adding a note in the Spring reference documentation to clarify this Rossen Stoyanchev comments that the issue was included in a bulk update aimed at older issues and may now be obsolete due to changes in later Spring versions including deprecations If still relevant the issue can be reopened or updated,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3971 Patrick Crocker reports that the Maven Central repository lacks source JAR files sources jar for several Spring modules in version 2 0 7 even though the full Spring dependency has sources available This affects critical modules like spring core spring context and others making it difficult for developers to debug or trace their applications in IDEs like Eclipse using Maven Glen Mazza comments that this issue is important for proper Spring usage as developers rely on commands like mvn eclipse eclipse DdownloadSources true to attach source code for debugging purposes Juergen Hoeller confirms that the issue has been resolved for Spring 2 5 x where module sources are published However nebhale states that source JARs will not be added retrospectively for older versions 2 0 x due to the labor intensive process and recommends upgrading to Spring 2 5 x or 3 0 0,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3910 Peter Mularien requests that the vanilla Spring framework ZIP file e g spring framework 2 0 6 zip should include the Javadoc for the Spring API Currently users have to download the larger and unintuitively named with dependencies zip to get the Javadoc which includes additional content they may not need Juergen Hoeller responds by confirming that a dedicated with docs zip or standalone docs zip distribution is planned for Spring 2 5 making the process more intuitive He also points out that what was Spring 2 1 has been renamed to Spring 2 5 with RC1 expected soon This issue affects Spring 2 0 6 and is related to duplicate issue 7590 and 8589 which request similar improvements,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3787 Chris Lee points out that the JavaDoc for org springframework web servlet FrameworkServlet does not mention that the contextConfigLocation parameter supports wildcards This parameter can accept multiple file paths separated by commas or spaces and wildcards should be included in the documentation This issue affects Spring versions 2 0 6 and 2 1 M3 Rossen Stoyanchev notes that this issue has been resolved as part of a bulk update process for older issues created before Spring 3 0 He mentions that changes in later versions of Spring including deprecations may have rendered the issue obsolete If still relevant the issue can be reopened or a new issue can be created with updated details,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3786 Chris Lee requests an explanation of the differences between dependency injection DI and dependency lookup along with the pros and cons of each He notes that up until Spring 2 1 DI was the primary method for wiring beans but with the introduction of annotations like Autowired and Resource there may be confusion as these annotations are often seen as replacements for XML configuration but they actually represent dependency lookup mechanisms Chris mentions that dependency lookup can lead to tight coupling and increased fragility while DI promotes loose coupling and is non intrusive Costin Leau responds stating that a sidebar has been added to the Spring reference manual to address this topic with dedicated chapters allowing developers to make informed choices Costin also clarifies that annotation based injection does not necessarily imply dependency lookup This issue affects Spring 2 1 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3774 Chris Lee notes that the Spring reference manual v2 1M3 section 3 8 5 which discusses Convenient ApplicationContext instantiation for web applications does not mention that wildcards can be used in the contextConfigLocation parameter He suggests that this should be documented since wildcards are supported This issue is related to a previous ticket SPR 3770 that addresses a similar omission Juergen Hoeller agrees with the suggestion and thanks Chris for identifying the documentation gaps This issue impacts Spring versions 2 0 6 and 2 1 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3773 Chris Lee suggests that the Spring reference manual specifically section 3 5 in version 2 1M3 should mention the newly added JSR 250 lifecycle annotations alongside other lifecycle mechanisms like marker interfaces and initialization destroy callback methods He feels it would be beneficial to summarize all lifecycle options in one place for clarity Costin Leau responds by confirming that this issue has been addressed in the Spring 3 0 documentation specifically in section 3 6 1 4 which discusses combining various lifecycle mechanisms This issue primarily affects Spring 2 1 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3770 Chris Lee highlights that the JavaDoc for org springframework web context ContextLoader does not mention its support for Ant style wildcards in the contextConfigLocation parameter despite the fact that wildcards are supported He suggests this should be clearly documented in the JavaDoc to inform developers Juergen Hoeller agrees with the observation and thanks Chris for pointing it out indicating that this information will likely be added to the documentation This issue affects Spring versions 2 0 6 and 2 1 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3769 Chris Lee points out that section 12 6 1 2 of the Spring reference manual Spring 2 1 M3 misleads users by implying that the configuration steps in subsections like Tomcat setup and OC4J setup are for LocalContainerEntityManagerFactoryBean when they are actually for load time weaving This distinction is important because load time weaving may not always be necessary Juergen Hoeller acknowledges the issue and confirms that the titles have been revised for clarity He also notes that while load time weaving is often required for JPA persistence providers like TopLink Essentials and OpenJPA it is not always indispensable although the JPA specification assumes weaving capabilities are available in a Java EE environment,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3768 Chris Lee suggests that section 12 6 2 of the Spring reference manual should include a caveat from the JpaTemplate JavaDoc The caveat emphasizes that JpaTemplate primarily exists for compatibility with JdoTemplate and HibernateTemplate but is not recommended for new projects Instead developers are encouraged to use the standard JPA coding style with a shared EntityManager injected via Spring or the JPA PersistenceContext annotation Current documentation briefly mentions direct JPA usage but does not highlight this important recommendation Juergen Hoeller agrees that this caveat should be added to the manual for clarity especially in versions 2 0 6 and 2 1 M3,0,0,0,1,1,0,0
In Spring JIRA issue SPR 3767 Chris Lee suggests updating the Spring reference manual specifically section 12 2 Hibernate to clearly state the minimum supported Hibernate version as 3 1 He points out that while Hibernate 2 1 is available in a separate library Spring s current Hibernate support generally requires 3 1 or higher This change affects Spring versions 2 0 6 and 2 1 M3 Juergen Hoeller confirms that Spring 2 1 strictly requires Hibernate 3 1 and while Hibernate 2 1 may still work with Spring 2 0 x using it with Spring 2 1 is not supported Both Chris and Juergen agree that this requirement should be documented in the Spring reference manual to avoid confusion and ensure clarity for developers,0,0,0,1,1,0,0
The issue SPR 3764 opened by Chris Lee addresses inconsistent references to Java 5 in the Spring 2 1M3 reference manual Variations like Java 5 Java5 Java 5 Tiger and Java5 Tiger were used inconsistently This problem affected versions 2 0 6 and 2 1 M3 Juergen Hoeller acknowledged the issue and confirmed that Java 5 is now used consistently throughout the documentation,0,0,0,1,1,0,0
In the Spring 2 1M3 reference manual a comment referencing Java 5 as being used by a lucky few was identified as outdated Chris Lee noted that this phrasing no longer reflects the current usage patterns and doesn t contribute value to the documentation Juergen Hoeller agreed suggesting that the documentation should instead reference the availability of Java 6 acknowledging the wider adoption and relevance of newer Java versions This change would ensure the documentation remains current and useful to its audience,0,0,0,1,1,0,0
A typo was identified in the Spring Framework Reference Documentation specifically in Section 3 3 3 2 References to other beans collaborators The phrase in order to know about errors are early as possible should be corrected to in order to know about errors as early as possible This issue affects version 2 0 6 and was reported by Frank Dean Juergen Hoeller acknowledged the error and thanked Frank for pointing it out,0,0,0,1,1,0,0
The section titled AspectJ or XML for Spring AOP compares two approaches for configuring Aspect Oriented Programming in Spring using AspectJ annotations or XML configuration Each method has its own advantages AspectJ is generally favored for its simplicity and ease of use integrating seamlessly with Java code It allows for more concise and readable configurations reducing boilerplate On the other hand XML configuration offers flexibility and is beneficial for those who prefer separating configuration from code It allows for configurations to be modified without changing the source code which can be useful in certain enterprise environments The decision between the two often depends on project requirements team preferences and the desired balance between code conciseness and configuration flexibility,0,0,0,1,1,0,0
Unitils is a testing tool that Rusty Wright started using and found effective suggesting it be mentioned alongside DbUnit in testing resources The Spring team as noted by Rick Evans has been observing Unitils and has incorporated some of its ideas into another JIRA issue 7229 that Sam is addressing This highlights Unitils influence on testing practices within the Spring framework,0,0,0,1,1,0,0
In section 9 6 2 of a document regarding the use of PlatformTransactionManager an error was reported by Keesun Baik The method setTransactionName was incorrectly used and should be replaced with setName This correction affects version 2 0 4 Juergen Hoeller acknowledged the mistake and expressed gratitude for bringing it to attention,0,0,0,1,1,0,0
The OSIV Open Session in View filter documentation should clarify its flush mode behavior particularly in conjunction with transactions By default the filter sets the Hibernate session flush mode to FlushMode NEVER assuming sessions will be managed by service layer transactions or HibernateAccessors with flushMode FLUSH EAGER When using transaction managers like HibernateTransactionManager or JtaTransactionManager the session s flush mode automatically changes to FlushMode AUTO during transactions To ensure flushing after a request you must override closeSession to invoke flush and adjust getSession for a different flush mode The javadoc has been updated to reflect these changes,0,0,0,1,1,0,0
The ORM documentation for transaction management initially referenced older ProxyFactoryBeans PFBs methods which needed updating to the aop config approach Alef Arendsen noted this in issue SPR 3209 affecting versions 2 0 final 2 0 1 and 2 0 2 However upon review it was found that the aop config documentation was already included only preceded by the ProxyFactoryBean example rendering the issue invalid,0,0,0,1,1,0,0
The OpenSessionInView pattern lacks adequate documentation in the Spring reference manual despite being a common usage pattern This gap has prompted several inquiries for examples and explanations The issue SPR 3194 highlights the need for comprehensive coverage to aid developers It is marked as a duplicate of another issue 6322 which also calls for documentation improvements specifically regarding Hibernate3 s OpenSessionInView and the getCurrentSession method This suggests a recurrent demand for better guidance on integrating these components effectively,0,0,0,1,1,0,0
Ganesh Krishnan reported a typo in the Spring Framework documentation regarding a misspelling of Transparent as Transrparent in the Remoting usage scenario section Additionally there was a suggestion to clarify whether Remoting usage scenario should be Remote usage scenario This issue affected version 2 0 2 Rick Evans responded confirming the typo was fixed and thanked Ganesh for identifying it,0,0,0,1,1,0,0
The discussion revolves around using DefaultMessageListenerContainer with non XA transaction managers like DataSourceTransactionManager in Spring It s common to use DataSourceTransactionManager for database operations in a listener allowing rollback of both database work and messages if transactedSession true However the default is false leading to potential duplicate messages Documentation should address this ensuring transactedSession true when not using JtaTransactionManager Juergen Hoeller suggests applying DataSourceTransactionManager at the listener method level via Transactional avoiding its use directly on the listener container due to caching issues The recommendation is to use JtaTransactionManager or JmsTransactionManager for the container s transactionManager property The default behavior has been revised to set sessionTransacted true for non standard transaction managers enhancing support without affecting caching efficiency,0,0,0,1,1,0,0
The issue SPR 3153 highlights a misleading Javadoc comment for ResultSetExtractor suggesting that a RowMapperResultSetExtractor is a RowCallbackHandler which is incorrect The comment hasn t been updated to reflect recent refactorings of related classes This confusion prompted a revision of the Javadoc for ResultSetExtractor RowCallbackHandler and RowMapper by Juergen Hoeller to ensure clarity and accuracy in the documentation,0,0,0,1,1,0,0
The discussion revolves around creating a Spring FAQ to address recurring questions in forums despite updates to the reference manual Contributors like Karl Moore and Rick Evans suggest compiling common questions and answers into a DocBook format for easier integration into official documentation Marten Deinum hosts a temporary wiki to aggregate these questions until an official medium is available The effort faces challenges like limited editing access on Confluence and the need for collaborative input The resolution process involves documenting these frequently asked questions in a structured manner to streamline support and improve user experience,0,0,0,1,1,0,0
The thread safety of JdbcTemplate in Spring has been a recurring concern often due to unclear documentation Users have questioned whether JdbcTemplate is thread safe and how it should be reused across data access objects DAOs Some confusion arises from examples where JdbcTemplate is instantiated for each call suggesting inconsistent scoping The documentation now includes a section titled JdbcTemplate idioms best practices to clarify these issues This addition aims to provide clearer guidance on effective reuse patterns and ensure users can implement JdbcTemplate correctly and safely in multi threaded environments,0,0,0,1,1,0,0
A forum issue highlighted confusion about the TransactionTemplate example in the documentation specifically regarding the creation or injection of the TransactionTemplate and the origin of the variable tt The documentation could be made clearer with a complete example to address these ambiguities This concern was acknowledged and a fix has been implemented to resolve the points raised ensuring clarity and understanding for users,0,0,0,1,1,0,0
In Chapter 12 there are typos related to method naming conventions in the code examples for programmatic and declarative transaction demarcation The method increasePriceOfAllProductsInCategory incorrectly uses productDAO instead of productDao This error appears in sections 12 2 6 and 12 2 7 affecting version 2 0 2 The issue was noted by Karl Moore and confirmed as resolved by Rick Evans,0,0,0,1,1,0,0
In Chapter 8 of the documentation Karl Moore highlighted typographical errors related to dependency injection and configuration in code examples In section 8 3 2 the issue involved inconsistencies in the presentation of bean configurations The example incorrectly showed a path using a dot instead of slashes affecting the class package path Similarly in section 8 3 5 a discrepancy in the use of quotation marks around file paths was noted impacting how configuration locations are specified in the HibernateClinicTests class These minor errors were addressed with Rick Evans acknowledging the oversight and the importance of such details for clarity,0,0,0,1,1,0,0
The issue SPR 3077 highlights confusion around Spring MVC and aspect oriented programming AOP specifically with internal calls and dynamic proxies Users frequently encounter difficulties leading to repeated inquiries about the same topics To address this a suggestion was made to enhance the Spring MVC documentation by adding a reference to the Understanding AOP proxies chapter This update completed in version 2 0 3 includes a sidebar reference explaining the open closed principle in this context The clarification aims to reduce misunderstandings by providing direct guidance on these technical aspects,0,0,0,1,1,0,0
In the Spring testing framework Paul Benedict suggested simplifying tests by using annotations for property injection instead of defining set methods He proposed modifying the base class to automatically resolve fields annotated with Inject Although this feature exists it was missing from the Reference Documentation in chapter 8 Key issues include the lack of documentation on AbstractDependencyInjectionSpringContextTests and AbstractAnnotationAwareTransactionalTests along with their associated annotations Paul later noted an oversight regarding the ExpectedException annotation which was initially thought to be unused Rick Evans acknowledged the missing documentation and confirmed that it had been updated,0,0,0,1,1,0,0
Oliver Siegmar opened a JIRA issue SPR 3022 to highlight the need for documentation on creating a custom Required annotation in Java He discovered that defining Retention and Target is necessary for such annotations to function properly An example provided defines a custom annotation Mandatory java package your company package Mandatory import java lang annotation ElementType import java lang annotation Retention import java lang annotation RetentionPolicy import java lang annotation Target Retention RetentionPolicy RUNTIME Target ElementType METHOD public interface Mandatory nothing Rick Evans responded indicating that additional documentation was added to address this requirement thanking Oliver for raising the issue,0,0,0,1,1,0,0
In the Struts integration documentation there s an incorrect reference to action context xml in webintegration xml on line 307 This file name isn t mentioned in the example or elsewhere leading to confusion about whether it should be applicationContext xml Juergen Hoeller noted that the intended file action servlet xml is introduced earlier in the ContextLoaderPlugin section highlighting a need for clearer documentation Matt Benson pointed out the discrepancy and Rick Evans confirmed that the reference to action context xml was indeed incorrect and needed correction,0,0,0,1,1,0,0
In the issue SPR 2864 Matt Benson identified the incorrect use of the word principal instead of principle in three XML files webintegration xml at line 53 jms xml at line 41 and beans xml at line 2792 This affects version 2 0 1 of the software Juergen Hoeller acknowledged the report and thanked Matt for identifying the errors,0,0,0,1,1,0,0
In the Spring framework a key discussion revolves around preferring XML driven configuration over annotations for AOP injection and configuration XML configurations avoid direct dependencies in the code aligning with Spring s goal of minimizing client dependencies Despite this some sections of the Spring documentation emphasize annotations particularly for Java 5 which contradicts this philosophy Annotations create dependencies similar to interfaces as they must be imported into the code contrary to the zero dependence approach of XML While annotations can simplify some aspects like transaction management they can obscure inherent code requirements and complicate switching between AOP tools XML configurations maintain separation from business logic offering a cleaner alternative for aspects not directly tied to business concerns The documentation has been revised to better balance these approaches acknowledging that neither is universally superior and encouraging developers to choose based on specific use cases,0,0,0,1,1,0,0
The documentation for Configurable in Spring specifically in chapters 6 8 and 6 8 1 has been noted as confusing by users The content distinguishes between capabilities provided by AspectJ weaving and pure Spring AOP It clarifies that earlier sections cover only Spring AOP while the latter sections introduce the use of the AspectJ compiler weaver for more advanced needs Some edits were made such as the removal of redundant terms in the configuration files but overall there was no significant change to the documentation Despite this some users like Oleksandr Alesinskyy find the explanations clear and sufficient,0,0,0,1,1,0,0
The issue SPR 2836 involves a textual correction in the Javadoc of AbstractSimpleBeanDefinitionParser where element should be replaced with method The correction was identified by Matt Benson and pertains to line 73 of the documentation This change affects version 2 0 final of the software Juergen Hoeller acknowledged the mistake and expressed gratitude for the correction,0,0,0,1,1,0,0
The issue SPR 2822 highlights a problem with using WebLogicMBeanServerFactoryBean in WebLogic 9 It was noted by Steven Devijver who referenced a forum discussion for further details Juergen Hoeller acknowledged the issue agreeing to add a comment in the Javadoc to warn users not to use this class with WebLogic 9 He also included an example of JndiObjectFactoryBean configuration and specified the JNDI name for WebLogic s runtime JMX server as requested The issue affects versions 1 2 8 and 2 0 final with a backport to 1 2 9 This enhancement aims to prevent potential integration problems for developers using these Spring Framework versions with WebLogic 9,0,0,0,1,1,0,0
The issue SPR 2781 was opened by Matt Benson to address an error in the aop api xml file While one error from a previous report 7464 was resolved another error on line 487 remained unresolved as of revision 1 15 This affected versions 2 0 final and 2 0 1 Rick Evans later confirmed that the error was fixed,0,0,0,1,1,0,0
In SPR 2778 Matt Benson highlights inconsistencies between the documentation and the implementation of the ThrowsAdvice interface in Spring The documentation suggests that methods implementing afterThrowing can have any combination of four parameters Method Object Object and Throwable with the last being required However the ThrowsAdviceInterceptor implementation only recognizes methods with either all four parameters or just the Throwable Benson proposes that documentation should clarify this by grouping the first three parameters to indicate they are an optional unit Additionally he suggests revising a statement in aop api xml to reflect that method signatures may have only one or four arguments Rick Evans confirms the fix thanking Benson for identifying the issue,0,0,0,1,1,0,0
Matt Benson reported typos in the aop api xml file of the Spring documentation The comments on lines 471 and 488 incorrectly say do something will all arguments instead of do something with all arguments This affects versions 2 0 final and 2 0 1 In a lighthearted exchange Benson joked about frequently reporting documentation errors and mentioned Stoke on Trent s dialect humorously Rick Evans acknowledged the errors and expressed appreciation for Benson s attention to detail confirming the issues have been fixed,0,0,0,1,1,0,0
In the Spring Framework issue SPR 2768 a typo was reported in the Javadoc of the StaticMethodMatcher class The description mistakenly used superclas instead of superclass Matt Benson reported this error and Rick Evans acknowledged and confirmed that it was fixed,0,0,0,1,1,0,0
The issue SPR 2766 raised by Matt Benson highlights typographical errors in the ProxyFactoryBean Javadoc Specifically it notes a typo on line 52 where it s should be it s and questions the grammatical correctness of a colon on line 55 suggesting a semicolon might be more appropriate Although there s some debate about the colon versus semicolon usage with resources indicating it s a gray area the preference leans slightly toward the semicolon Rick Evans acknowledged the errors and confirmed they were fixed while expressing that the colon seemed acceptable as it was,0,0,0,1,1,0,0
Matt Benson identified a typo in the AOP reference documentation for Spring 2 0 final The issue was in line 1610 of aop xml where the attribute aop after throwing was incorrectly labeled as thowing instead of throwing Benson humorously noted that this mistake might go unnoticed in the Southeastern US due to local pronunciation Rick Evans acknowledged the error and confirmed it was fixed,0,0,0,1,1,0,0
In the Spring Framework documentation a typo was identified by B rd Dybwad Kristensen in chapter 2 7 1 2 related to XML configuration where the word shiiped was mistakenly used This issue affects version 2 0 final Juergen Hoeller acknowledged the report and thanked Kristensen for bringing it to their attention,0,0,0,1,1,0,0
In the Spring framework a documentation error was identified regarding the singleton attribute in bean definitions Although removed in Spring RC4 the reference manual incorrectly stated that it was still available for backward compatibility The issue reported by Arthur Loder noted that Section 3 4 1 of the documentation gave misleading information Juergen Hoeller clarified that the singleton attribute is only supported in the original Spring 1 2 style DTD declarations and not in the spring beans 2 0 dtd When using version 2 0 or XML Schema Definitions XSD the scope attribute must be used instead This ensures compatibility with Spring 1 2 while adhering to updated standards,0,0,0,1,1,0,0
In the Spring Framework issue SPR 2619 Arthur Loder pointed out an ambiguity in the documentation regarding the initialization order of web application components The Servlet 2 4 specification requires that listeners initialize after a web application starts but Loder noted that this does not clarify whether listeners should initialize before or after servlets This ambiguity could lead to misinterpretation implying that listeners might initialize after servlets which is not the intent Rick Evans later commented that the documentation had been clarified to address this issue,0,0,0,1,1,0,0
In the Spring Framework documentation there was an error in the description of how model data is processed in Spring MVC applications The text mistakenly suggested that nothing XSLT specific had been done and repeated So far we ve done nothing in a sentence that should have referenced VelocityContext Arthur Loder identified this issue and Rick Evans acknowledged the mistake confirming it was fixed This correction ensures clarity in how data is rendered using technologies like JSP JSTL and Velocity in Spring MVC The error affected version 2 0 RC4 of the documentation,0,0,0,1,1,0,0
The issue SPR 2600 highlights a gap in the Spring documentation regarding the implementation of registerDestructionCallback for custom scopes This feature presumably related to issue 6773 lacks guidance in the reference manual The discussion emphasizes the need for clearer documentation on lifecycle management of non singleton beans and the creation of new scopes Alef Arendsen noted that improvements would be made in version 2 0 3 with some details remaining in the JavaDocs Juergen Hoeller and others acknowledged the oversight while J rg Heinicke shared his implementation of a ThreadScope and SessionScope Karl Moore and Oliver Siegmar called for more comprehensive documentation and removal of outdated markers Stephen Denne and Rick Evans discussed custom scopes like the axis session and the challenges in implementing registerDestructionCallback and getConversationId The conversation hints at the complexity and necessity of detailed documentation for custom scope creation and lifecycle management in Spring,0,0,0,1,1,0,0
The section on lookup method injection in the Spring documentation is confusing as pointed out in SPR 2580 The initial sentence has a misplaced period and the explanation of abstract and concrete methods is unclear The document should focus on the necessary form of the method rather than stating the obvious abstract concrete nature A clear English explanation before the code sample would be beneficial The sentences following the code sample are misplaced and add to the confusion they should be reorganized for clarity The phrase In the case of XML based configuration metadata might be redundant as XML configuration is a standard method in Spring Additionally guidance on writing unit tests for abstract beans is missing which could be helpful for readers,0,0,0,1,1,0,0
AspectJ load time weaving in a Spring application context was initially unclear in documentation especially regarding configuring TomcatInstrumentableClassLoader While using the javaagent JVM option is possible it s not optimal The documentation primarily covers JPA instrumentation which configures the weaver inside EntityManagerFactory a JPA specific approach Juergen Hoeller introduced general LoadTimeWeaver support for AspectJ and JPA This involves an AspectJWeavingEnabler bean and LoadTimeWeaverFactoryBean which autodetects runtime environments The context load time weaver XML tag in Spring 2 1 activates the default LoadTimeWeaver integrating AspectJ weaving Initially support focused on JPA with AspectJ interoperability planned for future releases,0,0,0,1,1,0,0
Integrating JPA with native provider APIs like Hibernate involves addressing compatibility challenges between JPA and native interfaces The goal is to enable seamless operation when using the same ORM through both JPA and its native API such as Hibernate Session While this integration is mostly relevant in specific scenarios where ORMs don t interfere with each other it remains complex due to resource management issues For example extracting a SessionFactory from an EntityManagerFactory is necessary for Hibernate access which complicates the setup Potential solutions include binding additional JPA resources such as Hibernate Session during transaction management Extending the JPADialect could also help in facilitating these interactions by providing more than just JDBC connections These enhancements are considered for future updates like Spring 2 1 to improve integration feasibility,0,0,0,1,1,0,0
Esko Luontola requested a multi page HTML version of Spring s documentation as the single page format is currently the only option available in the Spring distribution This is particularly important for users like him who read documentation on devices like the Palm TX during commutes as it facilitates easier navigation Currently he manually downloads the pages using wget Alef Arendsen responded that including a multi page version would significantly increase the distribution size which is undesirable Most users prefer the single page version for ease of printing He suggested generating the documentation using the doc html single ant target as an alternative solution,0,0,0,1,1,0,0
The Javadocs for AbstractSimpleBeanDefinitionParser and AbstractSingleBeanDefinitionParser in the Spring framework require significant improvement These classes are intended as useful convenience tools but their lack of documentation makes them difficult to use effectively The issue tracked under SPR 2397 highlights the need for better explanations and examples in the Javadocs Although some improvements have been made detailed guidance on creating custom parsers has been left to the reference documentation This concern extends to the entire AbstractBeanDefinitionParser hierarchy indicating a broader need for comprehensive documentation across these components,0,0,0,1,1,0,0
The documentation for injecting an EntityManager into a DAO using plain JPA lacks clarity particularly regarding method level injection This term possibly unfamiliar could benefit from rephrasing or additional explanation The documentation should also address thread safety and the scope of the EntityManager Specifically questions arise about whether a single injected EntityManager can be used safely across multiple threads and if it acts as a proxy to a thread bound implementation These concerns highlight the need for clearer guidance on using EntityManager in a multi threaded environment Subsequent comments indicate that side notes were added to address these issues including injection level terms and EntityManager thread safety,0,0,0,1,1,0,0
The Javadocs for MessageListenerAdapter needed clarification on method resolution rules as they previously mentioned reflection but lacked details on criteria for considering methods They didn t specify permissible arguments return values or naming conventions The reference documentation was more comprehensive and could be used to enhance the Javadocs This issue affecting version 2 0 RC2 was addressed following feedback,0,0,0,1,1,0,0
The issue raised in SPR 2358 concerns the confusion in the HibernateTemplate Javadoc regarding the get and load methods The problem stems from a lack of clarity which has led to criticism particularly from the JBoss community The suggestion was to directly incorporate Hibernate s Session Javadoc for these methods to clarify their usage get returns a persistent instance or null while load assumes existence and throws an error if not found However instead of copying the text verbatim it was decided to direct users to the Hibernate documentation for precise semantics This approach avoids synchronization issues with Hibernate updates and encourages users to consult both Spring and Hibernate documentation Rick Evans confirmed this resolution and appreciated the feedback acknowledging the importance of addressing the confusion,0,0,0,1,1,0,0
The classpath behavior in different platforms can vary due to differences in classloader implementations For example while classpath works as expected in Tomcat it may not function properly in OC4J under standard configurations This inconsistency necessitates documentation updates to inform users about potential issues The issue was initially raised by Costin Leau to provide clarity and heads up for developers encountering this problem Documentation updates have been made to address these concerns ensuring users are aware of platform specific behaviors More detailed discussions on this topic can be found in the Spring community forums,0,0,0,1,1,0,0
The JMX remoting documentation for Spring needed updates to clarify details about the RMI registry This was highlighted by Costin Leau in SPR 2264 https jira spring io browse SPR 2264 The issue affected version 2 0 RC2 Costin Leau updated the documentation and committed the changes to the CVS repository Further discussion and details can be found in the Spring forum,0,0,0,1,1,0,0
The issue SPR 2238 highlights a missing detail in the util schema documentation for Spring specifically in Section A 2 2 It was noted that the collection types do not mention an attribute that allows overriding the Java class type of the collection This oversight was addressed and corrected by Rick Evans who also documented the merge attribute The issue affected version 2 0 RC1,0,0,0,1,1,0,0
The issue SPR 2222 https jira spring io browse SPR 2222 redirect false focuses on enhancing the JPA version of the Petclinic application Costin Leau suggested updating the petclinic html page to include information about JPA the latest TopLink jar and a workaround for the stale cache problem The issue affects version 2 0 RC1 Ingo M mentioned submitting a duplicate case including a ZIP file with annotated Entity classes indicating a collaborative effort to address the problem The updates aim to improve the application s performance and documentation regarding JPA usage,0,0,0,1,1,0,0
The current IoC chapter in the Spring documentation is excessively large and needs restructuring It should be divided into two distinct sections Core and Advanced The Core chapter would cover essential topics such as the Spring IoC container core interfaces like BeanFactory and ApplicationContext XML configuration bean scopes lifecycle interfaces and common metadata like lazy init The Advanced section despite its name would focus on less frequently used features that are not critical for basic understanding This includes method injection autowiring extension points like bean post processors singleton lookup classes message sources and application context events Ultimately while the chapter remained unified it was extensively reorganized with some content moved elsewhere and diagrams were added for clarity,0,0,0,1,1,0,0
The issue SPR 2124 was opened by Rick Evans to address the ambiguity in the documentation regarding the definition of a Spring singleton The goal was to clearly define the exact semantics of a Spring singleton as the existing documentation was not entirely clear This issue was prompted by a discussion in the Spring forum The affected version was 2 0 M5 Rick Evans later commented that the documentation had been revised to hopefully provide a clearer explanation,0,0,0,1,1,0,0
The reference documentation for the collection merge feature in Spring incorrectly describes the attribute as applying to the property element instead of the correct elements like list set map and props This issue identified by Matt Benson was logged under SPR 2084 Rick Evans acknowledged the error and confirmed it was fixed just in time for the M5 release,0,0,0,1,1,0,0
The Spring 2 0 release introduced enhanced support for asynchronous messaging in JMS which necessitated more comprehensive documentation Three main asynchronous options known as xxxMessageListenerContainer are supported Each option offers distinct configuration methods transaction management capabilities and has its own pros and cons Detailed examples are needed to illustrate these configurations effectively This expanded coverage aims to guide developers in choosing the right approach for their specific needs ensuring robust and efficient async messaging in their applications Additional updates and information are being incorporated in related issues SPR 2095 and SPR 2096,0,0,0,1,1,0,0
In the JIRA issue SPR 1994 Rusty Wright suggested adding an explanation to the online Spring documentation about why some methods are marked as final This clarification would help users understand the design principle of open for extension but closed for modification as discussed in Expert Spring MVC and Web Flow Rick Evans responded by adding a sidebar to the Spring MVC chapter referencing the book section and linking to a relevant article by Bob Martin This approach follows the DRY Don t Repeat Yourself principle providing a concise resource for addressing similar inquiries in the future,0,0,0,1,1,0,0
The Javadocs for the setConfigLocations String configLocations method in StaticWebApplicationContext were misleading because they did not indicate that the method throws an UnsupportedOperationException This issue tracked as SPR 1959 https jira spring io browse SPR 1959 was identified by Tim Nolan The error affected version 2 0 M4 Rick Evans acknowledged the problem and confirmed it has been fixed thanking Nolan for identifying the issue,0,0,0,1,1,0,0
In Chapter 13 several documentation corrections were noted In Section 13 3 4 the term let s should be lets and method names should include parentheses for consistency Section 13 5 3 contains several issues technologies is misspelled a period is missing and a grammatical error in it s work needs correction to its work A sentence regarding RedirectView should be revised for clarity Additionally section numbering requires updates Sec 13 5 3 2 should become Sec 13 5 3 4 and Sec 13 5 3 3 should be Sec 13 5 3 5 with corrections in font style and sentence structure Lastly Sec 13 1 should be renumbered to Sec 13 8 and Sec 13 8 to Sec 13 9 These changes have been implemented and the effort to identify these issues is appreciated,0,0,0,1,1,0,0
In the Spring Framework documentation an issue was identified in chapter 19 2 1 where the lazy init false attribute was missing from an example This omission led to functionality issues as certain configurations had the default behavior set to true causing problems with bean initialization specifically in creating the MBean server While false is the default setting explicitly stating it prevents conflicts when defaults are altered elsewhere Michael Mattox highlighted the problem suggesting that examples should not rely on default settings due to potential changes in other configuration files Rick Evans acknowledged the issue updating the documentation to include lazy init true and adding comments for clarity ensuring users understand the need for eager instantiation of beans to facilitate proper exporting,0,0,0,1,1,0,0
Chapter 3 of the Spring reference documentation version 2 0 M3 contains several minor errors and potential enhancements Notable corrections include fixing typos such as applicaiton to application Thee to These and prupose to purpose Additionally some phrases were clarified like changing a collaborator so to speak to a collaborator Suggestions for enhancements include providing reasons for using name aliases in section 3 2 4 and offering a better example for using idref in section 3 3 3 5 These improvements aim to enhance clarity and utility for readers The issues have been acknowledged and addressed in preparation for future documentation releases,0,0,0,1,1,0,0
Rick Evans opened SPR 1851 to request improvements to the reference documentation on the lazy initialization feature of the Spring IoC container The documentation should thoroughly cover all semantics related to lazy initialization and its impact on dependencies This request is based on discussions from a support forum thread emphasizing the need for clarity and comprehensive coverage to aid developers in effectively utilizing lazy initialization in their projects,0,0,0,1,1,0,0
The documentation for the StoredProcedure RDBMS operation class needs enhancement as a single example is insufficient It s suggested to include links to various sample projects demonstrating StoredProcedure usage Additionally the reference documentation should semi officially deprecate other RDBMS operation objects in favor of direct JDBCTemplate usage This issue identified as SPR 1849 was addressed and fixed by Rick Evans who updated the reference documentation to improve clarity and guidance,0,0,0,1,1,0,0
In section 13 5 3 of the Spring documentation a typo was identified by Ryan Berdeen in the second sentence of the second paragraph The word This si desireable should be corrected to This is desirable This typo affects versions 1 2 4 through 1 2 7 and 2 0 M1 M2 Juergen Hoeller acknowledged the issue and confirmed it has been fixed,0,0,0,1,1,0,0
David Leal Valma a raised a concern about the inadequate documentation for implementing MyClientBean using ObjectFactoryCreatingFactoryBean in Spring s API He pointed out that the existing documentation did not clearly explain how to use myServiceFactory to obtain the desired bean The discussion on the Spring forum highlighted two potential solutions ObjectFactoryCreatingFactoryBean and ServiceLocatorFactoryBean with the latter having documentation issues such as missing code tags David eventually found a way to implement the Factory Creation Pattern using ObjectFactoryCreatingFactoryBean and offered to share this solution for improved documentation Juergen Hoeller acknowledged the feedback fixed the documentation errors and planned to address the broader issue in future releases Rick Evans confirmed that the Javadocs were updated in response to the JIRA issue,0,0,0,1,1,0,0
The typo in the Spring documentation was reported by Erick Dovale in issue SPR 1738 https jira spring io browse SPR 1738 redirect false In chapter 4 section 4 6 the third paragraph originally stated that resources with be loaded by the application context as the ResourceLoader The correct phrasing is will be loaded via appropriate classes like ClassPathResource FileSystemResource or ServletContextResource depending on the context type Juergen Hoeller acknowledged the issue and confirmed it was fixed,0,0,0,1,1,0,0
The latest version of Spring 2 0 M2 includes Easymock 1 2 and its class extension Bryan Hunt suggests upgrading to Easymock 2 0 as it offers significant improvements This upgrade would simplify development and bug reporting since more users have adopted the newer version However Juergen Hoeller notes that upgrading isn t feasible because Easymock 2 0 requires Java 5 while Spring s test suite must support JDK 1 4 and 1 3 Thus maintaining compatibility with older Java versions is currently prioritized,0,0,0,1,1,0,0
The documentation for Spring needs updating to reflect native support for WebWork via the SpringObjectFactory introduced in WebWork s 2 2 release The previously relevant Xwork Opt project is now obsolete and updated details are available on the WebWork integration page Affected versions include 1 2 6 and 2 0 M2 Rick Evans noted that the outdated WebWork section was replaced with an updated version praising WebWork and linking to the integration page There are plans to potentially create a Spring WebWork showcase project in the future to better demonstrate this integration,0,0,0,1,1,0,0
In the Spring reference manual section 3 4 2 1 discusses BeanFactoryAware but it s worth noting an alternative approach Instead of using BeanFactoryAware you can create a property of type ObjectFactory and initialize it with org springframework beans factory config ObjectFactoryCreatingFactoryBean This method can be more appropriate in certain cases It was noted that this approach should be included in the reference manual to guide users better This suggestion was made to enhance clarity and provide more options for developers The issue was addressed and marked as fixed,0,0,0,1,1,0,0
In the issue SPR 1575 Carlos Sanchez reported errors in the dependency documentation for the lib readme file The missing dependencies included AspectJ version 1 5 0 RC1 CommonJ version 1 1 and Portlet API version 1 0 along with the incorrect version of Hibernate listed as 3 1 RC3 instead of the final 3 1 version This discrepancy prevented compilation with the incorrect Hibernate version The issue affected version 2 0 M1 of the project and was referenced in a specific commit Juergen Hoeller acknowledged the report and confirmed that the errors were corrected,0,0,0,1,1,0,0
The MBeanExporter configuration using the Annotation Attribute Source in Spring involves setting up various beans to enable JMX support with annotations This configuration requires a MBeanExporter bean which includes properties for an assembler a namingStrategy and an autodetect option The assembler is linked to a MetadataMBeanInfoAssembler bean which utilizes an AnnotationJmxAttributeSource to source its attributes Similarly the namingStrategy is set up with a MetadataNamingStrategy bean that also references the jmxAttributeSource This setup allows for the automatic detection and registration of annotated beans facilitating easier management and monitoring through JMX The example addresses the gap in the documentation by providing a practical configuration guide,0,0,0,1,1,0,0
When rendering the Spring reference documentation into PDF page numbers initially appeared only on the right side causing issues when printed double sided as numbers ended up next to the binding Rick Evans amended the PDF stylesheet to allow page numbers to alternate sides when in double sided mode By default PDFs still print page numbers on the right for single sided mode To enable double sided numbering users must create a build properties file with double sided 1 at the Spring installation root and run the ant doc pdf target This will generate correctly paginated documentation in the spring docs reference pdf folder Feedback is encouraged if the solution doesn t meet expectations,0,0,0,1,1,0,0
Matt Benson reported a typo in the Spring Framework documentation under the section titled The classpath prefix The text in question incorrectly used well know instead of well known or well known when describing a mechanism for component style application assembly This typo affected multiple versions from 1 0 RC1 to 2 0 RC4 Juergen Hoeller acknowledged the issue and confirmed it was fixed,0,0,0,1,1,0,0
The issue SPR 1337 involves adding Javadoc for the Isolation and Propagation enums in the Spring Framework These enums detail the transaction management configurations in Spring which define how transactions should isolate data and propagate across different contexts The task was primarily about enhancing documentation by possibly drawing from existing resources like the Professional Java Development with the Spring Framework book Juergen Hoeller acknowledged the suggestion and confirmed the addition of Javadocs for both enums as well as for the isolation constants in TransactionDefinition improving the clarity and usability of the framework s documentation,0,0,0,1,1,0,0
Juergen Hoeller noted that resource location prefixes like file and classpath and view name prefixes such as redirect and forward lack documentation These features should be clearly explained in the reference documentation instead of being hidden in the javadoc of classes like ResourceLoader PathMatcher and UrlBasedViewResolver Colin Sampaleanu responded by expanding content on resources to about 6 7 pages and documenting RedirectView and the relevant prefixes He mentioned creating a new chapter on resources and planned to link it back from the Bean chapter However he was unsure about completing documentation on redirect and forward prefixes before the release of version 1 2 4 due to time constraints Juergen requested Colin to address this documentation gap as he wouldn t be able to do so before Wednesday,0,0,0,1,1,0,0
In the Spring Framework documentation there s a discussion on the map element under shortcut forms The default long form for map entries is xml entry key value yup an entry value key value just some string value entry Meanwhile the short form uses xml entry key yup an entry value just some string value entry The short form is analogous to using key ref for referencing beans The documentation should clearly distinguish between these forms with examples outside the short form section using the full form to clarify that beans can be used as keys The full form was introduced in Spring 1 2 which explains its absence in earlier documentation,0,0,0,1,1,0,0
The issue SPR 1006 focuses on enhancing the documentation for BeanFactoryPostProcessor and BeanPostProcessor within the Spring framework Specifically it aims to clarify why BeanPostProcessor is not recognized in inner bean definitions and why BeanFactory and BeanPostProcessor do not work together in that a BeanFactory won t post process beans when implementing the BeanPostProcessor interface This issue affects version 1 2 1 and is linked to 6908 which involves PropertyPlaceholderConfigurer not functioning with default lazy init true Additionally it suggests including a section in the What s New in Spring 2 0 to assist users migrating from Spring 1 2 x addressing changes like lazy init semantics Improvements to the BeanFactoryPostProcessor documentation are also recommended The documentation sections on BeanFactoryPostProcessor BFPP and BeanPostProcessor BPP have been significantly enhanced with a complete rewrite of the BPP section deemed necessary,0,0,0,1,1,0,0
The update for JMX remote connectors SPR 977 involves modifications to the JSR 160 connectors in the JMX documentation Costin Leau initially updated the connectors and attached a Word document and XML file as he was unable to generate a valid DocBook document Despite marking the issue as fixed discrepancies in the reference documentation persist particularly concerning the value of the remote connectors Daniel Carter noted that the documentation remains incorrect in version 3 0 x citing an example where the service URL format is outdated The correct format should include the jndi rmi localhost 9875 jmxrmi path This issue highlights the ongoing challenges in maintaining accurate documentation for JMX configurations,0,0,0,1,1,0,0
In section 14 3 of the Spring 1 2 documentation two typos were identified In 14 3 1 1 DelegatingRequestProcessor two identical code snippets were shown implying a mistake the second snippet should likely be shorter action path user In 14 3 1 2 DelegatingActionProxy the word ach should be corrected to each to clarify that new actions can be instantiated for each request These errors were acknowledged and corrected by Juergen Hoeller,0,0,0,1,1,0,0
The issue SPR 923 involves updating the Overview of the Spring Framework diagram in the reference documentation due to new modules in Spring 1 2RC2 such as spring support JMX Juergen Hoeller opened the request and Alef Arendsen who originally created the diagrams is responsible for the update Alef mentioned progress and plans to commit the changes soon including an updated introduction Rob Harrop requested Rick Evans to follow up suggesting he may need to contact Alef for the original diagram source The task appears to be underway with collaboration among the team members,0,0,0,1,1,0,0
The issue SPR 855 involves improving the documentation for default validation messages in Spring Framework Opened by Alef Arendsen the discussion highlights the need for clearer guidance on using these messages effectively Juergen Hoeller expressed interest in incorporating the improvements by version 1 2 4 The objective is to enhance user understanding and streamline the validation process by providing more comprehensive documentation,0,0,0,1,1,0,0
In the Spring framework s reference documentation an error was identified in the example for before advice section 5 3 2 2 The original example inaccurately described the advice as counting only methods that return normally overlooking the possibility of methods throwing exceptions The suggested correction is to rephrase it to count all method invocations regardless of whether they return normally or throw an exception This issue reported by Vedran Vidovic was acknowledged and fixed by Juergen Hoeller The error affected version 1 1 4 of the documentation,0,0,0,1,1,0,0
In the Spring reference documentation under section 3 15 Setting a bean property or constructor arg from a field value there was an error where FileRetrievingFactoryBean was mistakenly used instead of the correct class name FieldRetrievingFactoryBean This issue was identified by Vedran Vidovic and documented in SPR 780 https jira spring io browse SPR 780 The mistake affected versions 1 1 4 and 1 1 5 of Spring Juergen Hoeller acknowledged the error and confirmed that it was fixed,0,0,0,1,1,0,0
Carlos Sanchez opened a patch request SPR 779 to enhance the iBATIS section with documentation for iBATIS 2 x This patch created using a DocBook editor includes some formatting changes The patch file is attached as orm patch The updated documentation can be viewed here http jroller com page carlossg 20050314 spring and ibatis 2,0,0,0,1,1,0,0
The issue SPR 764 https jira spring io browse SPR 764 redirect false highlights a documentation error regarding the ordering of view resolvers in Spring Not all view resolvers implement the Ordered interface which was incorrectly represented in the documentation This discrepancy was discussed in the Spring forum as noted in the linked post The documentation has since been corrected as per the comments by Alef Arendsen ensuring accurate information about the implementation status of the Ordered interface in view resolvers for version 1 1 5,0,0,0,1,1,0,0
The forum discussion highlights a method for managing resource initialization in a multi threaded environment using Spring s ThreadLocalTargetSource The benefitPayPeriodsResource is costly to initialize and requires consistency across its lifecycle To ensure it is loaded once per thread a targetSource property is used instead of the standard target property The actual target benefitPayPeriodsResourceTarget is configured as non singleton The ProxyFactoryBean is set to not always return the same instance by setting its singleton property to false This configuration means that the init method of the target is invoked only when a method on the proxy interface is first called A test to verify that the same object is returned for a thread will fail because the proxies might differ though the underlying target objects will be the same This approach balances resource efficiency and consistency,0,0,0,1,1,0,0
Russell Healy conducted a thorough proofread of the MVC chapter in the reference documentation for version 1 1 4 and shared the updated version with Juergen The changes were submitted as part of ticket SPR 750 Alef Arendsen acknowledged Russell s contribution and mentioned adding a note of thanks in the preface Juergen Hoeller inquired if Colin could review these changes for the 1 2 RC1 release The proofread aimed to enhance clarity and accuracy in the documentation ensuring it meets quality standards for the upcoming release,0,0,0,1,1,0,0
A typo was identified in the example code of Chapter 15 2 regarding Spring s EJB implementation classes The incorrect line java public class MyComponentEJB implements extends AbstractStatelessSessionBean implements MyComponent should be corrected to java public class MyComponentEJB extends AbstractStatelessSessionBean implements MyComponent Walter So reported this issue under SPR 687 and Juergen Hoeller confirmed the correction,0,0,0,1,1,0,0
The integration of Spring with other web frameworks requires more comprehensive documentation as noted in SPR 685 Alef Arendsen initiated this request to enhance the guidance available for developers working with frameworks like JSF Struts and WebWork A patch by Matt Raible includes updates to webintegration xml detailing integration strategies While the patch provides substantial information especially for JSF and Struts it offers a brief overview for Tapestry and primarily links to external resources for WebWork Additional contributions could expand on WebWork integration if needed enhancing the overall resourcefulness of the documentation,0,0,0,1,1,0,0
The import tag in Spring s XML configuration allows you to modularize your bean definitions by importing other XML files This is particularly useful for organizing large applications by splitting configurations into multiple files To use it simply include the import element with the resource attribute pointing to the desired configuration file This feature was introduced in version 1 1 3 but the documentation wasn t updated promptly for the subsequent release leading to some confusion among users Updating the official documentation will help users understand and implement this feature effectively,0,0,0,1,1,0,0
In Spring s ProxyFactoryBean the order of interceptors specified in the interceptorNames property determines the sequence in which the interceptors are invoked This order is crucial because each interceptor can modify the behavior and outcome of method calls The interceptors are applied in the order they are listed meaning the first interceptor in the list is the first to be invoked Additionally global advisors can also affect this process providing cross cutting concerns that can be applied to multiple beans Understanding this order is essential for configuring the desired behavior of proxies in a Spring application,0,0,0,1,1,0,0
In Chapter 3 circular dependencies in Spring are addressed briefly mentioning that Spring typically detects issues like references to non existent beans and circular dependencies at BeanFactory load time The code snippet from AbstractAutowireCapableBeanFactory createBean illustrates how Spring eagerly caches singletons to resolve circular references triggered by lifecycle interfaces For a deeper understanding further details and suggestions such as those from forum discussions can be helpful The documentation has been updated to include a sidebar in the IoC chapter that explains the issue and offers two potential workarounds or solutions,0,0,0,1,1,0,0
In Spring the concept of inner beans requires clearer documentation as highlighted by Torsten Juergeleit Inner beans are typically anonymous prototypes meaning their singleton flags and names are ignored To fully understand their mechanics one must refer to the DTD Javadoc or the code itself such as the AbstractAutowireCapableBeanFactory resolveValueIfNecessary method This method handles BeanDefinition and BeanDefinitionHolder objects resolving them into anonymous inner beans In response Colin Sampaleanu noted that inner beans were documented in a dedicated paragraph and sample and changes have been made to better structure the documentation Each sub element including inner beans now has its own subsection within the larger section on elements allowed inside property or constructor arg elements,0,0,0,1,1,0,0
In the Spring framework event listeners receive events synchronously meaning the publishEvent method blocks until all listeners complete processing This synchronous behavior ensures that listeners operate within the same thread as the event publisher If a transaction context is active the listener will execute within that context maintaining consistency This detail suggested for inclusion in section 3 11 2 of the documentation underscores the importance of understanding the synchronous nature of event handling in Spring applications The issue identified as SPR 510 was addressed with a patch to improve clarity in the documentation,0,0,0,1,1,0,0
Steven Devijver raised several issues regarding gaps in the Spring framework documentation after attending a workshop Key points include the need for clearer examples of parent child bean definitions particularly referencing JPetStore and clarification on Hibernate s read only transaction optimizations which prevent session flushing Additionally features like LobHandler NativeJdbcExtractor and OpenSessionInViewFilter are not adequately covered The documentation also lacks details on configuring view resolution order and defining views as beans A bug was noted in section 18 2 2 regarding an unset concurrent property Alef Arendsen acknowledged these issues stating some were addressed such as the view resolution order and the concurrent example bug,0,0,0,1,1,0,0
The document patch SPR 441 involves updates to the Spring Framework s validation documentation Key changes include corrections in spelling and formatting The BeanWrapper interface an important concept in the beans package is highlighted for its functionality in setting and getting property values property descriptors and handling nested properties Specific changes include fixing the spelling of functionality and registered Additionally the CustomDateEditor and StringTrimmedEditor are mentioned noting that they are customizable property editors that require user registration The patch emphasizes improvements in documentation clarity and accuracy,0,0,0,1,1,0,0
The issue SPR 402 highlighted a missing entry for alwaysUseFullPath in the documentation for SimpleUrlHandlerMapping within the Spring framework Kaj Hejer initially reported this absence Alef Arendsen confirmed that the documentation was updated to include this detail resolving the issue Juergen Hoeller inquired about the timeline for the fix which was completed before the deadline Kaj Hejer later confirmed that the issue was resolved and thanked the team for updating the reference manual specifically pointing to the Spring documentation PDF,0,0,0,1,1,0,0
The documentation update for the Spring Framework focuses on constructor argument resolution highlighting the use of autowiring by default to match argument types When simple types like value true value are used Spring cannot determine the type without explicit specification The update provides examples such as using the type attribute to specify constructor argument types explicitly For instance constructor arg type int value 7500000 value constructor arg demonstrates this specification Additionally the use of the index attribute to explicitly set constructor argument order is discussed which helps resolve ambiguities when multiple simple values or arguments of the same type are present The update also corrects the terminology replacing autowiring with type matching to better describe the process,0,0,0,1,1,0,0
Tim Nolan proposed an update to the Spring Taglib documentation suggesting an XSL stylesheet and Ant target to transform the spring tld file into an HTML frameset This method keeps documentation current and linked to Javadocs leveraging XSL for consistency and easy updates Nolan s approach allows adding tag comments directly in the XSL enhancing maintainability Alef Arendsen suggested integrating this into the reference manual for detailed examples and maintaining a syntactical overview online Rick Evans added appendices to the manual using Tim s stylesheet which simplified the process He noted the need for Rob Harrop to add detailed descriptions for attributes Nolan expressed concern about moving marked up documentation to the DTD specifically regarding potential tool confusion,0,0,0,1,1,0,0
Upgrading to Dokka 1 4 20 involves addressing dependencies like issue 1293 https github com Kotlin dokka issues 1293 and is part of a larger project 26870 Progress has been made but currently there is a blocker issue 1466 https github com Kotlin dokka issues 1466 Testing with Dokka 1 4 10 revealed limitations in multi module handling needing improvements as discussed here https github com Kotlin dokka issues 1302 issuecomment 698863343 Running gradlew dokkaHtmlMultiModule now works but two issues persist each module requires a README md and the root HTML file is empty These issues will hopefully be resolved in Dokka 1 4 10 The plan is to revisit this in 5 3 RC2 Feedback is requested on whether to use a dedicated gradle docs subprojects gradle file,0,0,0,1,0,0,1
The upgrade to Asciidoctor Gradle plugin 3 x offers enhanced configuration options allowing for improved integration of documentation themes such as those from spring doc resources This version provides better support for customizing documentation builds making it easier to manage and apply styles consistently By leveraging these new features projects can achieve a more streamlined and efficient documentation process ensuring that the output is both visually appealing and aligned with project standards The updated plugin also includes improved compatibility and performance enhancements contributing to a more robust documentation workflow For detailed guidance refer to the official user guide https asciidoctor github io asciidoctor gradle plugin development 3 x user guide,0,0,0,1,0,0,1
In Spring Framework issue SPR 17523 Gabriel Dogaru highlighted the removal of a constructor in ReactorNettyTcpClient that previously allowed initialization with a callback The API change from Reactor Netty 0 7 to 0 8 moved from a mutable builder pattern to an immutable configuration approach This required manual resource management for TcpClient which was inconvenient Rossen Stoyanchev suggested adding a new constructor that accepts a functional interface for configuration allowing dynamic address supply without full resource management An example provided shows using a RoundRobinList for address management in a STOMP broker relay setup The discussion emphasized the need for adapting to version changes and using available community support channels for further questions,0,1,0,0,1,0,0
The issue SPR 16882 highlights a significant performance degradation in Spring Expression Language SPEL after upgrading from version 4 3 9 to 4 3 10 Benchmark tests showed a drop from approximately 580 817 operations per second to 226 748 ops s This decline was traced to changes in how methods were sorted and cached within the ReflectivePropertyAccessor A proposed solution involved caching the sorted method array to improve performance Despite these changes results from version 4 3 18 showed only marginal improvements indicating that further optimization and profiling are necessary Contributors suggested making the ConcurrentHashMap for sorted methods a static variable and recommended additional benchmarking to identify other performance bottlenecks This degradation is a barrier for some users upgrading to Spring 5 necessitating further investigation and testing,0,1,0,0,1,0,0
The issue SPR 15271 opened by St phane Nicoll addresses a problem where Cacheable annotations on interface methods are not reliably detected by AnnotatedElementUtils getAllMergedAnnotations Although a failing unit test was added its effectiveness in reproducing the issue is uncertain A definite reproduction is available in a provided GitHub sample This issue affects version 4 3 4 and is related to other issues concerning annotation lookup and CGLIB proxy behavior specifically regarding cache and transaction annotations on interface methods,0,1,0,0,1,0,0
The issue concerns backward compatibility with Spring versions 4 1 0 and higher where initDefaultStrategies is no longer invoked on subclasses of MessageListenerAdapter This change stemming from commit changes in support of 14515 and 15500 led to breakages in components extending MessageListenerAdapter The method was initially moved to AbstractAdaptableMessageListener and later removed affecting applications upon upgrading The original purpose was to support JMS 1 0 2 which is now obsolete The suggestion is to reintroduce the method in deprecated form to allow affected users time to adapt as removing it was not documented as an intentional change Juergen Hoeller agreed to reintroduce it in version 4 3 6 acknowledging the oversight and emphasizing better practices for subclass constructors,0,1,0,0,1,0,0
The issue SPR 11875 https jira spring io browse SPR 11875 involves a performance regression in Spring 3 2 due to changes in autowiring The update led to a significant slowdown when autowiring objects with many properties jumping from 2 microseconds in Spring 3 1 4 to 400 microseconds in Spring 3 2 0 This was caused by disabling property descriptor caching to fix a memory leak 13596 A proposed solution suggests using ConcurrentReferenceHashMap for caching balancing performance and memory management This issue affects Groovy particularly in Grails as Groovy classes are not cached due to their class loader hierarchy Juergen Hoeller proposed a resolution by aligning caching policies but acknowledged the need for a dedicated solution for Groovy A related pull request 570 was submitted to address this scenario,0,1,0,0,1,0,0
To ensure the latest version of sockjs client is used in AbstractSockJsService update the clientLibraryUrl from the hardcoded 1 0 0 version to https cdn jsdelivr net npm sockjs client 1 dist sockjs min js This change allows the service to utilize the most recent 1 x y version available Testing with a basic sample indicates that the update works as expected maintaining functionality while benefiting from the latest improvements and fixes in the library,0,0,0,0,1,0,1
The Spring Framework team is working on upgrading the ASM library to support JDK 20 and 21 While Spring Framework 6 0 is already using ASM 9 4 which includes early support for JDK 21 the 5 3 x branch is still on ASM 9 3 only supporting up to JDK 19 The plan is to include JDK 20 and 21 support in the upcoming Spring Framework 5 3 26 release An issue has been identified with deploying the Spring Framework 5 3 26 petclinic application on WebLogic with JDK 21 and it is being tracked on GitHub here https github com spring petclinic spring framework petclinic issues 98,0,0,0,0,1,0,1
With the release of R2DBC 0 9 several notable changes have been introduced These include the use of extensible transaction definitions the introduction of io r2dbc Parameter and the deprecation of RowMetadata getColumnNames in favor of RowMetadata getColumnMetadatas Extensible transaction definitions now allow for a more comprehensive transaction setup reducing the need for multiple server roundtrips The io r2dbc Parameter type which facilitates parameter direction specifications in procedures is expected to replace o s r core Parameter in future Spring Framework updates Additionally the shift to RowMetadata getColumnMetadatas entails adapting to a List return type to maintain binary compatibility The Spring Framework is considering aligning with these changes for version 6 0 while maintaining compatibility with R2DBC 0 8 for version 5 3 x The potential adoption of R2DBC 1 0 will further influence these updates as the frameworks aim for comprehensive compatibility and support,0,0,0,0,1,0,1
In Spring Framework 6 0 0 a change in exception handling for JDBC operations was introduced where duplicate key violations now throw a DataIntegrityViolationException instead of a DuplicateKeyException This change affects users upgrading from version 5 3 24 potentially breaking tests that expect the more specific exception The change stems from the use of SQLExceptionSubclassTranslator instead of SQLErrorCodeSQLExceptionTranslator To differentiate between exceptions without relying on specific RDBMS you can introduce a custom sql error codes xml or configure JdbcTemplate to use the old exception translator The Spring team plans to address this in version 6 0 3 updating documentation to better reflect these changes and provide clearer guidance on handling exceptions,0,1,0,0,0,0,0
Upgrading to Jackson 2 9 9 20190727 involves using Jackson s Bill of Materials BOM for better dependency management The BOM ensures that all Jackson modules are aligned in terms of version reducing compatibility issues and simplifying the inclusion of multiple modules This upgrade is crucial for maintaining consistency across different components of a project that rely on Jackson for JSON processing By leveraging the BOM developers can avoid conflicts and streamline their build process ensuring that all parts of the application work seamlessly together,0,0,0,0,1,0,1
To enhance the usability of Traverson s API consider adopting a more fluent interface design similar to WebClient and Project Reactor APIs Instead of configuring everything during construction use an injected Traverson bean to enable a sequential chainable setup This approach allows you to define the URI set media types follow links and specify the desired response type in a streamlined readable manner The proposed design improves flexibility and aligns with modern reactive programming practices enhancing integration and ease of use for developers,0,0,0,0,1,0,1
The upgrade to Spring Framework 5 0 6 RELEASE required a minor adjustment in EncodingUtils due to an unexpected exception change in UriUtils This issue was resolved with a commit to the Spring HATEOAS project The update ensures compatibility and maintains functionality with the new version of the framework addressing any disruptions caused by the exception handling alterations This fix is crucial for developers relying on these utilities within their applications ensuring seamless integration and execution,0,0,0,0,1,0,1
The search feature in the Spring Integration documentation was not functioning for several days affecting users on both Firefox and Chrome in Linux environments This issue was identified and reported by a user highlighting the inconvenience caused The problem has since been resolved with a commit to the project s repository specifically commit 1d906b86df842824d5a8159294efc128c4da78a8 https github com spring projects spring integration commit 1d906b86df842824d5a8159294efc128c4da78a8 which restored the search functionality This fix ensures that users can now effectively search the documentation without issues,0,0,1,1,0,0,0
The MQTT Java DSL example in Spring Integration contains a syntax error due to an unnecessary semicolon in the code This issue is found in the documentation linked to a specific commit The syntax error prevents the code from building successfully when copied and pasted Users are encouraged to contribute a fix via the project s GitHub repository The next milestone release is scheduled soon highlighting the urgency to address this issue,0,0,1,1,0,0,0
In the Spring Integration documentation for configuring a transformer there s a small typo where the Transformer annotation is incorrectly spelled as Transfomer missing an r This could lead to confusion or errors for developers following the guide Correcting such typos is crucial for maintaining clarity and precision in technical documentation which helps ensure that users can implement the examples without encountering unnecessary issues Consistent and accurate documentation also enhances the overall user experience and trust in the framework,0,0,1,1,0,0,0
The issue arises when upgrading from Spring Integration 5 5 16 to 6 0 2 causing a SpelEvaluationException due to the use of args 0 in the Payload annotation within a MessagingGateway Previously this worked but now results in an error because the args variable is missing in the SpEL context The solution is to use Payload args 0 as the root evaluation object has changed to a MethodArgsHolder for better performance This behavior detailed in Spring s documentation emphasizes that while args 0 seemed functional before it wasn t technically correct The documentation and examples should reflect this updated approach,0,0,1,1,0,0,0
The issue arises in Spring Integration 4 3 24 RELEASE where JdbcChannelMessageStore is incorrectly documented as implementing MessageGroupStore In reality it implements PriorityCapableChannelMessageStore which is a ChannelMessageStore and extends BasicMessageGroupStore However BasicMessageGroupStore is not a MessageGroupStore rather MessageGroupStore extends BasicMessageGroupStore This misalignment causes errors when using JdbcChannelMessageStore in a DelayHandler as it cannot be converted to a MessageGroupStore The expected behavior is for JdbcChannelMessageStore to implement MessageGroupStore or for DelayHandler to not require a MessageGroupStore if only basic functionality is used Additionally the documentation should be corrected to reflect the actual class hierarchy,0,0,1,1,0,0,0
The Kdoc for the route functions in KotlinDSL appears to be mistakenly copied from the filter Kdoc leading to incorrect documentation This issue is observed in Spring Integration version 5 5 11 The functions incorrectly describe a filter MyTypeIn variant instead of the intended routing functionality This is a documentation issue rather than a functional bug hence no reproduction steps expected behavior or sample code are applicable If you re able to help consider contributing a fix via the Spring Integration GitHub repository as indicated in their contribution guidelines,0,0,1,1,0,0,0
The task involves updating the reference manual to include gauge micrometer metrics as noted in ticket INT 4439 opened by Gary Russell https jira spring io secure ViewProfile jspa name grussell This update will focus on incorporating metrics related to sources channels and handlers These metrics are essential for monitoring the performance of various components within the system providing insights into their operation and efficiency The addition aims to enhance the documentation making it more comprehensive for users who need to implement and track these metrics effectively,0,0,1,1,0,0,0
In the JavaConfig setup for Spring Integration a custom error channel configuration was found ineffective when using errorChannel error due to the MessagePublishingErrorHandler not having its channelResolver set properly Changing the code to errorChannel error resolves this issue An alternative solution is to use the Spring Integration DSL with PollerSpec which automatically populates the channel resolver However this approach requires using an IntegrationFlow as PollerSpec is not intended for standalone PollerMetadata Despite the effectiveness of DSL the author prefers JavaConfig for its fine grained control and plans to instantiate PollerMetadata directly This issue was logged under INT 4408 and was discussed with contributions from Gary Russell,0,0,1,1,0,0,0
The issue reported in INT 4314 involves the MutableMessageBuilder in Spring Integration where creating a message from another causes both to share the same MessageHeaders object This means modifying the headers of one message inadvertently affects the other The problem arises from the constructor in MutableMessageBuilder that assigns raw headers without creating new ones A proposed fix involves ensuring a new MutableMessageHeaders instance is created This builder was designed for specific performance sensitive use cases and not for general use highlighting the need for clear documentation on its limitations The author is willing to examine other builders for similar issues and contribute fixes,0,0,1,1,0,0,0
In the issue INT 4184 https jira spring io browse INT 4184 Gary Russell identified a missing poller configuration in the S FTP Java configuration documentation for Spring Integration This oversight was highlighted through a discussion on Stack Overflow http stackoverflow com questions 41151569 spring integration sftp example with spring boot 41152537 41152537 The missing poller documentation was crucial for setting up proper polling in SFTP configurations The issue was referenced in a GitHub pull request https github com spring projects spring integration pull 2002 aiming to update the documentation and provide clear guidance on implementing pollers in Java based SFTP configurations This fix ensures users have the necessary information to configure their integrations correctly,0,0,1,1,0,0,0
The DefaultXmlPayloadConverter in Spring Integration is supposed to handle various payload types like Node Document Source File and String according to the documentation However it currently only supports DOMSource not all Source implementations such as StreamSource This issue arose when an outbound HTTP gateway using expected response type javax xml transform Source received a StreamSource response from SourceHttpMessageConverter causing runtime failures The workaround is to use expected response type javax xml transform dom DOMSource but this limitation seems unnecessary The suggestion is to enhance the converter to support more types as it is widely used and this change could be non breaking improving flexibility in future releases,0,0,1,1,0,0,0
In the Spring Integration 4 3 0 reference manual it s suggested to customize FTPClient changeWorkingDirectory by extending DefaultFtpSessionFactory and implementing postProcessClientBeforeConnect However Simon Wong noted that the correct method should be postProcessClientAfterConnect This issue affecting version 4 3 GA was addressed and resolved by Artem Bilan with a specific commit to the project repository,0,0,1,1,0,0,0
In the JIRA issue INT 4011 https jira spring io browse INT 4011 redirect false Manuel Jordan identifies a typo in the Spring Integration documentation The error appears in the XML configuration snippet for message channels Specifically the int queue element in the queueChannel incorrectly references a non existent store instead of the correct channelStore Artem Bilan initially disagrees but later acknowledges the mistake agreeing that it should be fixed The correct configuration should use channelStore for the queueChannel The discussion clarifies that the error pertains to the Queue not the Priority channel and the JIRA title is updated accordingly The resolution involves creating a pull request to correct the documentation,0,0,1,1,0,0,0
In the Spring Integration documentation for QueueChannel Configuration an error was identified regarding the naming of the persistent store The documentation incorrectly refers to JdbcMessageStore instead of the correct JdbcChannelMessageStore This discrepancy was noted in the context of configuring a persistent queue channel using XML where JdbcChannelMessageStore is correctly used in the example Manuel Jordan reported the issue on the Spring issue tracker and Artem Bilan acknowledged the mistake humorously pointing out that Manuel made the same error in his initial report They agreed that the documentation should reflect the correct term and Manuel was encouraged to submit a pull request to address this oversight,0,0,1,1,0,0,0
The issue INT 3996 opened by Manuel Jordan highlights that the HsqlChannelMessageStoreQueryProvider is missing from the list of implementations in the JdbcChannelMessageStore class s setChannelMessageStoreQueryProvider method This omission is in the documentation for the ChannelMessageStoreQueryProvider interface Manuel also suggests creating a JIRA request for a new implementation called H2ChannelMessageStoreQueryProvider Gary Russell responds encouraging the creation of a JIRA request for this and welcoming contributions Manuel confirms opening a request and expresses willingness to contribute This exchange underscores the collaborative nature of open source development and the importance of comprehensive documentation,0,0,1,1,0,0,0
J r mie Rabusseau reported a documentation error in the Spring Integration project The issue involved a spelling mistake where fixed delay should be corrected to fixedDelay Screenshots were attached to illustrate the error Artem Bilan responded thanking J r mie for the report and suggesting that contributions are welcome even for simple fixes He encouraged J r mie to sign the Contributor License Agreement CLA and submit a Pull Request for review Artem also offered to fix the error if J r mie preferred,0,0,1,1,0,0,0
The issue INT 3950 highlights a documentation error in the 6 4 4 Configuring an Aggregator section which incorrectly references a non existent method MessageGroupStore expireMessageGroup groupId in version 4 2 4 of Spring Integration This method was suggested as an alternative way to expire MessageGroup s aside from using a MessageGroupStoreReaper However the functionality does not exist indicating a documentation bug as confirmed by Artem Bilan The error originated from a specific commit and the documentation has been corrected in backported versions 4 1 9 4 0 9 and 3 0 9,0,0,1,1,0,0,0
The issue described involves memory growth when using a Spring Integration Aggregator with SimpleMessageStore attributed to an increasing number of HashMap Node instances upon rapid message submission as evidenced by a heap dump The problem doesn t occur with slower submission rates The root cause is not a memory leak in SimpleMessageStore but an unbounded task executor queue leading to excessive task accumulation The system uses a single threaded task executor which fails to handle the high submission rate To achieve multi threading messages should be sent from different groups concurrently adjusting pool and queue sizes and setting an appropriate rejection policy The problem arises when using a dispatcher for the input channel with LinkedBlockingQueue contributing to memory issues Removing the dispatcher avoids this but was initially added to prevent deadlocks during message creation The solution involves proper configuration of channels and executors to improve documentation on handling multi threading in such scenarios,0,0,1,1,0,0,0
The issue INT 3927 opened by Artem Bilan highlights the need for improved documentation and JavaDocs for the IntegrationComponentScan in the Spring Integration framework This enhancement aims to provide clearer guidance and more detailed explanations for developers using this annotation ensuring they understand its functionality and implementation The request stems from a pull request linked to the broader Spring Integration project emphasizing the importance of comprehensive documentation to facilitate better usage and integration of components within the Spring ecosystem The improvement is expected to aid developers in efficiently utilizing the feature ultimately enhancing overall productivity and integration capabilities,0,0,1,1,0,0,0
The issue INT 3851 was raised by Martin Schr der regarding the documentation for int amqp outbound gateway in section 11 6 where the attribute reply channel is mistakenly repeated with footnotes 7 and 8 This error affects version 4 2 GA of the documentation The problem was acknowledged by Gary Russell and the documentation has been backported to version 4 1 7 to address the issue The original reference can be found in the Spring Integration documentation for version 4 2 1 BUILD SNAPSHOT,0,0,1,1,0,0,0
In the Spring Integration project Aleksandar Stoisavljevic encountered an issue while attempting to define a Global Interceptor using XML configuration The int channel interceptor element was not recognized leading to XML validation errors in Eclipse This was due to the schema location in the XML pointing to a version less schema URL which is outdated at version 1 0 3 Gary Russell clarified that Spring resolves schemas from the jar file rather than the internet URL at runtime He advised using a versioned schema such as spring integration 4 2 xsd for reference The version less schema remains unchanged to prevent breaking applications using it An open JIRA issue 6431 aims to improve documentation to prevent such confusion but this specific issue was closed as won t fix,0,0,1,1,0,0,0
In the documentation for Spring Integration a typo was reported by Reuben Thomas regarding a broken link markup The text mistakenly displays a URL instead of a properly formatted link for Polling Consumers affecting readability Artem Bilan acknowledged the issue and confirmed that it would be addressed promptly The reference URL for the problematic section is in the Spring Integration messaging endpoints chapter,0,0,1,1,0,0,0
The SimpleIncrementingIdGenerator is not thread safe raising concerns about potential non unique IDs when used in concurrent environments The issue arises from the way threads handle the increment of bottomBits and topBits When bottomBits rolls over to zero it increments topBits potentially causing duplicate UUIDs Although the likelihood of generating a duplicate is extremely low especially in systems not reaching 2 63 1 messages it s recommended to use a different generator if uniqueness is critical The developers suggest adding a JavaDoc note to clarify this behavior and recommend time based generators for better uniqueness guarantees,0,0,1,1,0,0,0
In the Spring Integration documentation inconsistencies in XML namespace prefixes have caused confusion The documentation primarily uses the int xml prefix but sometimes switches to si xml without explanation This inconsistency is particularly evident in examples like si xml xpath expression and int xml xpath router Such discrepancies can perplex newcomers Gary Russell acknowledged the issue noting that the documentation was derived from a sample app using the si xml prefix The prefix can technically be customized but for clarity the documentation should maintain consistency This issue affects versions 4 2 M2 and 4 1 6 and efforts are underway to correct it through backporting and updates,0,0,1,1,0,0,0
The issue in the documentation for 7 1 4 Namespace Support AOP Advice chains involves an incorrect example where both transactional and advice chain are used together despite the XSD specifying they are mutually exclusive Andy Harris identified this problem noting that the example is misleading and needs correction The issue affects versions 2 2 6 3 0 6 4 0 6 and 4 1 1 A pull request was referenced for fixing this error and updates have been backported to version 4 0 7 Gary Russell commented that versions 4 1 3 and 4 0 7 are now available with changes merged and cherry picked by Artem Bilan,0,0,1,1,0,0,0
In the documentation for Spring Integration there was an issue with references to channelIdentifierMap which needed correction This issue tracked under INT 3590 was addressed by Gary Russell It affected versions 4 0 6 and 4 1 1 with backports and fixes applied in versions 4 0 7 and 4 1 3 The problem was highlighted in a Stack Overflow post and linked to a pull request on GitHub The necessary changes were cherry picked to the 4 0 x branch to ensure consistency across versions,0,0,1,1,0,0,0
The task involves updating the Spring Integration documentation to reflect changes in the location of constants like MessageHeaders CORRELATION ID which have been moved to IntegrationMessageHeaderAccessor in version 4 0 All references in the documentation need to be corrected accordingly Additionally section 4 1 2 should include examples demonstrating how to access standard headers using the new accessor This update ensures accuracy and clarity in the documentation facilitating easier access and understanding for developers The related changes have been implemented and merged as referenced in a pull request,0,0,1,1,0,0,0
In the issue INT 3224 https jira spring io browse INT 3224 redirect false Vasyl Tretiakov identified an invalid XML configuration for a database backed channel in Spring Integration The mistake involved not closing the int channel element properly The incorrect configuration nested int channel elements without closure causing errors The corrected XML properly closes the int channel element ensuring proper nesting and functionality This issue affected version 2 2 6 The fix was merged by Gary Russell with contributions from Artem Bilan The resolution is documented in the Spring Integration repository,0,0,1,1,0,0,0
The issue INT 3220 on Jira opened by Gary Russell addresses a broken link in a Twitter chapter pointing to an outdated Twitter API page Artem Bilan commented on the resolution noting that Gary Russell merged the fix The pull request for this change is available at PR 998 https github com spring projects spring integration pull 998 on GitHub,0,0,1,1,0,0,0
The XSD file at the provided URL for Spring Integration is outdated and lacks features introduced in version 2 1 such as the logger name attribute Despite this Spring Integration doesn t rely on internet hosted schemas during runtime The version less schema remains at 1 0 to maintain compatibility with older applications While there are plans to potentially update this in the future the current approach involves mapping the version less schema to the appropriate versioned schema found in the parent directory on the classpath This ensures that applications use the correct schema version without breaking existing implementations,0,0,1,1,0,0,0
The issue INT 2959 opened by Gary Russell highlights a discrepancy in the schema documentation for a gateway timeout in Spring Integration The documentation incorrectly states that an exception is thrown when a timeout occurs while the actual behavior is that it returns null The attributes reply timeout and default reply timeout specify the waiting period for a reply before an exception should be thrown defaulting to wait indefinitely This affects versions 3 0 M1 2 1 5 and 2 2 2 and is linked to another documentation issue 4509 Backports and pull requests were made to address this in versions 2 1 6 2 1 x 2 2 x and the master branch which were subsequently merged by Gunnar Hillert,0,0,1,1,0,0,0
The issue INT 2901 opened by Gary Russell highlights a discrepancy in the documentation where mail header enricher attributes are shown as elements reflecting a change made in version 2 0 This affects version 2 2 GA and the documentation needs updating to correctly display these as child elements The issue supersedes a related documentation error 5935 concerning the mail header enricher For more information the reference URL provides feedback and discussions on the manual s previous version,0,0,1,1,0,0,0
Gunnar Hillert opened issue INT 2841 to address broken links in the reference documentation for version 2 2 RC3 of Spring Integration A pull request has been submitted to resolve these issues You can view the pull request here https github com SpringSource spring integration pull 688,0,0,1,1,0,0,0
The issue INT 2832 https jira spring io browse INT 2832 was opened by Diego Bravo regarding the lack of documentation for the aggregator s expire groups upon completion attribute although it is mentioned in the migration guide Additionally the concept of marked unmarked messages which no longer exists is still present in the reference guide This affects version 2 1 4 and has been backported to version 2 1 5 Gary Russell commented on the issue and a pull request addressing it is available here https github com SpringSource spring integration pull 683,0,0,1,1,0,0,0
In sections 16 6 and 16 7 3 of the documentation a typo was identified where ip connnection id should be corrected to ip connection id This error caused configuration issues for users The typo affects version 2 1 3 and related documentation updates are linked to issue 6850 which aims to document IP Message Headers in both Reference and API docs A pull request has been submitted to address this correction Notably from version 2 2 x onwards the term is updated to ip connectionId,0,0,1,1,0,0,0
The reference documentation for Chapter 19 9 JMS Samples incorrectly points to an outdated Git repository It needs updating to reflect the current repository address Additionally the chapter could benefit from structural and content improvements as it inaccurately describes the repository as new when it is actually the old one This issue affects version 2 1 3 A pull request has been issued to address these changes PR 574 on GitHub https github com SpringSource spring integration pull 574,0,0,1,1,0,0,0
The Spring Integration Javadoc for version 2 1 3 incorrectly lists the field queryParameters in the EvaluationContext for header and payload expressions The correct field name should be requestParams Joe McCall identified this issue and a pull request was made to address it Gary Russell confirmed the merge and noted the need to update reference documentation highlighting that pathVariables is mentioned in code but not explained and requestParams is missing altogether The issue and its resolution emphasize the importance of accurate documentation for developers utilizing these fields Further details and examples can be found in the provided links,0,0,1,1,0,0,0
In the JIRA issue INT 2641 Gary Russell highlighted Javadoc warnings caused by links to the private class DelayedMessageWrapper creating build log warnings Artem Bilan suggested addressing additional Javadoc warnings such as incorrect param arguments and malformed link tags in various Java files Bilan proposed fixing these errors in the same issue to avoid a minimal pull request Gary Russell agreed with this approach and a pull request was issued to address the warnings comprehensively,0,0,1,1,0,0,0
A typo was identified in the message history element of the Spring Integration project The issue logged as INT 2616 by Gary Russell involved correcting hostory to history This affected version 2 2 M2 Gunnar Hillert issued a pull request to address the typo which was subsequently merged resolving the problem,0,0,1,1,0,0,0
The issue INT 2596 opened by Marrache Mickael highlights a problem in the Spring documentation where the XML snippet for int jmx mbean exporter is outdated because this type doesn t exist in XSD v2 1 It has been renamed to int jmx mbean export This affects version 2 1 GA as noted in the documentation section 8 1 6 Gunnar Hillert commented on the necessity to update the documentation to reflect this change convert tabs to spaces fix code listings that exceed margins correct spelling errors and improve the overall consistency and layout A pull request was issued and subsequently merged to address these issues,0,0,1,1,0,0,0
The issue INT 2532 involves an anomaly with AMQP endpoint configuration specifically when using the listener container attribute on inbound endpoints The problem arises because the container must be configured using bean syntax When using rabbit listener container attributes like queue names are specified on the listener element However the endpoint rejects being injected with a container that already has a listener and rejects attributes like queue names if an external container is provided There s a suggestion to document this behavior in the schema or to replace the configured listener with the endpoint similar to JMS endpoints A pull request has been issued to address this issue,0,0,1,1,0,0,0
In the issue INT 2473 Gary Russell discusses a potential bug or documentation issue in Spring Integration s XSLT transformer When using the result transformer attribute it appears to only apply if the result type is also specified or if alwaysUseResultFactory is set to true This behavior results in either a String or Document payload depending on these settings The JavaDocs seem to indicate this is the intended functionality suggesting the discrepancy might be a documentation oversight Gunnar Hillert later comments that the reference documentation has been significantly updated to address these concerns as seen in a pull request on GitHub,0,0,1,1,0,0,0
The issue reported in INT 2468 involves problems with rendering ulink elements in PDFs generated from DocBook When ulink is within a listitem the footnote indicator appears but the footnote itself does not render This affects links added post 2 1 GA and other sections like tip and note Upgrading the DocBook Reference plugin dependency from version 0 1 2 SNAPSHOT to 0 1 3 resolves some issues by rendering links as blue hyperlinks instead of footnotes However further changes in the DocBook Reference Plugin such as updating the FOP dependency and modifying the XSL templates are needed for proper rendering These changes ensure compatibility with future FOP updates and correct alignment of long URLs A pull request has been issued to integrate these fixes and it is noted that the current FOP version in use is 0 95 1 while some issues may resolve with version 1 0,0,0,1,1,0,0,0
In the Spring Integration project a user encountered issues with adding a content type header to messages using an outbound AMQP channel adapter The problem arose because the DefaultAmqpHeaderMapper requires headers to have an amqp prefix to be automatically copied The user suggested updating the documentation to reflect this requirement or improving how standard AMQP headers are handled A configuration snippet was shared showing how to correctly add headers with the necessary prefix Gary Russell recommended using a SpEL expression as an alternative although it can be verbose Gunnar Hillert proposed creating a dedicated chapter for AMQP headers listing all automatically mapped ones and issued a pull request for documentation updates Mark Fisher suggested an amqp header enricher element to simplify adding common AMQP headers similar to existing elements for mail and JMS,0,0,1,1,0,0,0
In Chapter 7 1 3 of the documentation there s an incorrect Java configuration example for a polling consumer The sample code mistakenly includes a method call consumer setTransactionManager txManager which doesn t exist in org springframework integration endpoint PollingConsumer This issue affecting version 2 1 GA prompted Gunnar Hillert to open a ticket and submit a pull request to address the documentation error The problem is linked to a broader effort to improve the Polling Consumer documentation,0,0,1,1,0,0,0
The issue INT 2441 opened by Andrew C Oliver addresses a broken link in the HTTP documentation for Spring Integration In section 15 2 of the reference documentation a placeholder is used instead of a proper link leading to an empty anchor This affects version 2 1 GA Gunnar Hillert commented on the issue referencing a pull request aimed at resolving the problem The pull request can be found at SpringSource GitHub PR 517 https github com SpringSource spring integration pull 517,0,0,1,1,0,0,0
The issue INT 2403 was opened by Victor Romero highlighting an incorrect URL in the Spring Integration documentation The link incorrectly directed users to https github com spring integration samples basic amqp instead of the correct URL https github com SpringSource spring integration samples This affected version 2 1 GA Gunnar Hillert responded by issuing a pull request to resolve the issue which can be found at https github com SpringSource spring integration pull 320,0,0,1,1,0,0,0
A documentation issue in Spring Integration s 2 1 0 release was identified by Shane Rowatt highlighting that the example for declaring a Spring Integration namespace with an explicit version lacked the actual version number in the XML schema declaration This omission was due to a previous mass update by Gary Russell that removed all versioned schemas from the documentation The issue was tracked under INT 2402 https jira spring io browse INT 2402 and addressed with a pull request on GitHub aiming to correct the missing version information in the example,0,0,1,1,0,0,0
Gunnar Hillert opened issue INT 2205 to correct the documentation for the Claim Check pattern concerning the remove message attribute The change involved updating the guidance from setting the remove message attribute to false to true when multiple claims are not expected This adjustment affects version 2 1 M3 of Spring Integration The related discussion can be found on the SpringSource forum and a pull request has been issued to address this documentation change Additionally there s a linked issue to allow setting the remove message attribute within a chain,0,0,1,1,0,0,0
The issue INT 2043 raised by Manuel Jordan highlighted the absence of the Filter reference in the Spring Integration documentation particularly in the B 5 Annotation Support section The documentation lacked both theoretical and code snippet mentions of Filter affecting version 2 0 5 Gunnar Hillert addressed this by adding the Filter annotation to the appendix and updating section 5 2 2 on configuring filters Additionally some documentation cleanup was performed A pull request was issued and subsequently closed to incorporate these changes into the documentation,0,0,1,1,0,0,0
The issue INT 1984 https jira spring io browse INT 1984 was opened by Manuel Jordan regarding errors in the documentation about channel names for the Converter The error affects version 2 0 5 and is discussed in a forum post linked in the ticket Gunnar Hillert acknowledged the problem and fixed the documentation Oleg Zhurakousky assigned the issue to Gunnar noting that there might be a duplicate JIRA related to this problem and suggested linking and resolving duplicates This issue is also linked to another issue 5961 about standardizing namespace prefixes in documentation,0,0,1,1,0,0,0
The issue INT 1980 https jira spring io browse INT 1980 redirect false was opened by M Jafari https jira spring io secure ViewProfile jspa name mjafari highlighting the lack of documentation for the pub sub domain attribute in Spring Integration This Boolean attribute part of the int jms message driven channel adapter is used to specify whether the destination is a queue or a topic However there is no schema documentation or detailed description available in the official Spring Integration documentation This issue affects version 2 0 4 and has been discussed on the SpringSource forum http forum springsource org showthread php 111862 Lack in documentation about quot pub sub domain quot attribute,0,0,1,1,0,0,0
An error was reported in the Spring Integration documentation specifically in the section 24 2 Transforming XML payloads It mistakenly references Jaxb1Marshaller instead of the correct Jaxb2Marshaller This issue identified in version 2 0 4 highlights the need to update the documentation to reflect the use of Jaxb2Marshaller The error was discussed in further detail on the SpringSource forum,0,0,1,1,0,0,0
In Appendix B 3 of the reference guide there s a need to update and clarify information regarding the TaskScheduler The section erroneously references a non existent class SimpleTaskScheduler Instead it should explain the default TaskScheduler used in Spring Integration as this information is missing from the Scheduling chapter of the Spring Framework reference Additionally section 7 4 2 mentions that the default TaskScheduler is a ThreadPoolTaskScheduler with a pool size of 1 but code indicates a default pool size of 10 This discrepancy arises unless the task executor taskScheduler is explicitly set in the poller tag which otherwise defaults to synchronous behavior The actual configuration found in DefaultConfiguringBeanFactoryPostProcessor java sets up a ThreadPoolTaskScheduler with a pool size of 10 and specific properties It s important to update the documentation to reflect these details accurately,0,0,1,1,0,0,0
In Section 22 4 of the documentation on Twitter Inbound Adapters it is noted that these adapters require the use of a MetadataStore instance The provided example demonstrates using a persistent store with the following configuration xml bean class org springframework integration store PropertiesPersistingMetadataStore However this setup is incomplete because the bean must specifically be named metadataStore aligning with org springframework integration context IntegrationContextUtils METADATA STORE BEAN NAME Therefore the correct configuration should be xml bean id metadataStore class org springframework integration store PropertiesPersistingMetadataStore This adjustment ensures proper integration and functionality of the inbound Twitter adapters,0,0,1,1,0,0,0
The issue INT 1946 highlights an error in the Spring Integration documentation regarding the mail header enricher Initially the documentation incorrectly showed configuration using attributes which is outdated As of version 2 0 4 the mail header enricher should be configured using sub elements The correct configuration involves specifying headers like subject to cc etc within sub elements rather than as attributes This change aligns with the updated framework requirements as attributes are no longer valid for defining standard headers The documentation needs updating to reflect this change as noted in related issues 4719 and 6842 which discuss the rationale and necessity for this documentation update,0,0,1,1,0,0,0
In the reported issue the release strategy expression in the documentation was incorrect leading to a malfunction in a Spring Integration aggregator The configuration used a SpEL expression release strategy expression payload size eq 2 which caused exceptions because the framework expected a list of messages not a single payload By replacing the SpEL with equivalent Java code the problem was resolved The correct SpEL should evaluate this size eq 2 to account for the list of messages This indicates a documentation bug which was acknowledged and fixed Despite initial exceptions once SpEL was corrected to evaluate the group size the aggregator functioned as intended,0,0,1,1,0,0,0
In the Spring Integration Reference Manual a discrepancy was identified in the 5 1 1 Router Implementations chapter A sample configuration for a recipient list router using a SpEL expression was found to be incorrect The issue was that the MessageHeaders class doesn t have a contains method instead it should use containsKey or containsValue This problem was noted in version 2 0 and has been fixed in version 2 0 4 The correction ensures that the sample code aligns with the actual API functionality,0,0,1,1,0,0,0
In section 24 7 there s a typo Xpathe should be corrected to XPath The example provided mixes SpEL and XPath expressions Specifically in the expression xpath expression id testExpression expression person age 2 the symbol denotes an attribute of the person element not a bean This clarification is important for accurate implementation and understanding of the example The issue affects version 2 0 3,0,0,1,1,0,0,0
The issue INT 1732 addresses a discrepancy in the Spring Integration documentation regarding Transformers The documentation suggests that if a Transformer returns a Map and the original message payload wasn t a Map the Map entries should be added to the message headers However in practice the Map becomes the new payload The suggested workaround is to use a header enricher instead of relying on this undocumented feature This change in behavior since version 1 0 x has caused issues prompting the need for documentation updates and inclusion in the migration guide The teamThe issue INT 1732 highlights a discrepancy in the Spring Integration documentation regarding the behavior of the Transformer The documentation suggests that if a Transformer returns a Map and the original message payload was not a Map the Map s entries should become message headers However in practice the returned Map is used as the new payload instead The suggestion is to update the documentation to reflect this behavior as the desired functionality can be achieved using a header enricher Comments from users indicate this change has caused confusion during migration from version 1 0 x to 2 0 x The Spring team acknowledged the issue and updated both the documentation and the migration guide to clarify the correct usage,0,0,1,1,0,0,0
The issue discussed in the Spring Integration JIRA involves the MessageTransformingHandler not behaving as a filter when it returns null contrary to the manual s description The handler demands a reply which causes exceptions if a null is returned This behavior can be problematic for users expecting it to act like a filter A proposed solution is to add a requires reply attribute to the transformer element allowing users to disable this requirement aligning the behavior with user expectations Workarounds include using a Filter or Router post transformation or employing a Service Activator that handles null returns without exceptions The debate revolves around maintaining single responsibility principles where a Filter should handle conditional logic and the Transformer should only manage valid transformations The discussion suggests updating the documentation and possibly moving the conversation to community forums for broader input,0,0,1,1,0,0,0
The issue INT 1725 opened by Manuel Jordan highlights an error in the Spring Integration documentation regarding the MessageGroupStore interface The documentation incorrectly lists only two methods registerMessageGroupExpiryCallback and expireMessageGroups However the actual API includes more methods as seen in the official documentation The error affects version 2 0 1 Oleg Zhurakousky later commented that the reference has been updated to correctly reflect the complete set of methods available in the MessageGroupStore interface,0,0,1,1,0,0,0
The SequenceSizeCompletionStrategy class mentioned in both the API 1 0 x and the Spring Integration Reference Manual 2 0 1 RELEASE was initially described as an annotation used for release strategies in aggregators However it was not found in the Spring Integration 2 0 1 RELEASE API This discrepancy arose because the class name was changed to SequenceSizeReleaseStrategy The documentation has since been updated to reflect this change,0,0,1,1,0,0,0
Chris Beams opened issue INT 1612 to address discrepancies in the Spring Integration documentation PDF between version 1 0 3 RELEASE and the current build The issues included mis sized tip info icons overly small diagrams inconsistent font sizes and the absence of a SpringSource icon on the first page Additionally there was no syntax highlighting Progress updates indicate that image scaling and colorization issues have been resolved and font consistency has been improved However the SpringSource icon is still missing and syntax highlighting remains black and white though these are not deemed critical,0,0,1,1,0,0,0
The task involves updating the reference documentation to remove mentions of MessageChannelTemplate and introduce the new MessagingTemplate This change is part of issue INT 1468 which was opened by Oleg Zhurakousky The update affects version 2 0 M7 of the project The goal is to ensure that the documentation accurately reflects the transition to MessagingTemplate providing users with clear and updated guidance This initiative is part of the ongoing improvements and enhancements to the messaging framework aligning with the latest developments and user needs,0,0,1,1,0,0,0
The issue INT 1426 opened by Oleg Zhurakousky focuses on the removal of references to the MessageMapping annotation in the Spring Integration framework specifically affecting version 2 0 M7 This change aims to streamline the framework s functionality by eliminating outdated or redundant annotations improving overall efficiency and maintainability The discussion surrounding this issue can be found in the SpringSource forum providing further insights and community feedback on the topic,0,0,1,1,0,0,0
The issue in the multipart http sample project involves an error when importing the org springframework integration http package in the MultipartReceiver java file The error occurs after syncing to the SI trunk and importing projects into the workspace Chris Beams noted the problem and Oleg Zhurakousky provided a solution by adjusting the project settings The fix involves disabling Maven s Workspace Resolution by right clicking the project and selecting the appropriate option This change allows the project to import without errors and there s a suggestion to automate this setting to prevent manual adjustments by the user,0,0,1,1,0,0,0
In the reference documentation for Spring Integration an error was identified in Chapter 2 section 2 4 concerning the MessageBuilder helper class The issue involves a code snippet on message priority where the second assertEquals statement incorrectly asserts MessagePriority HIGHEST instead of MessagePriority LOW The correct assertion should reflect that setHeaderIfAbsent does not override existing header values maintaining the original priority unless explicitly set otherwise Additionally the document footer mistakenly references Spring WS 2 0 0 M6 instead of Spring Integration The suggested documentation update clarifies that setHeaderIfAbsent is a non destructive method aligning with the example s intention to demonstrate non destructive header setting,0,0,1,1,0,0,0
The issue INT 1164 https jira spring io browse INT 1164 redirect false opened by Iwein Fuld addresses the lack of documentation for the expression attribute on the filter element in section 8 2 of a particular version 2 0 M4 The concern was noted and subsequently resolved as indicated by the comment done This suggests that the necessary documentation or updates were completed to address the initial problem,0,0,1,1,0,0,0
The issue INT 1137 highlights a lack of detailed documentation regarding the filename pattern attribute in a Spring framework component The main concern is the unclear behavior of the AcceptOnceFileListFilter being automatically added when this attribute is used unlike when a filter is explicitly specified This discrepancy could lead to confusion for developers who may not realize the automatic inclusion of the filter The problem affects version 2 0 M3 as noted by Iwein Fuld who later commented that the documentation has been updated to align with the expected behavior,0,0,1,1,0,0,0
The Maven build issue for the cafe and helloworld projects was due to the app context XML files not being correctly moved to the target JAR This happened because the effective POM wasn t sourcing XML files properly it was pulling from src main java instead of basedir src main java As a result while the projects built successfully the main methods couldn t run due to missing app contexts in the JAR The problem stemmed from each project having its own resources element in the POM which ignored the parent configuration The fix involved adding basedir src main java to the resources in both project specific POMs ensuring all XML files are included,0,0,1,1,0,0,0
The issue INT 802 was opened by Joe Witt regarding the filecopy samples in a spring integration project where errors occurred due to unresolved URIs because necessary directories did not exist The suggestion was to either provide instructions for directory creation or automate this process within the application Additionally there was a problem with the FileCopyDemoCommon displayDirectories class as it showed paths unrelated to the context configuration making it unhelpful Joe also noted an issue with path construction using double slashes Ken Yu provided a fix and Mark Fisher confirmed that adding a file prefix to resource paths resolved the sample issue The display wording was updated and further work was needed to show the directory property of the adapter leading to the creation of a new issue The primary issue was resolved for the 2 0 M1 release,0,0,1,1,0,0,0
The issue INT 747 was opened by Saravanakumaar Jeyabalan regarding the Sample Cafe application When running the CafeDemo in Eclipse the control fails to exit the main method This affects version 1 0 2 SR1 More details can be found in the related forum thread,0,0,1,1,0,0,0
In the Spring Integration documentation a user reported an incorrect reference to org springframework integration endpoint SubscribingConsumerEndpoint which does not exist in the API documentation This reference is found in the XML section Mark Fisher responded clarifying that the correct class name is EventDrivenConsumer and stated that all instances should be updated accordingly This issue affects version 1 0 3 of the documentation,0,0,1,1,0,0,0
In the issue INT 715 James Law reported that to use the DefaultFileNameGenerator for naming files based on message headers the specific header springintegration file name had to be used which wasn t clearly documented This affected version 1 0 2 SR1 In response Mark Fisher acknowledged the lack of clarity and updated the documentation Additionally support for custom header names was added addressing the need for flexibility in file naming as referenced in a related issue 4726,0,0,1,1,0,0,0
The reference manual for version 1 0 2 SR1 of the project requires several corrections In Section 4 4 Message Bus is mentioned incorrectly while Section 3 2 mistakenly refers to MessageConsumer instead of MessageHandler in multiple instances Section 10 2 is currently empty and needs content and Section 10 3 has an incomplete sentence Using this approach allows to focus on the Additionally in Section 11 5 the second CompletionStrategy should be corrected to CorrelationStrategy In Section 18 2 the phrase Both gateways implement MessageEndpoint to they should be revised to Both gateways implement MessageEndpoint so they These edits aim to improve clarity and accuracy in the documentation,0,0,1,1,0,0,0
In the XPath components namespace support section of the documentation there was a typographic error where the tag si xml xpath selector was incorrectly used to close other tags like splitter and router This was identified as a copy paste mistake by Dan Paquette in the issue INT 618 Mark Fisher acknowledged the error and confirmed that it has been rectified for the 1 0 2 documentation release,0,0,1,1,0,0,0
The issue INT 561 addresses the need to update the Spring Integration documentation for the 16 3 Writing files section Currently it incorrectly specifies that the output directory path for the outbound channel adapter element should use directory file input directory property It should be directory input directory property because FileWritingMessageHandler does not use URI based paths Additionally there s a suggestion to clarify that the charset cannot be set directly from the outbound channel adapter element instead the file encoding property should be used Furthermore a comment highlights that FileWritingMessageHandler now uses a Resource for its directory property and if no prefix is provided FileOutboundChannelAdapterParser defaults to file The documentation should reflect this to clarify the underlying use of Resource,0,0,1,1,0,0,0
The issue in the Spring Integration documentation regarding the aggregator was identified by Iwein Fuld who noted an unfinished sentence Optional by default the aggregator This was missing a closing bracket The documentation affected includes versions 1 0 Final and 1 0 1 Iwein Fuld later amended the sentence to clarify that Optional by default the aggregator will use sequence size and correlation id This correction ensures the documentation accurately describes the default behavior of the aggregator feature,0,0,1,1,0,0,0
In the JIRA issue INT 358 Tai Truong reports an endless loop problem caused by the Barista class methods prepareHotDrink and prepareColdDrink which resend messages to the same channel This occurs due to the MessageHeaders NEXT TARGET being copied into reply messages by the MessageBuilder leading to repeated routing A suggested solution is to modify MessageBuilder isEligibleForCopying to exclude copying NEXT TARGET Mark Fisher comments on possible configurations like using a custom CompletionStrategy or setting send partial result on timeout to true which might help with message aggregation delays He also mentions a larger refactoring that eliminates NEXT TARGET and improves router encapsulation Tai Truong further inquires about alternatives to NEXT TARGET and discusses issues with aggregators not processing due to dropped messages affecting MessageHeaders SEQUENCE NUMBER,0,0,1,1,0,0,0
The regression issue involves the premature publication of NIO TcpConnectionOpenEvent in Spring Integration linked to the addition of connection timeout support This problem arises from a specific commit that modified how connections are managed particularly affecting when events are triggered The premature event publication can lead to incorrect handling of connection states impacting systems relying on accurate event timing for connection establishment This issue is discussed in detail on a Stack Overflow thread where users explore solutions and workarounds to address the unintended behavior Proper synchronization and event handling adjustments are necessary to resolve the regression,0,1,1,0,0,0,0
When upgrading from version 5 1 8 to 5 2 1 of a framework an issue arose with the HTTP inbound gateway leading to NullPointerExceptions NPEs during header function evaluations The problem is linked to the FunctionExpression getValue method which incorrectly handles null root objects by ignoring the EvaluationContext getRootObject The method needs to be revised to consult the context instead The regression was introduced in a specific commit which incorrectly passes null for rootObject against SpEL contract expectations The fix should be applied in the ExpressionEvalMap although FunctionExpression might require refactoring as well A resolution is in progress,0,1,1,0,0,0,0
The issue arises from a NullPointerException in the ExpressionEvaluatingSqlParameterSourceFactory class when doGetValue returns null Previously the code checked if a value was ERROR using if value ERROR which was changed to if value equals ERROR causing a problem if value is null A suggested fix is to add a null check if value null value equals ERROR This problem surfaced after upgrading to spring integration jdbc version 5 2 1 The error occurs when certain properties in the payload are null affecting the flow The user has replicated this issue in a unit test and identified the problematic line in the code A fix is anticipated,0,1,1,0,0,0,0
In Spring Framework 5 2 0 M2 an issue arises when using InvocableHandlerMethod with two GenericHandler implementations If the first handler processes a Map payload the second handler throws a ClassCastException due to the reuse of a cached MapArgumentResolver from the first invocation This problem was not present in version 5 1 6 where the HandlerMethodArgumentResolverComposite did not retain any resolver for the second invocation The issue is demonstrated in a small program where a SampleMapHandler processes a map and a SampleHandler processes a string leading to a failure A fix is planned for release in 5 2 0 M4,0,1,1,0,0,0,0
The TimeoutCountSequenceSizeReleaseStrategy class in Spring Integration has a bug affecting versions from 5 1 1 RELEASE onwards This issue causes the strategy to ignore the specified timeout when handling multiple messages in a MessageGroup The bug was introduced by a code change that defaults to a timeout of Long MAX VALUE if any message s timestamp is null This behavior prevents message release even when the timeout is reached demonstrated by the application s inability to print a message in versions 5 1 1 and later The problematic code involves a method that defaults to Long MAX VALUE if any timestamp is null rather than only when all are null Removing the else block in this method should resolve the issue by correctly identifying the earliest non null timestamp Additionally there are test discrepancies where tests meant for TimeoutCountSequenceSizeReleaseStrategy are actually validating against SequenceSizeReleaseStrategy misleading the results These tests could be adjusted in a future update to align with the correct strategy behavior which currently ignores sequence size headers and relies on a simple threshold and timeout strategy,0,1,1,0,0,0,0
The update addresses an issue in the Spring Cloud Stream where AbstractMessageSource checks for an empty headerExpressions map before evaluating This change ensures that an evaluation context is always created regardless of necessity to prevent potential errors when handling message headers The fix aims to improve reliability and prevent issues linked to message processing by ensuring consistent context evaluation even when header expressions may be absent This approach minimizes errors related to uninitialized contexts during message evaluation processes,0,1,1,0,0,0,0
After upgrading to Spring Boot 2 1 2 and Spring Cloud Stream Greenwich RELEASE a memory leak occurred causing an OutOfMemoryException The issue did not appear when reverting to earlier dependencies The application consumes from 8 Kafka topics and produces to one using the Kafka binder A heap dump analysis revealed that a significant portion of memory is occupied by MicrometerMetricsCaptor MicroTimer objects It is suggested that the lack of equals and hashCode methods might be causing these objects to accumulate unnecessarily The problem seems linked to Spring Integration metrics rather than Spring Cloud Stream directly The issue might be resolved by ensuring proper handling of MicroTimer in the metrics system possibly by adjusting hashcode and equality checks,0,1,1,0,0,0,0
The ClassCastException in version 5 1 2 arises from using PollSkipAdvice with skipPolls causing AbstractPollingEndpoint to expect a Message but receive a Boolean This issue is linked to the line return Boolean FALSE in AbstractPollingEndpoint The problem stems from a change in AbstractPollingEndpoint around four months ago The AbstractMessageSourceAdvice introduced in version 4 2 provides a mechanism to apply advice only to the receive operation potentially offering a solution However there s no out of the box alternative to PollSkipAdvice within the current AbstractMessageSourceAdvice suggesting a need for refactoring This oversight has persisted likely due to the prevalence of more advanced polling mechanisms such as smart polling which has overshadowed the need for PollSkipAdvice,0,1,1,0,0,0,0
The bug report describes a ConcurrentModificationException occurring when two threads execute a method annotated with Publisher after upgrading to Spring Integration 5 1 1 The exception originates in the HashMap computeIfAbsent method suggesting concurrent access issues This problem arises during application startup due to an optimization introduced in a specific commit The reporter suggests using a ConcurrentHashMap to resolve the issue and provides a link to a pull request for the fix They encourage contributions and reference the project s contribution guidelines,0,1,1,0,0,0,0
The initial implementation of the Doc Block Switch plugin for code focuses on enhancing code documentation efficiency It automates the process of toggling comment blocks allowing developers to easily switch between different documentation styles or formats This plugin streamlines workflow by reducing manual editing and ensuring consistency across codebases It s particularly useful in environments where multiple documentation standards are in use or when transitioning between different coding languages The implementation emphasizes ease of integration user friendly interface and compatibility with various code editors making it a versatile tool for developers aiming to maintain clear and organized code documentation,0,0,0,1,1,0,0
To enhance the TCP IP chapter it is recommended to include documentation on the Java DSL for TCP channel adapters This should cover the Tcp Server Client factories providing clear guidance similar to the existing sections on UDP channel adapters Currently the documentation contains references to Java and Annotations configuration but lacks specific details on the TCP Java DSL factories making it challenging for users to discover and utilize them effectively Including these updates would align the TCP documentation with the comprehensive information available for UDP improving clarity and usability for developers working with TCP configurations,0,0,0,1,1,0,0
In Spring Integration version 5 4 2 a breaking change occurred with the introduction of the toMessageBuilder String topic MqttMessage mqttMessage function which affected message conversion when migrating from Spring Boot 2 2 9 to 2 4 1 This change caused the custom converter to be ignored resulting in a ClassCastException as the handler received raw messages To resolve this the converter should return an AbstractIntegrationMessageBuilder instead of a Message The suggested implementation for the toMessageBuilder method involves using MutableMessageBuilder fromMessage toMessage topic mqttMessage This change was not documented in the migration guide but future updates may include it as a default implementation in version 5 5 with additional documentation to guide users on implementing the MqttMessageConverter,0,0,0,1,1,0,0
To implement SmartLifecycleRoleController in a Spring Integration application you need to define it within your XML configuration This class helps manage the lifecycle of endpoint roles allowing for coordinated startup and shutdown processes First ensure you are using version 5 1 M2 or later as this feature is affected by that version In your XML configuration define a bean for SmartLifecycleRoleController specifying the roles you want to control This setup can help manage complex integration flows by grouping related components under a common lifecycle For more details refer to the Spring Integration documentation particularly the section on endpoint roles You can also check related discussions and code examples in the linked Stack Overflow issue and GitHub pull request,0,0,0,1,1,0,0
The discussion revolves around improving the Pollers factory methods in Spring Integration Java DSL Gary Russell suggests enhancing the API to make it more intuitive and flexible particularly when modifying existing pollers Artem Bilan points out the existing options such as fixedDelay and transactional and suggests defaulting to a PeriodicTrigger if no trigger is specified There s a proposal to deprecate the Pollers factory in favor of PollerSpec to ensure clarity and ease of use The conversation highlights a need for better documentation and possibly adding more methods to Pollers to make ordering less significant as demonstrated in code examples where the order affects functionality The focus is on making the API more user friendly and the documentation clearer,0,0,0,1,1,0,0
The documentation for Spring Integration lacks clear dependency information for adapters like Mail Support causing complexity for new users Vadim Gerassimenko raised this issue suggesting that dependencies should be explicitly stated in the documentation and start spring io should allow selection of adapters in the Spring Integration section Artem Bilan noted that the reference manual chapters lack this information and suggested mentioning Maven artifacts at the beginning of each chapter Gary Russell provided historical context explaining that previously Spring Initializr included additional modules but complaints about unused jars led to a shift towards a core only approach He agreed that documentation improvements are needed but noted that adding all modules as top level choices could be impractical,0,0,0,1,1,0,0
The issue INT 4372 opened by Artem Vilkov highlights the absence of documentation on configuring a delayer using Annotations and Java DSL in Spring Integration This gap was identified in relation to a Stack Overflow question Gary Russell noted that the documentation had been updated in a specific commit providing the necessary details The relevant section can now be found in the official Spring Integration documentation under the messaging endpoints chapter specifically dealing with the delayer namespace,0,0,0,1,1,0,0
The SFTP Adapters documentation for Spring Integration needs an update in the SFTP Outbound Channel Adapter section This update should include a practical example of using the setRemoteDirectoryExpression method The example should demonstrate how to dynamically determine the directory path based on message data such as the payload or headers This enhancement addresses the need for clarity and practical application as discussed in a Stack Overflow thread The issue affects version 4 3 8 and is referenced in a related pull request on GitHub,0,0,0,1,1,0,0
In Spring Integration the reuse of MessageHandler instances has changed since version 4 3 7 Previously it was common to use the ref attribute for custom Service Activator handlers allowing them to be reused in multiple service activator definitions However since issue 7092 MessageHandler instances are now bound directly to a single endpoint and cannot be reused across multiple endpoints This change applies only to MessageHandler instances and not to plain old Java objects POJOs For further details refer to the related Stack Overflow discussion http stackoverflow com questions 42088238 service activator reuse not working 42091517 42091517 and pull request 2070 https github com spring projects spring integration pull 2070,0,0,0,1,1,0,0
The issue INT 4171 opened by Gary Russell addresses the need to support SSL session reuse with FTPS in the Spring Integration project This is crucial for maintaining security and efficiency when establishing data connections to FTPS servers The problem stems from the inability to reuse the same TLS session for data connections which can lead to performance issues and potential security vulnerabilities The discussion references a Stack Overflow question that highlights challenges in maintaining the same TLS session for both control and data connections A related pull request on GitHub aims to implement this feature enhancing the security and performance of FTPS connections in the Spring Integration framework,0,0,0,1,1,0,0
The issue raised by Mauro Molinari in INT 4169 https jira spring io browse INT 4169 highlights a challenge in invoking REST services with dynamic query parameters using Spring Integration s HTTP outbound gateway When dealing with GET requests it s cumbersome to append unknown or multiple query parameters dynamically as the current int http outbound gateway requires predefined URI templates Molinari suggests introducing an append query string parameters expression attribute that evaluates to a MultiValueMap facilitating dynamic parameter appending Artem Bilan responds by suggesting alternatives like using url expression with UriComponentsBuilder which can construct URLs dynamically Bilan also considers enhancing documentation to guide users on building query strings manually The discussion emphasizes the need for a more straightforward method to handle dynamic parameters in GET requests within Spring Integration,0,0,0,1,1,0,0
Gary Russell opened issue INT 4106 to enhance the JPA documentation by adding Java configuration examples addressing the complexity of wiring certain endpoints This initiative aims to simplify the integration of JPA within Spring applications by providing clear practical examples The issue references a Stack Overflow discussion that highlights challenges developers face when configuring JpaOutboundGateway using Java The related pull request on GitHub suggests specific improvements and additions to the Spring Integration project aiming to make JPA integration more accessible and straightforward for developers,0,0,0,1,1,0,0
The IntegrationGraphController in Spring Integration allows accessing the Integration Graph from any web application such as the Spring Flo project which uses JSON representations to visualize the runtime graph To facilitate this Cross Origin Resource Sharing CORS support is necessary to permit trusted domains to access this data Documentation enhancements are suggested to guide users on implementing CORS using existing Spring MVC configurations XML configuration can utilize mvc cors settings while Java configuration involves overriding the addCorsMappings method in a WebMvcConfigurerAdapter This ensures that applications can securely integrate and display the Integration Graph leveraging existing Spring MVC capabilities without requiring new features For further details refer to the Spring Framework Reference Manual on CORS,0,0,0,1,1,0,0
In the discussion regarding improving the reference documentation for the service activator in Spring Integration Manuel Jordan shares his experiences and clarifications needed on handling different scenarios He describes experiments with a class having methods that either return a value or are void linked with QueueChannel or DirectChannel He outlines scenarios where the service activator works as expected returning errors only when there s no output channel for a returning method Jordan questions why an output channel is mandatory for returning methods and suggests clarifying documentation for cases where methods are void Artem Bilan responds explaining that service activator is a request reply component and for non returning methods the process stops without sending anything He suggests using nullChannel for void methods or switching to an outbound channel adapter Bilan emphasizes that service activators require an output unless the method is void and the component s behavior aligns with typical Java method invocation where nothing is returned from void methods,0,0,0,1,1,0,0
The document discusses enhancements to the Spring Integration framework focusing on runtime model representation components like IntegrationGraphServer and EnableIntegrationGraphController These components facilitate the visualization and management of integration flows by providing a graphical representation of the integration components and their interactions The IntegrationGraphServer acts as a backend server that generates and serves the graph data while EnableIntegrationGraphController is an annotation that simplifies the setup and configuration of these graphing capabilities within a Spring application These improvements aim to enhance the developer experience by offering better insights into the runtime behavior of integration processes,0,0,0,1,1,0,0
The WatchServiceDirectoryScanner in the Spring Integration project has been identified to ignore the directory parameter in its listFiles and listEligibleFiles methods Simon Wong suggests documenting this behavior in the JavaDoc or SI reference documentation The current implementation requires setting the directory in the constructor which conflicts with the expected use of the parameter passed to listEligibleFiles Artem Bilan and Gary Russell discuss the need to address this issue suggesting that the fragmentation of related discussions should be avoided and a more unified approach taken They propose potential rework including managing the scanner s lifecycle differently possibly removing it from SmartLifecycle to be managed by the adapter instead Simon Wong emphasizes adherence to the DirectoryScanner interface contract which expects scanning of the directory provided as a method parameter,0,0,0,1,1,0,0
The issue raised by Artem Bilan highlights the need for better documentation on configuring Spring Integration using Java and annotations Users often struggle to find examples and may overlook essential annotations like EnableIntegration in their Configuration classes Bilan suggests dedicating a specific section to EnableIntegration with appropriate links in the contents Additionally he recommends a chapter on various Spring Integration annotations and Java configuration recipes such as configuring ServiceActivator for WebSocketOutboundChannelAdapter or InboundChannelAdapter for JdbcPollingChannelAdapter Including references to target classes from XML configuration can assist users transitioning to Java and annotations The Java DSL and its namespace factories can help bridge some of these gaps,0,0,0,1,1,0,0
In the issue INT 3880 https jira spring io browse INT 3880 a custom file scanner configured for an inbound channel adapter was initially ordering files correctly but they were subsequently reordered by the FileReadingMessageSource scanInputDirectory function This issue arose because freshFiles was added to toBeReceived causing unintended reordering The problem was resolved by injecting a receptionOrderComparator to manage the file order in the queue Documentation on this feature was lacking prompting suggestions for improvement The use of a LinkedHashSet for freshFiles maintains insertion order but additional documentation would help clarify the process,0,0,0,1,1,0,0
The document for INT 3872 addresses the behavior of messaging gateways in Spring Integration when the reply payload is an instance of Throwable In such cases the gateway is designed to rethrow the Throwable back to the caller This behavior necessitates clear documentation in the messaging gateway section to ensure users understand how exceptions are managed and propagated The issue is relevant to version 4 2 1 and further details can be found in the referenced pull request and related discussions on GitHub,0,0,0,1,1,0,0
In the discussion on transaction configuration for non polling inbound adapters gateways Mauro Molinari highlights a gap in Spring Integration s handling of transactions for daemon like process initiators that don t use polling Examples like the int ws inbound gateway and HTTP inbound gateways which receive incoming requests rather than polling lack straightforward transaction initiation mechanisms Mauro suggests two possible solutions inserting a gateway to start a transaction or using AOP advice both of which are not ideal Artem Bilan responds by emphasizing that transactions are typically tied to resources with transaction semantics like JDBC or JMS He points out that while transactions may not be as crucial for web service requests they are essential when downstream components require them Artem agrees to explore a more general solution for transactional wrapping within message flows acknowledging the need for flexibility Mauro appreciates this direction noting that a more unified approach would be beneficial,0,0,0,1,1,0,0
In issue INT 3769 Mauro Molinari highlights challenges with Spring Integration and Spring Web Services WS noting the reliance on deprecated MessageEndpoint implementations which complicates integration Current Spring WS documentation focuses on annotation based configurations leaving gaps for those using traditional bean methods The deprecation of SoapActionEndpointMapping and PayloadRootQNameEndpointMapping poses issues since these are suitable for business oriented service mappings Arjen Poutsma acknowledges that deprecating these classes was a breaking change suggesting their de deprecation for consistency with Spring MVC Artem Bilan argues for maintaining existing adapters emphasizing the simplicity of using annotations like MessagingGateway for endpoint configuration Despite the deprecations there s a call to enhance documentation to guide users in configuring Spring Integration with Spring WS without requiring a shift to annotations Greg Turnquist and others agree on improving documentation rather than reversing deprecations aiming to support users who rely on XML configurations The discussion ultimately seeks a balance between modernizing practices and accommodating existing configurations,0,0,0,1,1,0,0
The Aggregator configuration in Spring Integration lacks several attributes such as discard channel and group timeout For more complex configurations it s recommended to use MethodInvokingMessageGroupProcessor with a Bean setup instead of relying solely on the Aggregator annotation This approach allows for a more powerful configuration without altering existing business logic The use of Spring Integration Java DSL is also suggested to reduce boilerplate code The Aggregator annotation remains useful for simple aggregation functions but for advanced cases direct bean configuration with strategies for correlation and release is preferred Discussions on this topic can be found on Stack Overflow and GitHub,0,0,0,1,1,0,0
The issue INT 3671 addresses the need for generating meaningful bean names for annotated Bean EIP Enterprise Integration Pattern endpoints in Spring Integration This enhancement aims to improve clarity and manageability of configuration by automatically creating descriptive names for beans rather than relying on default or manually assigned names The change is motivated by the desire to streamline the development process and enhance the readability of integration flows The solution involves leveraging metadata from annotations to construct intuitive names facilitating easier debugging and maintenance The proposal was discussed and developed further in a related pull request on GitHub contributing to a more developer friendly framework experience,0,0,0,1,1,0,0
The HTTP documentation issue INT 3452 highlights the necessity of specifying expected response type in HTTP requests If this parameter is missing or does not match the reply s content type only headers and status are returned in a ResponseEntity without a body This occurs because a null expected response type results in a null delegate in the ResponseEntityResponseExtractor The ResponseEntityResponseExtractor class part of the response handling mechanism uses a HttpMessageConverterExtractor delegate to extract data when a valid response type is provided If the delegate is null it only returns headers and status without extracting the body This issue was discussed in a Stack Overflow question and addressed in a related GitHub pull request,0,0,0,1,1,0,0
In the Spring Integration project Christopher Smith raised an issue regarding exception propagation suggesting an annotation to allow exceptions to be passed to the client without being wrapped The standard behavior wraps exceptions in a MessagingException complicating their handling Christopher found this problematic especially when interfacing with MVC methods that inspect exceptions for HTTP status codes Artem Bilan mentioned a potential fix and recommended using RuntimeException to avoid unwanted wrapping Gary Russell noted the importance of unwrapping to isolate callers from the messaging system but acknowledged the need to update documentation to clarify the behavior The discussion emphasized balancing between preserving diagnostic information and simplifying exception handling for clients,0,0,0,1,1,0,0
Gary Russell opened INT 3322 https jira spring io browse INT 3322 redirect false to address the lack of documentation for the JDBC inbound channel adapter s select sql parameter source The issue highlights the need for improved reference documentation as the feature is currently only documented in the schema This enhancement aims to provide users with clearer guidance on using dynamic SQL queries within the JDBC adapter The discussion and progress on this issue can be followed through the related pull request on GitHub and a relevant Stack Overflow thread Reference URL Stack Overflow http stackoverflow com questions 22354381 dynamically updating the jdbcinbound channel adapter query statement Pull Request GitHub PR https github com spring projects spring integration pull 1082,0,0,0,1,1,0,0
The issue in INT 3306 https jira spring io browse INT 3306 involves high memory usage in Spring Integration when using splitters and aggregators with collections as message payloads The problem arises because the Aggregator s default CollectionToCollectionConverter repeatedly converts the payload leading to excessive object creation especially when using a custom release strategy This results in significant memory consumption and performance bottlenecks with the releaseStrategy being invoked 1000 times creating up to half a million instances A potential workaround involves using a ReleaseStrategy implementation without invoking the conversion service which reduces the overhead The issue affects version 3 0 1 and while improvements are considered they might introduce breaking changes and are not back portable,0,0,0,1,1,0,0
The documentation for routers in Spring Integration can be enhanced to clarify the use of the default output channel reducing user confusion Improvements are suggested following feedback from the community highlighting the need for clearer guidance A pull request has been submitted to address these issues aiming to refine the existing documentation and provide more explicit examples This change is intended to help developers better understand and implement routing logic within their applications,0,0,0,1,1,0,0
The issue INT 3197 https jira spring io browse INT 3197 was opened by Gunnar Hillert to consider migrating documentation from Docbook to Asciidoctor for version 3 0 M3 of the project This suggestion follows a similar task outlined in SPR 10960 https jira spring io browse SPR 10960 The migration aims to leverage Asciidoctor s benefits potentially improving the documentation process The proposal is linked to a pull request on GitHub indicating ongoing development and discussion among the project contributors,0,0,0,1,1,0,0
When using the PoolingHttpClientConnectionManager with RestTemplate it s important to be aware of the limitations of the default settings The Apache Pooling Connection Manager can lead to resource exhaustion if not configured properly Default settings might not suit high load applications so it s crucial to adjust parameters like max connections per route and total connections Refer to section 2 3 3 of the Apache HttpComponents Client tutorial http hc apache org httpcomponents client ga tutorial html connmgmt html for detailed guidance For more information see the related pull request https github com spring projects spring integration pull 947,0,0,0,1,1,0,0
The issue INT 3167 addresses the need to make the polling interval for Twitter messages configurable in the Spring Integration project Currently the minimum wait is hard coded to 15 seconds which poses challenges for certain testing scenarios This update will introduce a minimumWaitBetweenPolls property within the AbstractTwitterMessageSource class allowing more flexibility Artem Bilan and others have discussed the implications noting that the change should be documented clearly especially concerning Twitter s API rate limits The update is linked to other issues and pull requests emphasizing the need for clear documentation and potential removal of the hard coded limit if it doesn t effectively prevent rate limit exceptions,0,0,0,1,1,0,0
Ken Krueger suggested enhancing the documentation for Spring Integration by adding an index of gateways and adapters This index would clarify the distinctions and available components ideally with hyperlinks to detailed references The proposal was positively received with Gary Russell noting similarities to existing documentation in Spring XD like Sources and Sinks and suggesting potential alignment A pull request was initiated to implement these changes Ken agreed that creating similar resources for Spring XD would be beneficial to outline available sources and sinks,0,0,0,1,1,0,0
The resequencer component in Spring Integration no longer supports custom comparators as this feature was removed in a previous update INT 2518 However the official documentation still incorrectly mentions this capability causing potential confusion for users The issue was reported in INT 3042 by Charles Shin and it affects versions 2 2 1 2 2 2 and 2 2 3 Artem Bilan commented on this issue and linked a pull request to address the documentation error Removing the outdated information from the documentation will help clarify the current functionality of resequencers,0,0,0,1,1,0,0
The issue INT 3032 was opened by Thomas Hackel regarding incorrect repository information on the Spring Integration website The site incorrectly listed http maven springframework org release as the repository location The correct URL should be http repo springsource org release Gary Russell acknowledged the issue and confirmed that it was fixed,0,0,0,1,1,0,0
The issue INT 2997 highlights the lack of documentation for the handler alias added to int ws outbound gateway in Spring Integration This alias is essential not only for testing purposes but also for managing Control Bus scenarios The discussion points to a gap in existing documentation suggesting the need for a new Testing chapter that could reference testing samples and resources like Spring Integration In Action Additionally a chapter on bean names is proposed to explain automatically generated beans such as errorChannel and taskScheduler The conversation also touches on the behavior of IDs on the inbound side where an adapter without a channel assigns the channel the adapter s ID A related pull request is available for further context,0,0,0,1,1,0,0
Machine learning is a field of artificial intelligence focused on building systems that learn from data to improve their performance over time It involves algorithms and models that can identify patterns and make decisions with minimal human intervention Key techniques include supervised learning unsupervised learning and reinforcement learning each serving different purposes such as classification clustering and decision making Machine learning is widely used in various applications including image recognition natural language processing and predictive analytics enabling advancements in technology and automation Reference Async Gateway Sample Pull Request https github com SpringSource spring integration pull 757,0,0,0,1,1,0,0
The issue INT 2836 highlights the need for improved documentation of the send timeout attribute for aggregators in the Spring framework The current explanation in section 5 4 4 is vague simply stating it as The timeout interval for sending the aggregated messages to the output or reply channel This has caused confusion as noted in user forums Diego Bravo suggests that all instances of the send timeout attribute should reference the clearer documentation found in section 6 2 3 for the Payload Enricher This description clarifies that send timeout specifies the maximum time in milliseconds to wait when sending a message to a potentially blocking channel like a Queue Channel The default setting is 1 which may lead to indefinite blocking Improving this documentation would help users understand and effectively use the send timeout feature,0,0,0,1,1,0,0
In the JIRA issue INT 2835 Tom Greasley highlights a memory leak problem caused by an incorrectly configured rendezvous channel and poller The rendezvous queue mechanism can lead to uncontrolled growth in the task executor s queue if there s an imbalance between the sender and poller frequency This occurs because poller tasks are continually created and queued even when message processing is blocked leading to stalled threads To address this it s recommended to match the poll frequency with message arrival rates or configure the poller s task executor with a suitable queue capacity Gary Russell notes that setting a poller s receive timeout to 1 can exacerbate this issue suggesting that a zero or positive timeout helps manage thread returns Additionally the ExecutorChannel may be a better alternative for immediate task handoffs Tom acknowledges the importance of configuring receive timeouts to prevent queue growth and emphasizes the need for balancing various factors like message rate trigger rate and thread pool size,0,0,0,1,1,0,0
Gary Russell opened issue INT 2701 to address the need for documentation on replacing the default taskScheduler with a TimerManagerTaskScheduler in Spring Integration This change is relevant for environments like WebSphere where unmanaged threads can cause issues as discussed in a related forum thread The proposed solution involves using a TimerManagerTaskScheduler to better manage thread spawning A pull request has been submitted to the Spring Integration GitHub repository to implement this enhancement aiming to improve compatibility and thread management in specific deployment scenarios,0,0,0,1,1,0,0
The document discusses the introduction of pseudo transaction support within a specific context as highlighted in issue INT 2699 Gary Russell opened the issue and contributed to the discussion by issuing a pull request on GitHub PR 615 for the Spring Integration project This enhancement aims to facilitate smoother transaction management without relying on traditional transaction mechanisms The integration seeks to improve efficiency and flexibility in handling transactions especially in scenarios where full transactional support might not be necessary or feasible The change is part of ongoing efforts to optimize transaction processes within the framework,0,0,0,1,1,0,0
The Document Message Handler Advice Chain in Spring Integration involves using Retry CircuitBreaker and Expressions to enhance message handling reliability The Retry mechanism allows for retrying failed operations while the CircuitBreaker prevents system overload by halting operations that consistently fail Expressions provide dynamic configuration and decision making within the integration flow The implementation aims to improve system resilience and flexibility by integrating these patterns into message handling processes For more details refer to the pull request https github com SpringSource spring integration pull 597,0,0,0,1,1,0,0
In org springframework integration ws MarshallingWebServiceOutboundGateway the uri field only supports HTTP URIs unlike the defaultUri in WebServiceTemplate which can handle both HTTP and JMS URIs To use JMS URIs users must implement a custom DestinationProvider but this requirement isn t well documented Suggestions include enhancing the uri field to support JMS and updating documentation for clarity Artem Bilan proposed redesigning HttpUrlTemplate to support all transports and uriVariableExpressions aligning with Spring WS capabilities Gary Russell issued a related pull request and Mark Fisher emphasized adding documentation notes for version 2 2 with potential long term fixes in version 3 0,0,0,0,1,1,0,0
In issue INT 2678 https jira spring io browse INT 2678 redirect false Slava Semushin reported a typo on the Spring Integration documentation page where samples was misspelled as sampples Slava provided a screenshot to illustrate the error Artem Bilan responded acknowledging the mistake and linking to a pull request PR 556 https github com SpringSource spring integration pull 556 to address the typo Artem thanked Slava for reporting the issue and confirmed that it would be fixed,0,0,0,1,1,0,0
The documentation task INT 2639 aimed to enhance the Spring Integration guide by detailing various SFTP authentication methods specifically focusing on password versus keyboard interactive authentication This effort followed the addition of keyboard interactive support in version 2 1 1 linked to issue 6419 A proposed tip involved configuring session properties to prioritize authentication methods like password GSSAPI and public key Although initially relevant the issue was later deemed outdated with a suggestion to refer to Apache MINA for updated information The affected version was 2 2 M2,0,0,0,1,1,0,0
The discussion focuses on enhancing the Message Store section in Spring Integration documentation by comparing various implementations and their pros and cons A key issue raised involves the JDBC message store which serializes messages and blocks the sender leading to transaction timeouts in certain scenarios The problem arises when transactions remain open for extended periods causing concurrent operations to fail Suggestions include considering compensating transactions for long running processes and possibly restructuring the message group table to improve concurrency The conversation highlights the limitations of the JDBC message store in parallel processing and seeks alternatives for efficient asynchronous task handling,0,0,0,1,1,0,0
The update for the s ftp outbound channel adapter documentation referenced in issue INT 2490 https jira spring io browse INT 2490 redirect false highlights the need for a comprehensive overview of all features This includes addressing the impact of issue 6470 which affects aspects like temporary file creation and file suffixes The documentation for version 2 1 GA should be reviewed to ensure it captures the full scope and functionality of the adapter ensuring clarity and completeness for users,0,0,0,1,1,0,0
The HTTP Inbound Gateway in Spring Integration has seen changes regarding the path and name attributes The name attribute is deprecated from version 2 1 and users should now use the path attribute instead However documentation did not initially reflect this change for the Inbound Gateway Behavioral differences arise when switching attributes using path instead of name may require additional configuration such as declaring a UriPathHandlerMapping bean in the DispatcherServlet configuration to handle URLs properly This change is documented in the migration guide from version 2 0 to 2 1 Further documentation updates are planned to address these changes comprehensively,0,0,0,1,1,0,0
The selector attribute in a jms message driven channel adapter is used for content based filtering in JMS Java Message Service It helps in specifying criteria to filter messages using selectors which can be confused with Spring Integration s MessageSelector This attribute allows for selective message consumption based on specified conditions such as someId 75D938E89AF18C30 The issue was noted in version 2 1 1 and discussed in the SpringSource forum leading to a pull request for better documentation and clarification The aim is to prevent confusion and ensure users understand the attribute s specific purpose in filtering JMS messages,0,0,0,1,1,0,0
In the context of using NIO with a TCP Connection Factory determining the appropriate pool size is challenging Large messages may require two concurrent threads per socket one for reading fragments and another for assembling them into messages Additionally a dedicated thread from the pool handles selector events In a case where the pool size was set to two one thread managed the selector while the other was blocked due to insufficient threads to process data from a piped input stream Therefore it is essential to select a pool size that can handle the expected number of concurrent message receptions effectively This issue affects version 2 1 GA and is further discussed in the linked forum and pull request,0,0,0,1,1,0,0
The issue in INT 2416 involves the ServiceActivator in Spring Integration which fails to remove message headers silently When attempting to remove a header like foo the header remains without any warning or error The suggested solution is to allow header removal if the returned object is a Message instance making the ServiceActivator more flexible similar to a Transformer Currently workarounds involve using a HeaderFilter or switching to a Transformer which complicates the process The ServiceActivator can modify but not remove headers which is inconsistent and confusing An alternative is to implement a fail fast mechanism to alert users of unsupported operations Proper documentation is needed since the current design doesn t centrally manage header copying for ServiceActivator unlike Transformer,0,0,0,1,1,0,0
A user reported an issue with the Spring Integration documentation on springsource org specifically regarding the build from source instructions The documentation incorrectly directed users to obtain the source code from git git springsource org spring integration spring integration git whereas it should point to git github com SpringSource spring integration git This discrepancy was noted by Guillaume Peron and recorded under issue INT 2349 Mark Fisher acknowledged the error and confirmed that the necessary update was made to correct the Git URL,0,0,0,1,1,0,0
To enable table of contents bookmarks in the Spring Integration reference guide PDF use Acrobat Reader to access the left pane which allows navigation to any chapter with a single click To implement this feature update the pdf custom xsl file located at docs src reference resources xsl Modify the parameters xsl param name fop1 extensions select 1 xsl param and xsl param name use extensions 1 xsl param to ensure bookmarks are generated This update affects version 2 1 RC2 and a pull request has been issued to address this enhancement,0,0,0,1,1,0,0
In the Spring Integration reference manual section A 4 1 there was a typographical error where Sprig was used instead of Spring under the Composed Message Pattern heading This issue was identified in version 2 0 5 by Gordon Dickens Artem Bilan addressed the problem by issuing a pull request to correct the typo Oleg Zhurakousky suggested that Artem could also add his name to the list of contributors after making this simple change,0,0,0,1,1,0,0
In the documentation for Spring Integration version 8 1 6 there was an error in the code sample for exporting JMX beans The incorrect tag jmx mbean exporter was used which should be corrected to jmx mbean export This change reflects the accurate usage required for proper configuration The issue affected version 2 0 5 and was linked to a superseded issue 6576 The correction was noted and addressed by Morten Andersen Gott and Artem Bilan,0,0,0,1,1,0,0
Spring Integration components can be exposed as JMX MBeans using the IntegrationMBeanExporter which employs JDK dynamic proxies for applying JMX AOP advices to Spring Integration beans This choice is intentional and differs from the usual Spring configuration options which often include CGLib based proxies Documenting this in the reference manual is necessary to avoid user confusion as it is currently only noted in the source code Users are advised not to rely on concrete classes instead functionality should be accessed through interfaces if needed Starting with version 4 2 proxies are no longer used for gathering metrics so this documentation requirement has been rendered obsolete,0,0,0,1,1,0,0
The JSR223 Scripting issue INT 2088 was opened by David Turanski and affects version 2 1 M1 This update involves moving scripting support from the core to a dedicated scripting module Turanski added a scripting section and revised the Groovy section to align with these changes The update includes general improvements for clarity and consistency in the documentation,0,0,0,1,1,0,0
The task involved improving the formatting of the readme txt file for the Spring Integration project Initially the formatting was quite basic and since the project is hosted on GitHub it was suggested to convert the document into Markdown for better readability and visual appeal This enhancement was tracked under issue INT 2052 The update affects version 2 0 5 and is linked to another issue INTSAMPLES 29 which also seeks to improve the formatting of a related file A pull request was submitted and applied to address these changes Additionally there was a discussion about potentially removing the section titled OSGI Notes,0,0,0,1,1,0,0
The SpringSource Tool Suite STS Visual Editor for Spring Integration was intended to be documented with added chapters and screenshots to enhance the reference material However as of version 2 0 5 STS no longer includes a plugin for rendering Spring Integration XML configurations Consequently there is no current need to document this feature Future documentation efforts will focus on visual tools when they become available For now users can refer to the detailed explanation of the JSON model in the Spring Integration framework which supports external visualization More information can be found in the system management section https docs spring io spring integration docs current reference html system management html integration graph of the official documentation,0,0,0,1,1,0,0
In chapter 11 File Support of the Spring Integration reference documentation several formatting issues need attention Specifically markup is incorrectly displayed in a sentence about file unlocking Additionally section 11 4 on File Transformers lacks proper quotation marks in code examples Several code snippets are not correctly marked or declared as XML affecting readability and consistency The issue impacts version 2 0 5 and is linked to the broader task of standardizing namespace prefixes across the documentation Addressing these issues will improve clarity and usability,0,0,0,1,1,0,0
The reference manual now includes a section at the beginning that clarifies the usage of Spring Integration namespace prefixes This addition is intended to familiarize users with the conventions followed throughout the documentation It explains the flexibility users have in choosing their namespace prefixes while highlighting the standard conventions adopted by Spring STS For consistency the documentation will adhere to these conventions such as int adapter int file adapter and int http adapter which suit most use cases This ensures a uniform understanding and application across various components and integrations,0,0,0,1,1,0,0
David Turanski requested an update to the Spring Integration Reference Manual to include a more flexible and intuitive example of using routers with Spring Expression Language SpEL The current example resolves the expression directly to a channel like int router input channel inChannel expression payload Channel Turanski suggests adding an example that utilizes child mapping elements which allows multiple values to map to the same channel This approach is beneficial in scenarios where different input values should direct to the same output channel For instance a router could be set up as follows xml int router input channel inChannel expression payload paymentType int mapping value CASH channel cashPaymentChannel int mapping value DEBIT channel creditPaymentChannel int mapping value CREDIT channel creditPaymentChannel int router This configuration directs CASH to the cashPaymentChannel and both DEBIT and CREDIT to the creditPaymentChannel The request affects version 2 0 4 of the software,0,0,0,1,1,0,0
Spring STS recommends using standardized namespace prefixes like int int xml and int file for Spring Integration components However the reference documentation lacks consistency with varying prefixes such as int and si To align with STS conventions it s suggested that documentation should adopt these standardized prefixes This issue affects version 2 0 4 and is linked to other documentation improvements such as explaining namespace usage and fixing formatting errors Gunnar Hillert reviewed the documentation ensuring consistent use of int or int componentname prefixes throughout,0,0,0,1,1,0,0
James Volker reported an issue with the Jira reference manual for Spring Integration The link intended to direct users to the Jira issue tracker for samples mistakenly redirects to a static Spring Integration reference page This affects version 2 0 4 and the incorrect link needs correction to ensure proper access to the intended resource,0,0,0,1,1,0,0
The issue INT 1938 opened by James Volker addresses a problem in the Spring Integration 2 0 4 release The reference manual mentions a class MapBasedChannelResolver which is missing from the distribution zip file This discrepancy affects users relying on the documentation for implementing features using this class The problem is documented in the Spring JIRA system and further discussion can be found on the specified forum thread This highlights the importance of maintaining consistency between documentation and actual code releases in software projects,0,0,0,1,1,0,0
The issue with the SFTP outbound adapter is that it fails to rename a file if a file with the target name already exists in the directory This is due to the SFTP implementation not deleting the existing file before attempting a rename unlike the FTP implementation which handles this by deleting the file first The problem is exacerbated by OS specific behaviors where some operating systems allow renaming over an existing file while others do not The proposed solution involves attempting the rename and if it fails trying to delete the existing file before attempting the rename again This workaround may not always succeed due to potential permission restrictions on the SFTP server The underlying API does not provide detailed error messages making it challenging to handle exceptions gracefully The aim is to improve this handling in future updates but for now users are advised to implement the workaround,0,0,0,1,1,0,0
The issue discussed involves a Spring Integration application that encounters problems due to unreleased file locks in the FileReadingMessageSource component When processing a large number of files the application runs out of file descriptors because the code locks files without unlocking them leading to resource exhaustion The problem stems from a lack of a clear point in the process to release these locks A proposed solution involves reintroducing a method to signal when processing is complete but this approach may be unreliable An alternative suggestion is to delegate the responsibility of unlocking to the user using available methods like unlock on FileLocker Additionally the idea of a transaction scope for pollers is considered allowing registration of tasks like file unlocking upon commit potentially using Spring Expression Language SpEL for flexibility This solution could address the problem in the context of upcoming features,0,0,0,1,1,0,0
The JMS Outbound Gateway in Spring Integration allows developers to configure message handling through XML specifically using the header mapper option This feature enables the mapping of message headers between JMS and Spring Integration facilitating seamless message conversion Understanding this configuration is essential for developers to ensure proper message flow and transformation An example in the Spring Integration documentation would aid in demonstrating how to utilize header mapper effectively showcasing its role in customizing header handling and improving integration capabilities,0,0,0,1,1,0,0
The issue INT 1733 was opened by Mark Serrano highlighting an incomplete example in the Spring Integration Reference regarding sending a message to an operation channel The original example lacked a necessary build method in the MessageBuilder chain The correct usage should be java Message operation MessageBuilder withPayload myServiceBean shutdown build operationChannel send operation This fix ensures the message is properly constructed before being sent Additionally the example did not provide information on the creation of the operationChannel variable Mark Fisher updated the description to include proper code tags and removed the constructor call for MessageBuilder and Oleg Zhurakousky confirmed the fix,0,0,0,1,1,0,0
The update to the Javadoc for Message and MessageHeaders aims to clarify their immutability once a Message instance is created This change tracked under INT 1574 https jira spring io browse INT 1574 ensures developers understand that neither the message content nor its headers can be altered after instantiation This immutability is crucial for maintaining data integrity and consistency within applications that utilize these components The enhancement affects version 2 0 RC1 emphasizing the importance of clear documentation in conveying the behavior and constraints of these classes to developers,0,0,0,1,1,0,0
The IRC adapters documentation task identified as INT 1425 https jira spring io browse INT 1425 redirect false was opened by Oliver Drotbohm This task is linked to issue 5418 which involves enabling IRC integration for message production and consumption However Artem Bilan commented that the task is no longer relevant Mark Fisher noted that the IRC adapters development is being moved to version 2 1 and referenced comments on issue 5418 for further context,0,0,0,1,1,0,0
The issue INT 1292 opened by Chris Beams highlights the need for Spring Integration SI sample projects to log only their specific outputs in a user friendly format rather than logging at the INFO level on broader packages like org springframework integration This change aims to enhance usability by ensuring that logs are relevant and readable Oleg Zhurakousky noted that each sample now focuses on logging only its pertinent output The task was moved to RC1 and will be addressed during the migration of samples to Git This adjustment affects version 2 0 M6,0,0,0,1,1,0,0
To enhance the documentation for automated integration testing in Spring Integration SI projects it s necessary to include a section detailing how to perform integration tests This should feature examples of testing SI components with simulated interface partners Christoph Deppisch suggests using frameworks like Citrus to facilitate this process and has offered to provide a patch The documentation update should also reference tools such as MockIntegrationContext and MockIntegration factory which are covered in the Spring Integration testing documentation Relevant resources including a patch XML configuration and setup images are attached to the issue for further guidance,0,0,0,1,1,0,0
The issue INT 1220 opened by Oleg Zhurakousky focuses on improving the Event Adapter documentation Initially updates were made for the Inbound Adapter but the Outbound Adapter documentation still required revisions Mark Fisher noted the release of M6 and subsequent comments from Oleg confirmed that the documentation had been fully updated For further details see the JIRA issue https jira spring io browse INT 1220 redirect false and the related forum discussion http forum springsource org showthread php t 91373,0,0,0,1,1,0,0
The Loan Broker sample application is in development for the M3 release incorporating stub banks and a credit bureau Future updates for M4 will integrate SOAP POX and REST endpoints along with a potential JMS based Credit Bureau This version will also demonstrate the use of the Control Bus The initial version has been committed featuring placeholders for banks and the credit bureau to facilitate further enhancements,0,0,0,1,1,0,0
In the context of Spring Integration there s a focus on enhancing multipart request handling using RestTemplate in Spring 3 0 2 The issue tracked as INT 1016 highlights a dependency on refactoring outbound HTTP adapters to utilize RestTemplate Initially affected in version 2 0 M2 Mark Fisher suggested incorporating examples in both a sample application and the reference manual By milestone M6 RestTemplate integration was underway but Tomasz Klaudel raised concerns about the current DefaultOutboundRequestMapper not supporting the necessary functionality due to DefaultContentTypeResolver This prompted discussions on modifying the default request mapper to accommodate multipart requests effectively,0,0,0,1,1,0,0
To create a sample project demonstrating the use of ws inbound gateway in Spring Integration you can develop a simple web service application that receives SOAP messages This project will complement the existing ws project which might be better named ws outbound The new project should be placed under spring integration samples ws inbound gateway It will showcase how to configure an inbound gateway to handle incoming web service requests process them and return responses The setup involves defining the necessary Spring Integration components such as channels transformers and service activators and configuring the gateway to expose a web service endpoint This example will serve as a practical guide for developers looking to implement web service integrations using Spring Integration s inbound gateway capabilities,0,0,0,1,1,0,0
Summary for Machine Learning The task involves adding documentation for file locking as per issue INT 984 opened by Iwein Fuld The documentation should include a few explanatory sentences and an example This issue is linked to other tasks such as adding namespace support for file locking and merging scanner and filter in FileReadingMessageSource The issue has been marked as completed For further details refer to the SpringSource forum http forum springsource org showthread php p 266427,0,0,0,1,1,0,0
The Mail Enricher was initially applied only to String payloads but there s a proposal to extend its functionality to MailMessage payloads as well This discussion was prompted by Mark Fisher s request and further details can be found in a related forum post The issue affects version 1 0 2 SR1 but in the 2 0 development trunk headers are now applicable to MailMessage payloads addressing this concern,0,0,0,1,1,0,0
Creating your own adapters for Spring Integration involves understanding the framework and utilizing available resources Initially there was a lack of documentation which hindered developers from contributing effectively to the ecosystem However templates and an extension repository have been established to assist developers in creating new adapters and extension modules These resources can be found at the Spring Integration Extensions GitHub repository providing essential tools and guidance for developers to innovate and expand the platform s capabilities This initiative supports a more vibrant and collaborative development environment,0,0,0,1,1,0,0
The RecipientListRouter Javadoc needs clarification to distinguish it from Router and pub sub systems Key points include whether messages are sent to all recipients or just one and when to choose this over a pub sub channel or multiple handlers on a point to point channel Additionally guidance on configuring this endpoint is necessary Updates to the documentation aim to address these ambiguities The issue affects version 1 0 3 and while some improvements have been made further attention is required to enhance clarity,0,0,0,1,1,0,0
Mark Fisher opened issue INT 729 to add Log4j configuration files to the samples This enhancement is intended to facilitate increasing the logging level for better visibility into system processes The proposal suggests including the Log4j dependency in the parent POM for the samples This change affects version 1 0 2 SR1,0,0,0,1,1,0,0
The discussion in INT 655 highlights the need for simplifying the process of running demo samples in the Spring distribution Initially users faced challenges due to insufficient dependencies and the requirement to check out from SVN Mark Fisher suggested making samples available directly within the distribution supporting standalone project builds for easier IDE import This approach is inspired by the Spring BlazeDS project s structure Oleg Zhurakousky confirmed that in the upcoming release samples will be restructured as independent Maven based projects This change aims to streamline setup and dependency management particularly for Eclipse users with the Maven plugin,0,0,0,1,1,0,0
In the issue INT 611 there was a need to standardize the use of either programlisting lang or programlisting language for consistency in documentation This decision impacts how callouts and highlighting are handled Artem Bilan mentioned that the team decided to migrate the documentation to the AsciiDoc format to address this Marius Bogoevici noted a problem with Docbook s handling of callouts which conflicts with text highlighting He explained that language is used for rendering while lang refers to the language code questioning its effectiveness when set to java This reflects the team s efforts to resolve documentation inconsistencies and improve clarity,0,0,0,1,1,0,0
The issue INT 610 opened by Iwein Fuld highlights the need to find a better documentation solution than Docbook due to its bugs slowing down development This affects version 1 0 1 Artem Bilan later commented that the issue was fixed via 7174 The exploration of DITA for documentation is suggested as a potential improvement,0,0,0,1,1,0,0
Mark Fisher opened INT 430 https jira spring io browse INT 430 redirect false to add JMS samples demonstrating various adapter types JMS Inbound Channel Adapter JMS Outbound Channel Adapter JMS Inbound Gateway and JMS Outbound Gateway The org springframework integration samples jms package now includes ChannelAdapterDemo and GatewayDemo These samples are configured to run with ActiveMQ in embedded mode but can be easily modified for other providers or to run ActiveMQ as a standalone process by changing the brokerURL in common xml The main methods in these demos bootstrap the ApplicationContext allowing straightforward setup with separate VMs for inbound and outbound configurations each with its own context,0,0,0,1,1,0,0
Summary In the context of the JIRA issue INT 331 Iwein Fuld raised a question regarding the MessageTarget send method Specifically there is a need for clarification on the meaning of the boolean return value and whether implementations should throw exceptions like MessageDeliveryException or MessagingException or simply return false when an issue occurs Mark Fisher acknowledged the importance of these questions and emphasized the need for clear and definitive answers Javadoc Addition java Sends a message to the target param message the message to send return true if the message was sent successfully false otherwise throws MessageDeliveryException if a delivery error occurs throws MessagingException if a general messaging error occurs boolean send Message message throws MessageDeliveryException MessagingException,0,0,0,1,1,0,0
Summary Artur Karazniewicz requested the addition of build instructions and IDE guides to the project In response Mark Fisher updated the project documentation The build instructions along with basic importing guides for Eclipse and IntelliJ IDEA are now available at the end of the readme txt file,0,0,0,1,1,0,0
The JavaDoc for KafkaMessageHeaderAccessor getBlockingRetryDeliveryAttempt was incorrect and has been addressed in a backport of issue gh 3408 This fix was implemented with the commit 0a93dd5974a8a7b86035e72ea415e243c27f2270 The correction ensures accurate documentation improving clarity and usability for developers working with Kafka message headers and retry mechanisms Proper documentation helps prevent misunderstandings and errors when utilizing this method in message handling workflows,0,0,1,1,0,0,0
The update involves correcting the JavaDoc for the KafkaMessageHeaderAccessor getBlockingRetryDeliveryAttempt method in a backport of a previous issue gh 3408 This was resolved with the commit dc6561495709565a04532618fd296324d8fae252 This change ensures that the documentation accurately reflects the method s functionality which likely pertains to handling retry attempts for message delivery in a blocking manner within Kafka Proper documentation helps developers understand and utilize the method correctly improving overall code reliability and maintainability,0,0,1,1,0,0,0
The JavaDoc for KafkaMessageHeaderAccessor getBlockingRetryDeliveryAttempt in version 3 2 2 is incorrect It claims to return 1 if no header is present but actually throws an IllegalStateException in such cases The documentation should be updated to reflect this behavior A pull request PR is encouraged to fix this issue following the guidelines provided in the contribution guide Although only team members can be officially assigned to the issue contributions are welcome and will be acknowledged in the release notes,0,0,1,1,0,0,0
The link for the Spring Kafka project overview on the Spring website needs updating The current link leads to a 404 error For accurate and current documentation use this updated link Spring Kafka Documentation https docs spring io spring kafka reference appendix override boot dependencies html This documentation provides comprehensive information on Spring Kafka including configuration usage and overriding default dependencies which is essential for developers integrating Kafka with Spring applications,0,0,1,1,0,0,0
In the Spring Kafka 3 0 0 documentation for Non Blocking Retries under DLT Failure Behavior there is a code sample error The outdated method dltProcessor Class clazz String methodName is no longer available Instead the correct method to use is dltHandlerMethod String beanName String methodName This change is crucial for properly selecting a DLT handler method Ensure you update any implementations using the old method to the new one to maintain compatibility with the latest version of Spring Kafka You can find further details in the official documentation https docs spring io spring kafka docs current reference html dlt failure behavior,0,0,1,1,0,0,0
The Spring Kafka documentation for the KafkaListenerContainerFactory is outdated reflecting two generic types Currently the KafkaListenerContainerFactory interface only uses one generic type as seen in the GitHub repository https github com spring projects spring kafka blob main spring kafka src main java org springframework kafka config KafkaListenerContainerFactory java The documentation should be updated to reflect this change This issue appears in version 2 8 6 of Spring for Apache Kafka and it is important for the documentation to align with the current implementation utilizing a single generic type,0,0,1,1,0,0,0
The documentation for Spring Kafka 2 8 6 incorrectly references the setAckOnError method which appears to have been removed in earlier versions The method is still mentioned in the sample code for configuring a ConcurrentKafkaListenerContainerFactory but it is not present in the latest source code The expected behavior is to remove this outdated reference from the documentation Additionally there s another code example involving a DeadLetterPublishingRecoverer and ErrorHandler that fails to compile The ErrorHandler should be replaced with CommonErrorHandler to align with the latest APIs These issues should be corrected and back ported to affected branches,0,0,1,1,0,0,0
The Stack Overflow post discusses an issue with serialization when using ReplyingKafkaTemplate in a Kafka setup The problem arises from misconfiguration causing serialization errors during message processing A suggested solution involves ensuring that the correct serializers are configured for both the key and value in the Kafka producer and consumer properties This can involve specifying compatible serializers such as JsonSerializer and JsonDeserializer and ensuring that both producer and consumer configurations match Proper alignment between the producer consumer and the Kafka template is crucial to resolving serialization issues,0,0,1,1,0,0,0
In the Javadocs for AckMode there is a minor inconsistency regarding the terms processed and passed to the listener This discrepancy may imply different behaviors such as synchronous versus asynchronous processing In one part RECORD mode is described as committing after each record is processed while another states it commits after each record is passed to the listener Similarly BATCH mode commits after processing a batch or after it is passed This inconsistency can lead to confusion about when commits occur Additionally the ContainerProperties ackMode documentation repeats some of the AckMode descriptions but omits certain options further complicating understanding It s important to clarify these terms to ensure accurate implementation,0,0,1,1,0,0,0
It seems you re referring to a section in the Spring Kafka documentation about using KafkaHandler at the class level When working with KafkaHandler metadata provides additional context or information about the messages being processed such as headers or partition details However the documentation might lack explicit instructions on implementing or accessing metadata within this context Typically you can enhance message handling by utilizing metadata through method parameters allowing for more customized processing For more precise guidance consult the relevant section in the documentation or explore community resources and examples,0,0,1,1,0,0,0
The documentation for using the SeekToCurrentErrorHandler in Spring Kafka 2 2 contains inaccuracies The correct approach is to use factory setErrorHandler new SeekToCurrentErrorHandler instead of factory getContainerProperties setErrorHandler new SeekToCurrentErrorHandler which results in a Cannot resolve method exception This discrepancy arises because the property was moved to the container in recent releases but the documentation was not updated to reflect this change To correct this you can fork the Spring Kafka GitHub project and modify the documentation file located here https github com spring projects spring kafka blob master src reference asciidoc kafka adoc,0,0,1,1,0,0,0
The Spring for Apache Kafka project as per its version 1 2 2 reference is tested with Spring Framework 4 3 7 but should work with earlier versions However running examples with versions below 4 0 leads to compilation issues due to the use of ListenableFuture and SettableListenableFuture which were introduced in Spring 4 0 and 4 1 respectively The documentation should specify these minimum requirements to prevent confusion A GitHub commit has addressed this and contributors are encouraged to update documentation to clarify the minimum version requirements This ensures users don t mistakenly attempt compatibility with much older Spring versions avoiding unnecessary issues,0,0,1,1,0,0,0
The KafkaTemplate documentation mentions both asynchronous and synchronous methods with async methods returning a Future However it seems now all methods return a Future Asynchronous execution can be achieved by registering a success or failure callback on the Future This aligns with a later statement that send methods return a ListenableFuture SendResult allowing callbacks for asynchronous results The observation about this discrepancy is accurate and a contribution to update the documentation would be appreciated,0,0,1,1,0,0,0
To implement Kafka Streams Interactive Queries you need access to the KafkaStreams instance The current documentation version 1 2 2 lacks detailed guidance on setting up Interactive Queries An attempt to configure this using Spring Boot involves defining a StreamsConfig bean and a KStreamBuilder bean However injecting KStreamBuilderFactoryBean to access the KafkaStreams instance fails because the necessary bean is not found The configuration includes setting up serializers and deserializers creating a stream from a topic and grouping and counting data by key The issue arises from the missing bean definition for KStreamBuilderFactoryBean preventing the application from starting To resolve this ensure the bean is correctly defined in the configuration,0,0,1,1,0,0,0
To implement the waitListening foo function in a Kafka listener test the code is designed to ensure that a Kafka listener is ready to process messages The function retrieves a MessageListenerContainer using an ID then checks if the container has assigned partitions It repeatedly checks for partition assignments sleeping briefly between attempts until partitions are assigned or a timeout occurs This approach has evolved and modern tests use ContainerTestUtils to handle this more effectively Additionally for real Kafka interactions such manual waiting may not be necessary as tests can proceed once the listener is set up The example provided is derived from a Spring Kafka test case,0,0,1,1,0,0,0
The EnableKafka annotation in Spring is used to facilitate the processing of KafkaListener annotations This is achieved by registering a KafkaListenerAnnotationBeanPostProcessor which can either be done manually or more conveniently through EnableKafka While the KafkaListener Javadocs mention EnableKafka it s noted that this information should also be included in more comprehensive resources like books for better clarity The concern is that EnableKafka might face similar documentation issues as EnableIntegration did previously,0,0,1,1,0,0,0
The convertAndSend methods in older references of the QuickStart guide are outdated These methods are used for sending messages in messaging systems converting objects to messages automatically In newer implementations alternatives with updated parameters and enhanced functionality are recommended It s important to review the latest documentation to ensure that your code follows current best practices and supports new features Transitioning to the updated methods can improve efficiency maintainability and compatibility with modern systems Always check for deprecations and new API features to keep your applications robust and up to date,0,0,1,1,0,0,0
The DelegatingByTypeSerializer currently throws a NullPointerException when handling tombstone messages null values in Kafka This issue arises because the serializer attempts to access the class of the data which is null for tombstones The expected behavior is that the serializer should handle tombstones without crashing To address this a configuration is suggested where a Serializer is set up for KafkaNull allowing tombstones to be processed correctly The problem can be fixed by modifying the code to check for null data and use the KafkaNull class as a key to retrieve the appropriate serializer This change has been recognized as a bug as KafkaNull is meant for converting messages in Spring applications and should return null values directly,0,0,1,0,1,0,0
The issue with deadlock on lifecycleMonitor in the childStopped method is linked to a known problem in the Spring Kafka project specifically issue 2612 https github com spring projects spring kafka issues 2612 This problem which affects the synchronization mechanisms has been addressed and the fix was integrated into the 2 9 x branch As a result build times have significantly increased due to the contention caused by this deadlock The resolution involves careful management of thread synchronization to prevent these delays and ensure efficient operation,0,1,1,0,0,0,0
In versions of Kafka starting from 2 9 0 an issue arises when custom code in the afterCommit method throws an exception causing Kafka transactions not to commit or roll back correctly This results in an invalid KafkaProducer state being cached leading to errors on subsequent calls The problem seems to stem from changes in transaction synchronization handling where the commit operation was moved from afterCompletion to processResourceAfterCommit The recommendation is to handle lengthy afterCommit logic by moving it to afterCompletion to prevent Kafka transaction timeouts ensuring that the main transaction is successful first Adjustments in synchronization order or additional logic in KafkaResourceHolder might be necessary to manage commit or rollback scenarios effectively The issue has been addressed in later updates but further context or a minimal reproducible example MCRE could aid in understanding specific cases,0,1,1,0,0,0,0
The issue in question relates to the KafkaListener regression found in Spring Kafka versions 3 0 0 and 3 0 1 where the listener pseudo bean is not available in the id attribute This problem affects configurations where the id attribute relies on the listener bean causing potential disruptions in how listeners are identified and managed The regression likely stems from changes in recent updates and the issue has been documented in the Spring Kafka GitHub repository Affected users should watch for updates or patches that address this regression to restore expected functionality,0,1,1,0,0,0,0
In version 2 8 8 of Spring for Apache Kafka a bug related to issue 2340 was introduced due to an error in cherry picking The problem occurs in the ErrorHandlerAdapter where it checks if the error handler is an instance of RetryingBatchErrorHandler and then incorrectly attempts to cast it to FallbackBatchErrorHandler This results in a ClassCastException during partition assignment if RetryingBatchErrorHandler is used The issue was fixed in a later commit but as a workaround users can copy the adapter and inject it as a CommonErrorHandler or use the DefaultErrorHandler which handles non specific exceptions similarly to RetryingBatchErrorHandler,0,1,1,0,0,0,0
In Spring Kafka version 2 8 4 a bug was introduced affecting negative acknowledgment nack functionality due to a change in how nack values are handled The commit in question altered the behavior so that the pauseForNackSleep method checks for values greater than 0 rather than greater than or equal to 0 This causes an issue when acknowledgment nack 0 is executed leading to endless partition reseeking The problem can be mitigated by setting the nack value to 1 instead of 0 or by reverting to version 2 8 3 where this issue does not occur A fix for this bug is expected in version 2 8 5 and users can test the fix using the 2 8 5 SNAPSHOT version by accessing the snapshot repositories,0,1,1,0,0,0,0
The RecordInterceptor logic has an issue where the early interceptor is triggered even without a transaction manager irrespective of the isInterceptBeforeTx setting This behavior does not include the delivery attempt header which can cause problems as noted in a related Stack Overflow discussion This is identified as a regression issue 1929 highlighting inconsistencies after updates Proper handling of Kafka headers in such scenarios is essential for maintaining expected functionality in message processing frameworks like Spring Kafka,0,1,1,0,0,0,0
In Spring Kafka version 2 7 3 there s a bug involving the properties spring json trusted packages and spring json type mapping something com example Something Setting spring json trusted packages is intended to trust all packages by making the trusted packages list empty However when spring json type mapping is also used type mappings are added to the trusted packages list causing the isTrustedPackage check to fail for classes not explicitly defined in the mappings This behavior contradicts the expected trust all functionality The issue arises from a specific commit and currently requires declaring type mappings for all classes as a workaround which is impractical A proposed solution has been commented on to prevent similar issues in the future,0,1,1,0,0,0,0
The Spring Kafka documentation for version 2 2 x is missing an appendix on overriding Kafka clients leading to a 404 error from the Spring Kafka homepage This appendix is assumed necessary for enabling Kafka clients version 2 1 x with 2 2 x Although testing against 2 1 x clients hasn t been completed yet it s planned and the appendix will be updated once confirmed The notable changes in Kafka s documentation suggest no issues should arise and testing is scheduled to ensure compatibility,0,0,0,1,1,0,0
The Producer Cache in Spring Pulsar becomes ineffective when ProducerBuilderCustomizer is configured This issue was addressed in the backport of 593 and resolved with commit 739e89b1751b4bab9d6728c3ef8753f1c36f2677 The problem arose because customizations made using ProducerBuilderCustomizer interfered with the efficient caching mechanism leading to potential performance issues The resolution involved ensuring that the cache remains effective even when customizers are applied maintaining both customization flexibility and performance efficiency,0,0,1,1,0,0,0
When using PulsarTemplate to send messages the producer cache becomes ineffective if a ProducerBuilderCustomizer is configured This occurs because the customizers often lambdas have unpredictable hash codes causing rapid cache expansion since producers can t be retrieved from the cache This issue is exacerbated when using ProducerInterceptor as it is added to the customizers list further complicating caching A suggested solution involves caching the customizers at initialization to ensure consistent hash codes Documentation updates and additional test cases are recommended to address this limitation Until fixed disabling caching via configuration is advised to prevent cache issues,0,0,1,1,0,0,0
I m using Spring Pulsar with Spring Boot 3 2 0 M3 and Pulsar Client 3 1 0 attempting to configure OAuth2 authentication with JWT The setup follows the documentation specifying org apache pulsar client impl auth oauth2 AuthenticationFactoryOAuth2 as the plugin class However a ClassCastException occurs indicating a mismatch in expected class types This issue appears to be a documentation bug as suggested by a GitHub commit referencing a fix Switching to AuthenticationOAuth2 results in a different exception highlighting the deprecation of certain methods and suggesting the use of EncodedAuthenticationParameterSupport This alternative doesn t support parameter initialization through a map indicating a need for further configuration adjustments or updates in the library,0,0,1,1,0,0,0
The update to Spring Boot 3 4 x involves setting the default version to 3 4 0 M1 This update includes revising compatibility tests to ensure that all functionalities work seamlessly with the new version Additionally the compatibility documentation needs to be updated to reflect changes and provide guidance on using the latest version These updates aim to maintain stability enhance performance and ensure that developers have accurate information for implementing Spring Boot 3 4 x in their projects,0,0,0,1,0,0,1
The issue involves duplicated query strings in generated snippets after upgrading to version 1 1 1 RELEASE In version 1 1 0 RELEASE the query string appears correctly such as exams count 10 page 1 but in 1 1 1 RELEASE it duplicates like exams count 10 page 1 count 10 page 1 Users found that adding specific dependencies such as spring restdocs core 1 1 2 BUILD SNAPSHOT resolves this issue This fix requires explicitly including the core jar in the dependencies particularly when using Gradle The duplication issue affects various snippets including those using MockMvc and persists in some test cases The problem was reportedly fixed in the latest 1 1 2 snapshots available from the Spring repository but further testing and examples are encouraged to ensure the fix s effectiveness,0,1,1,0,0,0,0
To improve the Spring REST Docs documentation it s recommended to implement a feature that allows users to toggle between Maven and Gradle examples within a single section This approach will reduce redundancy by eliminating repeated instructions and focus on the differences in configuration for each build tool Such an enhancement would streamline the user experience making it easier to follow along regardless of the chosen setup This toggle feature will also facilitate the inclusion of additional documentation such as support for Rest Assured ensuring clarity and consistency across different examples,0,0,0,1,1,0,0
Machine learning is a field of artificial intelligence that focuses on developing algorithms and models that enable computers to learn from data These systems improve their performance on tasks over time without explicit programming for each task Key components include data preprocessing model selection training and evaluation Popular algorithms range from linear regression to complex neural networks Machine learning has applications in various domains such as natural language processing computer vision and predictive analytics Providing accessible documentation like examples and demos can significantly enhance understanding and adoption similar to how Swagger showcases its capabilities with online demos,0,0,0,1,1,0,0
To enable pretty printing of responses in your tests using MockMvc you can set up a ResponseModifier to apply prettyPrintContent Initially you re applying this in each test individually java mockMvc perform get VAT RATES LIST PATH andExpect status isOk andDo modifyResponseTo prettyPrintContent andDocument my example To avoid repeating this you might want to integrate it into your MockMvc setup although your initial attempt didn t work because the ResponseModifier was not retained for documentation Here s a solution 1 Setup in Before Create a RestDocumentationResultHandler to handle pretty printing and documentation java Before public void createMockMvc this document modifyResponseTo prettyPrintContent andDocument method name this mockMvc MockMvcBuilders webAppContextSetup this context apply new RestDocumentationConfigurer alwaysDo this document build 2 Use in Tests Now you can simply perform requests without repeating the pretty print setup java Test public void testOne throws Exception this mockMvc perform get andDo this document withLinks linkWithRel rel description bar Test public void testTwo throws Exception this mockMvc perform get This approach centralizes the pretty print configuration and documentation reducing redundancy and improving maintainability,0,0,0,1,1,0,0
In Spring Boot 1 3 5 RELEASE the Pbkdf2PasswordEncoder was mistakenly doubling the salt in its output resulting in passwords with incorrect encoding For example the salt was repeated as seen in the output 18f7e427924f2fa818f7e427924f2fa82d7a6ba29d87816f79da8d9fbd23f3680afae99b44e2ca5cf84b1c0cf12968ac The correct version should omit the repetition 18f7e427924f2fa82d7a6ba29d87816f79da8d9fbd23f3680afae99b44e2ca5cf84b1c0cf12968ac A fix has been implemented for this issue Users of version 4 1 0 need to migrate their data using a provided Java snippet to correct the encoded passwords by slicing the original byte array to remove the extra salt The corrected password is then verified to ensure it matches the expected encoding,0,1,1,0,0,0,0
To fix a ClassNotFoundException when spring security oauth2 jose is not included ensure the dependency is added to your build The issue arises because OAuth2LoginConfigurer automatically registers OidcAuthorizationCodeAuthenticationProvider which depends on JwtDecoder found in spring security oauth2 jose Without this library the application cannot locate the necessary classes leading to the exception By including spring security oauth2 jose the JwtDecoder and related functionalities will be available preventing the error Ensure your build configuration explicitly includes this dependency if you are using OAuth2 login with OpenID Connect,0,1,0,0,1,0,0
The AntPathRequestMatcher in Spring Security should be updated for more intuitive defaults Currently it trims trailing slashes within path segments which can be confusing Additionally path matching is case insensitive by default even for patterns without wildcards which is not expected behavior To improve predictability it s recommended to disable path segment trimming and enforce case sensitivity This will align the behavior more closely with user expectations Note that the current documentation may be outdated regarding these features,0,1,0,0,1,0,0
To improve the GemFire SessionRepository and resolve issues with delta propagation during updates specific problems were identified by a Spring Session Data GemFire user First multiple HttpSessionListener sessionCreated HttpSessionEvent events are mistakenly triggered per HTTP request Second the session removeAttribute name method is not functioning as expected While the removal issue can be addressed by enhancing the logic for handling session copies and deltas the multiple listener events are a GemFire specific issue beyond the direct control of Spring Session Data GemFire Therefore coordination with GemFire is necessary to fix this behavior,0,0,1,0,1,0,0
To update Spring Session to Spring Data GemFire SDG 1 7 4 RELEASE it s necessary to address all pending tasks related to Spring Session Data GemFire that depended on the SDG 1 7 4 RELEASE This involves ensuring compatibility with the new release updating dependencies and verifying that all features and integrations work seamlessly The update might also require refactoring existing code to align with any changes or improvements introduced in the new version of SDG Thorough testing should be conducted to validate functionality and performance ensuring that the application remains stable and efficient after the update,0,0,1,0,1,0,0
It seems there was confusion regarding the doWithRestTemplate method mentioned in the Spring Vault documentation Initially a search for this method yielded no results raising questions about its implementation The issue stemmed from referencing an outdated snapshot of the documentation After realizing the mistake and checking the correct version it was confirmed that the outdated documents were removed The user appreciates the quick resolution and acknowledges the importance of community feedback in maintaining open source software,0,0,1,1,0,0,0
Upgrading to Spring Data 2021 2 1 involves several key enhancements and bug fixes that improve performance and reliability This release includes updates across multiple modules such as JPA MongoDB and Redis Notable improvements include better integration with Spring Boot enhanced auditing capabilities and more robust support for reactive programming The update also addresses various security vulnerabilities and deprecates older methods in favor of more efficient alternatives Additionally there are optimizations in query execution and caching mechanisms making the data access layer more efficient Users are encouraged to upgrade to benefit from these improvements and maintain compatibility with the latest Spring ecosystem,1,0,0,0,0,0,1
The upgrade to AWS SDK for Java v2 introduces a non blocking HTTP client API enhancing the AwsIamAuthentication by making it fully non blocking This improvement is significant for applications requiring high concurrency and responsiveness The update is slated for the 3 0 M1 release aligning with the transition to a new major revision of the AWS SDK This shift to a non blocking architecture will likely improve performance and scalability for developers leveraging AWS services,0,0,0,0,1,0,1
Flash scope in Spring Web Flow is described as storing attributes until the next user event which includes the current request and any redirects or refreshes to the next view However there is a contradiction noted by Gerr Magnus Mes who states that in Web Flow 2 flash scope is actually cleared after every view render Rossen Stoyanchev suggests that while the description might need better wording it s unclear what the exact inaccuracy is The issue highlights a potential misunderstanding or miscommunication about the persistence of flash scope attributes between user events and view renders,0,0,1,1,0,0,0
In Chapter 14 of the Spring Web Flow documentation there is an error in the configuration sample for the FlowHandlerAdapter The incorrect sample uses a constructor argument xml bean id flowHandlerAdapter class org springframework webflow mvc portlet FlowHandlerAdapter constructor arg ref flowExecutor bean However FlowHandlerAdapter has a parameterless constructor so the correct configuration should set the flowExecutor as a property xml bean id flowHandlerAdapter class org springframework webflow mvc portlet FlowHandlerAdapter property name flowExecutor ref flowExecutor bean This change needs to be reflected in the documentation to avoid confusion The issue affects version 2 3 1 of the framework and the documentation should be updated accordingly,0,0,1,1,0,0,0
The PDF version of the Spring Web Flow documentation had two major issues missing pictures and code samples with lines too long causing them to be cut off instead of wrapped These problems were noted in version 2 3 1 and viewed using Adobe Reader XI on Windows 7 The issue was reported by Matei Dragu and it was observed that upgrading to the docbook plugin resolved the problems,0,0,1,1,0,0,0
The issue addressed in the documentation involves incorrect configuration for activating the RichFacesAjaxHandler in a Spring Web Flow SWF setup using RichFaces and JSF 1 2 Initially the handler was mistakenly set as a property of FlowController instead of FlowHandlerAdapter After identifying this through a JBoss RichFaces bug report the correct configuration involved adding the RichFacesAjaxHandler as a property to JsfFlowHandlerAdapter This change enabled successful partial updates with SWF 2 3 0 and RichFaces 3 3 3 It s important to note that FlowController and FlowHandlerAdapter are mutually exclusive only one is used per request hence both can have the ajaxHandler property The documentation should mention the adaptability of RichFacesAjaxHandler with both components to prevent configuration issues,0,0,1,1,0,0,0
Spring Web Flow 2 3 requires a new XSD file for flow definitions Previously the spring webflow 2 0 xsd used for expression language EL expressions However with the introduction of Spring EL only is now supported This change affects version 2 3 1 and requires updating the expression syntax for compatibility,0,0,1,1,0,0,0
The issue SWF 1515 was opened by Manuel Jordan highlighting a documentation error in the Spring Web Flow SWF where the validate attribute is missing from the transition tag element in the Appendix This affects version 2 3 0 of SWF A discussion on this issue can be found in the SpringSource forum Rossen Stoyanchev suggested that with the project now on GitHub contributors should consider submitting a pull request to address such errors in the future,0,0,1,1,0,0,0
The Webflow configuration documentation references an outdated XSD version causing potential confusion for users trying to utilize new features in SWF 2 3 0 The correct URL should be http www springframework org schema webflow config spring webflow config 2 3 xsd This discrepancy affects version 2 3 0 and duplicates an existing issue 641 aimed at updating the documentation Rossen Stoyanchev acknowledged the problem and noted ongoing efforts to address it,0,0,1,1,0,0,0
Chris Snow reported that the Spring Web Flow PDF documentation lacks images in sections 3 2 and 3 3 as noted in issue SWF 1445 This affects version 2 2 0 Phil Webb commented that the recent migration to Gradle should resolve this issue for version 2 4,0,0,1,1,0,0,0
The issue SWF 1242 was opened by Rossen Stoyanchev highlighting that the version of JSF in the pom xml files for jsf booking and swf booking faces should be updated to JSF 2 0 instead of 1 2 This affects version 2 1 0 M2 of the software The update is necessary to ensure compatibility and take advantage of new features and improvements in JSF 2 0 Addressing this will likely involve modifying the project configuration to specify the correct JSF version ensuring that the applications function correctly with the updated framework,0,0,1,1,0,0,0
The issue SWF 1159 https jira spring io browse SWF 1159 redirect false opened by Andres Riancho https jira spring io secure ViewProfile jspa name andres highlights a SQL injection vulnerability in a Spring WebFlow application The vulnerability is demonstrated through a crafted URL that manipulates the search functionality By injecting SQL code into the searchString parameter an attacker can potentially gain unauthorized access or manipulate the database This example emphasizes the importance of input validation and parameterized queries to prevent such security risks in web applications,0,0,1,1,0,0,0
In the Spring Web Flow Reference section 4 12 there s an issue with unclosed tags in the provided code example for global transitions The example shows xml global transitions transition on login to login transition on logout to logout global transitions These transition tags should be properly closed as self closing tags xml transition on login to login transition on logout to logout This affects version 2 0 7 and was reported by Anthony Cunningham,0,0,1,1,0,0,0
In the PDF manual for version 2 0 7 an error causes the phrase please define titleabbrev in your docbook file to appear at the top of every second page This issue is likely due to a missing or improperly defined titleabbrev element in the DocBook source file The error was reported by Mathias Werlitz under issue SWF 1121 The problem affects the document s formatting indicating a need for a review and correction of the DocBook configuration to ensure proper display and structure across all pages,0,0,1,1,0,0,0
Spring MVC s binding error message code generation rules were discussed in issue SWF 1022 opened by Keith Donald The issue focuses on documenting the customization of message codes resolver to better handle binding errors This involves detailing how developers can tailor the error message codes generated during data binding processes in Spring MVC applications The documentation aims to provide clear guidance on modifying the default behavior for more precise error handling and messaging enhancing the framework s flexibility to suit specific application needs The changes affect version 2 0 5,0,0,1,1,0,0,0
In the Spring Web Flow 2 0 x reference guide some minor errors were identified Specifically in sections 2 9 1 2 9 1 1 2 9 2 and 5 7 6 the correct XML tag should be subflow state instead of subfow state Additionally in sections 4 10 1 1 and 4 10 1 2 the code should read MessageContext messages context getMessageContext rather than MessageContext messages context getMessages These corrections aim to address typos for clearer documentation The issue affects version 2 0 6 and was highlighted by Gary Weaver with further comments noting the need to update the issue title to reflect the corrections accurately,0,0,1,1,0,0,0
In the Spring Web Flow project an issue was identified in the validation code sample for the Booking model The sample incorrectly shows using context getMessages to retrieve a MessageContext object However the correct method according to the ValidationContext API is getMessageContext This discrepancy affects version 2 0 5 of the documentation specifically in Section 4 10 The correct usage is essential for properly recording validation messages,0,0,1,1,0,0,0
The issue in the Booking MVC Reference Application involves the Smoking field not binding the on value correctly when decorated with Dojo This problem arises when JavaScript is enabled as Dojo submits the string on when the radio button is selected which the Boolean converter cannot interpret With JavaScript disabled it correctly submits true This may be due to a regression from upgrading to Dojo 1 2 as the decoration should submit true but instead sends on A proposed fix is to enhance the StringToBoolean converter to handle both on off and true false Additionally upgrading to the latest Dojo 1 2 maintenance release might resolve the issue if it s a Dojo bug Removing the explicit value true attribute resolved the issue temporarily but it persists in the latest Web Flow 2 x versions A suggestion was made to use string values for true and false in the ElementDecoration instead of boolean values,0,0,1,1,0,0,0
The Web Flow system lacks documentation on the messages generated during view to model binding specifically concerning error code to message code mappings This issue identified as SWF 898 and reported by Keith Donald highlights the need for clear documentation to improve understanding and troubleshooting The absence of this information affects version 2 0 3 indicating a gap in user guidance that could hinder effective use of the system Addressing this issue is crucial for developers to efficiently map error codes to their corresponding messages ensuring smoother operation and debugging,0,0,1,1,0,0,0
The document discusses handling URL patterns for app and htm forms in a Spring Web Flow application It introduces a FlowIdHandlerMapping to manage these URL patterns effectively This mapping is crucial for directing requests to the appropriate flow definitions within the application ensuring seamless navigation and user experience The update is relevant to version 2 0 3 addressing specific routing and flow initiation issues By implementing these rules developers can achieve more precise control over web flow behavior enhancing the application s overall functionality and maintainability,0,0,1,1,0,0,0
The issue reported in Spring Web Flow SWF 879 involves an HTTP Status 404 error when logging into the Spring Faces version of the Spring Travel booking app online The error occurs after attempting to log in as Keith melbourne directing to a missing resource at swf booking faces spring WEB INF flows main xhtml Despite the error the login is seemingly successful allowing navigation to the search page where the user s name appears This problem is specific to the deployment at richweb springframework org and doesn t occur with a local build It is suggested that updating the online version to release 2 0 4 might resolve the issue,0,0,1,1,0,0,0
The issue SWF 874 was raised by Archie Bartleman https jira spring io secure ViewProfile jspa name archieb icon co za concerning a typographical error in documentation section 7 1 The original sentence incorrectly used requested instead of requests when referring to site areas requiring authorization This affects version 2 0 3 of the software The correction ensures clarity in the security guidelines by emphasizing that only authorized requests should be processed in sensitive site areas,0,0,1,1,0,0,0
In section 6 4 of the reference documentation Archie Bartleman noted an error in the phrasing regarding flow managed flushing conventions The original sentence mistakenly included one from one view state and should be corrected to after a transition from one view state to another This clarification ensures accurate understanding of the flushing process between view states The issue affects version 2 0 3 of the software,0,0,1,1,0,0,0
In section 4 6 of the reference documentation Archie Bartleman reported a typographical error in SWF 872 The sentence should state The model may be an object in any accessible scope such as flowScope or viewScope correcting the omission of be This issue affects version 2 0 3,0,0,1,1,0,0,0
A JavaScript error on the enterBookingDetails page of the swf booking mvc sample tracked as SWF 865 appears to be linked to the new amenities field The issue affects version 2 0 3 Scott Andrews commented that the error was addressed by modifying the Dojo query to specifically select checkboxes for enhancement as there were also hidden inputs supporting these checkboxes within the form,0,0,1,1,0,0,0
To implement and register custom converters in a Spring application you need to follow a series of steps First create a class that implements the Converter interface defining the convert method to handle specific type transformations Once your converter is defined register it with the conversion service This can be done by configuring a ConversionServiceFactoryBean in your Spring configuration where you list all custom converters Finally ensure that the conversion service is wired into your application context enabling the use of these converters throughout your application This process allows for flexible and reusable type conversions tailored to your application s needs,0,0,1,1,0,0,0
The issue SWF 844 relates to the Dojo DateTextBox not supporting locale specific formatting progressively Without Ajax dates render in the default ISO 8601 format YYYY MM DD rather than a customized locale format The DateTextBox s datePattern attribute is only used for on screen display not for server communication which poses a problem for applications requiring custom formatting A patch has been proposed to extend the datePattern attribute to handle both display and server side parsing formatting reducing boilerplate code This extension allows applications to specify a custom format while maintaining degradability making it easier to manage date inputs consistently across client and server interactions,0,0,1,1,0,0,0
Paul Newport reported a typo in the Spring Web Flow documentation specifically in Section 11 4 The sentence in question is missing a verb The faces flow builder services tag also several other defaults appropriate for a JSF environment He suggests it should be corrected to The faces flow builder services tag also configures several other defaults appropriate for a JSF environment This affects version 2 0 2,0,0,1,1,0,0,0
In the Serving JavaScript Resources section of the Spring Web Flow documentation there is an inconsistency in naming between the servlet and servlet mapping The servlet is named Resource Servlet while the servlet mapping mistakenly uses Resources Servlet This naming discrepancy affects version 2 0 2 and needs to be corrected in the spring webflow reference src spring js xml file Alison Rosewarne has provided patches to resolve this by standardizing the names to Resources Servlet in both spring js xml and spring faces xml files The issue and corrections are documented in JIRA under the identifier SWF 740,0,0,1,1,0,0,0
The documentation for validating an object in Spring Web Flow SWF 715 highlights a useful feature where the validation method can return a boolean This allows for a short circuit in the transition process enabling users to address validation errors before proceeding further This approach can enhance user experience by ensuring that all necessary validations are satisfied prior to moving on to subsequent steps The feature is relevant for version 2 0 1 and was discussed in a forum thread emphasizing its practical utility in application development,0,0,1,1,0,0,0
David Thomas Hume reported minor grammar formatting and code errors in the Spring Web Flow documentation and the Javadoc FormAction class These issues while mostly small and potentially subjective have been addressed through an attached patch The corrections include updates related to documentation issue 1483 Hume acknowledged a mistake in the initial patch and provided a corrected version Keith Donald expressed gratitude for the contributions The affected version is 2 0 1 and the patch files are available for review,0,0,1,1,0,0,0
The issue reported in SWF 701 https jira spring io browse SWF 701 highlights a problem with the security config xml file in a Spring Web Flow sample application which is not compatible with Spring Security 2 X The correct configuration involves setting up the security namespace and schema locations and defining security settings such as URL access restrictions custom login and logout configurations and a local authentication provider The sample configuration includes setting intercept URLs for login and logout actions specifying custom login pages and using an MD5 password encoder for user authentication The configuration needs to be updated to reflect these settings to ensure compatibility and proper functionality,0,0,1,1,0,0,0
The issue SWF 694 https jira spring io browse SWF 694 involves the need for more documentation on using multiple flow xml files in Spring WebFlow particularly when using an abstract parent XML configuration Lou Sacco noted a bug in the 2 0 1 documentation on page 82 where a return statement is missing in the createEditRequestSubflow method This method involves setting up a mock flow with an input mapper that checks if 1L is passed as a requestId The correct code should include the line return mockEditRequestFlow to properly return the mock flow This issue highlights the importance of accurate documentation for effective JUnit testing in WebFlow applications,0,0,1,1,0,0,0
The upgrade guide for the Flow Request URL Handler contains incorrect example code It shows a flowExecutor being passed as a constructor argument which is outdated According to the changelog for version 2 0 0 the constructors for FlowController and FlowHandlerAdapter that accepted a FlowExecutor argument were removed Instead a default constructor with a flowExecutor property is now used for simplicity especially in Spring bean configurations This change requires a minor update for configurations prior to version 2 0 0 The documentation should be updated to accurately reflect this change,0,0,1,1,0,0,0
The issue SWF 655 reported by Rusty Wright highlights a problem with the API documentation for CI 452 Instead of comprehensive API details the documentation only contains information related to the booking sample application This affects version 2 0 0 RC1 indicating a need for complete and accurate documentation to support proper use and understanding of the API,0,0,1,1,0,0,0
In the booking mvc project the security config xml file contains a validation issue against spring security 2 0 xsd The line in question involves the security form login configuration It was initially set with login url but should be corrected to login processing url to match the schema However changing it to login processing url causes a runtime parsing error as this attribute is not permitted This discrepancy prevents the application from starting and highlights a conflict between schema validation and runtime parsing The issue affects version 2 0 0 RC1 and further investigation is needed to resolve the parsing error while maintaining schema compliance,0,0,1,1,0,0,0
In the issue SWF 630 Micha l Coindeau reported a problem in the event handling section of a guide The example transitions were incorrectly formatted Initially transitions were written as xml transition on login to login transition on logout to logout They should be properly formatted as xml transition on login to login transition on logout to logout This affects version 2 0 0 RC1 The correction ensures proper event handling by associating the on attribute directly with the to attribute within the same tag,0,0,1,1,0,0,0
The issue SWF 608 opened by Keith Donald addresses a problem where the login page fails to function when accessed directly in samples This problem is further discussed in related forum threads indicating a potential pattern or recurring issue The lack of additional details in the ticket suggests that users encountering this problem may need to refer to the forums for more context or potential solutions The discussions in the forums could provide insights or workarounds for developers facing similar challenges with direct access to login pages,0,0,1,1,0,0,0
In the issue SWF 540 https jira spring io browse SWF 540 redirect false Scott Andrews highlighted minor HTML and CSS validation issues in the samples which need resolution before the RC1 release The booking mvc sample successfully passes W3C HTML and CSS validation However the booking faces sample almost meets the standards with exceptions related to Dojo attributes These validation fixes are crucial to ensure compliance and functionality across web standards,0,0,1,1,0,0,0
The Spring Travel app experiences flickering issues in Internet Explorer and Safari likely due to a CSS problem This flickering occurs when form elements are modified during the onDomReady event which is the suggested method for enhancing elements The issue affects version 2 0 M4 of the app and has been observed on the samples hosted at spring ervacon com,0,0,1,1,0,0,0
This task involves updating outdated Java package descriptions in the Web Flow source to ensure accuracy and relevance The package documentation is currently lengthy and requires revision This update is necessary for version 2 0 M4 as noted in the issue SWF 520 opened by Keith Donald Addressing this will improve the clarity and usefulness of the documentation for developers working with Web Flow,0,0,1,1,0,0,0
The issue reported in SWF 433 involves a malfunctioning search form in the swf booking mvc demo bundled with SWF 2 0 M3 The form lacks a declared action in the JSP leading to an incorrect action URL being rendered Manually adjusting the form action to the correct URL resolves the issue This problem is linked to the form form tag in GlassFish and it affects how actions are rendered bypassing the Spring servlet A similar issue is noted with Jetty suggesting it s not specific to Webflow but a broader problem A fix was implemented under SPR 4407 and retesting is advised once newer Spring MVC versions are released,0,0,1,1,0,0,0
In the Spring Web Flow reference manual Chapter 6 discusses an incorrect namespace for client side validation The current namespace is xmlns sf http www springframework org faces but it should be xmlns sf http springframework org faces Jeremy Grelle noted that in version 2 0 m2 the namespace will be updated to xmlns sf http www springframework org tags faces to better align with Spring s naming conventions This change addresses inconsistencies and improves alignment with existing standards,0,0,1,1,0,0,0
A bug in swf ajax js affects the shipping rate example when using the Enter key to submit a form in Firefox 2 The issue arises because the handleSubmitEvent function mistakenly identifies an input element as the form element triggering an error To address this an AjaxForm class was created to properly manage form submissions by storing the form s ID and ensuring the correct element is referenced This class intercepts the submit event verifies the form tag and manages the AJAX request while preventing the default form submission Despite the fix the issue is considered minor and not prioritized for version 1 0 6,0,0,1,1,0,0,0
The issue SWF 349 was opened by Ron Wheeler to address several typos and unclear sentences in the Web Flow reference manual Specifically on Page 68 the section on configuring the Web Flow system contains hard to parse sentences One example involves a missing phrase which should read The artifacts defined in the faces config xml use Spring to locate the Web Flow system Another sentence needed clarification regarding the configuration of JSF artifacts suggested to be In this example the configuration of the JSF artifacts to which the Web Flow system will delegate resides inside webflow config xml Wheeler emphasized the importance of proper punctuation noting how English relies on it for clarity The comments from Erwin Vervaet and Keith Donald humorously acknowledged the punctuation suggestions,0,0,1,1,0,0,0
In the Spring Framework versionless XSDs are typically available making it easier for users to upgrade to the latest releases However this is not the case for spring webflow config where such a versionless XSD is missing Stevo Slavi opened an issue SWF 1590 requesting that these XSDs not only be included in JARs but also published to the Spring schema directories online Rossen Stoyanchev initially misunderstood the request thinking it referred to a line in spring schemas pointing to the latest schema After clarification it was noted that versionless XSDs were not available at the specified Spring schema URLs prompting a need for their publication to aid in smoother upgrades,0,0,0,1,1,0,0
The issue SWF 1507 opened by Rossen Stoyanchev highlights the need to add an overview html to the JavaDoc as it exists in the source code but isn t being included in the output Additionally there s a recommendation to review and update descriptions to ensure consistency across GitHub SpringSource org and distribution README files This update affects version 2 3 0 of the software,0,0,0,1,1,0,0
The current reference manual for Spring Web Flow lacks detailed discussion on scopes and conversations which are only mentioned sporadically A dedicated section explaining scoping available scopes their functionality and differences such as between conversation and flow scope would be beneficial Chad La Joie notes that much of the needed information is in the Special EL variables section suggesting it be separated for clarity Adding this to Chapter 3 could enhance understanding for users,0,0,0,1,1,0,0
The issue SWF 1465 https jira spring io browse SWF 1465 redirect false opened by Chad La Joie highlights the lack of documentation for using exception handler elements in Spring Web Flow SWF These elements allow defining one or more handlers that reference org springframework webflow engine FlowExecutionExceptionHandler beans within a flow Despite their functionality the reference manual does not currently cover their use This gap affects version 2 3 0 and addressing it would improve the clarity and usability of SWF for developers implementing flow exception handling,0,0,0,1,1,0,0
The issue SWF 1414 opened by Rossen Stoyanchev aimed to simplify the process for setting up and running Web Flow samples Key problems included the need to build samples individually the requirement to first run a Web Flow build to populate the Ivy repository lack of source availability for debugging in Eclipse and the manual management of Eclipse settings The solution involved switching to Maven Central dependencies and adding a top level pom xml in the samples directory to build all samples collectively The Maven Eclipse plugin was utilized for managing Eclipse settings Sub tasks included using Maven Central dependencies adding necessary configuration files and facilitating local installation of Web Flow artifacts The changes eliminated the Ivy configuration streamlining the setup process,0,0,0,1,1,0,0
The documentation for JSF integration in Spring Web Flow needs updates due to the deprecation of the ResourceServlet The section 2 3 Spring JavaScript Updates recommends using mvc resources instead However the JSF integration documentation still references the deprecated ResourceServlet Although deprecated ResourceServlet remains necessary for JSF 1 2 Spring Faces components which rely on it for resource requests This necessitates a careful update to reflect the use of mvc resources while acknowledging the specific needs of JSF 1 2,0,0,0,1,1,0,0
The documentation for file uploads in Section 5 7 Handling File Uploads needs clarification It currently applies only to projects using Spring MVC and WebFlow This approach will not work for projects using JSF For JSF environments it s recommended to utilize a component library that supports file uploads This distinction is important for developers to implement the correct solution depending on their project framework,0,0,0,1,1,0,0
The upgrade to Spring 3 0 4 involves updating the booking mvc sample by utilizing the resource serving mechanism in Spring MVC replacing the ResourceServlet Additionally it includes changing from prefix based mapping spring to the default mapping This update is related to the deprecation of ResourcesServlet and affects version 2 1 1,0,0,0,1,1,0,0
In several projects the default validate method on a separate validator object is utilized but it s not documented in the reference manual Users would benefit from documentation stating that within a Validator you can define a public method named validate For example public void validate Booking booking ValidationContext validationContext This method is automatically called by Spring Web Flow SWF for each view state with a matching model If a validate state method is also defined SWF will invoke it first followed by the default validate method This feature affects version 2 1 0 M2,0,0,0,1,1,0,0
Keith Donald opened SWF 1069 to introduce a tutorial for getting started with Spring MVC 2 5 and Web Flow 2 The tutorial aims to help users set up these frameworks in just 10 minutes It s designed to be basic with a more detailed example available in the Spring Travel project This update accompanies Web Flow project news The tutorial and project template are available at the Spring Source repository with plans to post them on the SpringSource website The issue affects version 2 0 6,0,0,0,1,1,0,0
The secured element in SWF is used to define security constraints within XML configuration files It typically specifies required roles for accessing certain elements or states In the example given secured attributes ROLE USER indicates that the specified role is necessary However the usage context within other XML elements wasn t initially clear leading to questions about whether the element to be secured should be wrapped by secured tags or if the secured element should be placed inside the element needing security This confusion prompted a request for a clearer example in the manual An update was made to include an example of securing a state clarifying its practical application,0,0,0,1,1,0,0
The PDF reference document for version 2 0 3 has several formatting issues when viewed in Acrobat Reader 8 0 Lines of code extend beyond their container boxes spilling over the page Additionally the document header is incorrect displaying please define productname in your docbook file on each page These are minor issues but important to resolve as they impact the perceived quality of the project The problem was reported by Ashkan Aryan and Keith Donald acknowledged the oversight noting the importance of addressing these concerns,0,0,0,1,1,0,0
The named action capability in Web Flow 2 allows for chaining actions within an action state enhancing the workflow s flexibility This feature differs from the implementation in Web Flow 1 and requires proper documentation to guide users It impacts version 2 0 3 providing a structured approach to execute multiple actions sequentially This enhancement aims to streamline complex workflows by enabling a more organized and efficient action management system within the web flow framework,0,0,0,1,1,0,0
In section 10 6 of the Reference Manual an incorrect XML snippet was identified The original snippet uses the flow location tag which is likely outdated from version 1 0 It should be corrected to webflow flow location This issue affects version 2 0 3,0,0,0,1,1,0,0
The suggestion for the Spring Web Flow Reference Manual highlights a gap in the documentation concerning event triggering Specifically it lacks guidance on executing the next step in a flow by triggering an event The user had to consult forums to learn that submitting a form POST with a parameter eventId EVENTNAME initiates the event Including this explanation and relevant examples would greatly enhance the manual Understanding event triggering was initially challenging for the user but once resolved the rest of the process was straightforward This addition would benefit others facing similar issues,0,0,0,1,1,0,0
Keith Donald opened a task to create POMs for sample applications facilitating their build with Maven This aims to streamline starting Maven based projects using Spring Web Flow SWF The issue affects version 2 0 3 Agim Emruli responded by adding Maven POMs to the sample applications and updating existing ones enabling all web flow projects to be built using Maven with the mvn clean install command Keith Donald later commented indicating these changes are targeted for version 2 0 4,0,0,0,1,1,0,0
Scott Andrews opened SWF 834 to address the lack of advanced data binding demonstrations in the sample applications The issue highlights the need for examples showcasing both collection and enum binding techniques In response an amenities attribute was added to the Booking object This attribute is implemented as a set of enums in the MVC app and as a single enum in the JSF app illustrating the desired data binding methods,0,0,0,1,1,0,0
The issue SWF 828 opened by Keith Donald involves providing pre built WAR files to facilitate the evaluation of Web Flow 2 These files include A WAR for Spring Web Flow with MVC JavaScript JSP and Tiles for a Servlet 2 4 environment A WAR for Spring Web Flow with JSF 1 2 RI and Facelets for a Servlet 2 4 environment A WAR for Spring Web Flow with MVC and JSP for a Pluto Portlet environment A WAR for Spring Web Flow with JSF and the JSF Portlet Bridge for a Pluto Portlet environment Scott Andrews commented that these WARs have been created and tested with Tomcat 6 for servlet samples and Pluto 1 1 with Tomcat 5 5 for portlet samples They are available for download at the Spring Web Flow samples site,0,0,0,1,1,0,0
The task SWF 821 involves improving the documentation for Expression Language EL in Spring Web Flow Keith Donald opened this issue to enhance clarity and usability by providing a unified EL reference This improvement addresses gaps in the existing documentation for version 2 0 3 as discussed in a related forum thread The goal is to streamline user understanding and implementation of EL in Spring applications,0,0,0,1,1,0,0
To build Spring Webflow samples behind a corporate firewall or proxy documentation must include detailed instructions on configuring proxy settings for ANT and IVY Users need to know how to set the proxy host and port to download the necessary distributions Without this guidance accessing sample projects in corporate environments is challenging Although pre built samples are now available reducing the urgency clear documentation is still beneficial For more context see the related forum discussion Spring Forum http forum springframework org showthread php t 55277 highlight firewall,0,0,0,1,1,0,0
The issue SWF 807 was opened by Manel Clos to address a documentation typo in Spring Web Flow In the first code example of the specified section the persistence context tag is missing a closing slash and should be persistence context This affects version 2 0 2 Additionally the original link provided is outdated and the correct link for the FlowScoped PersistenceContext documentation is now located in section 6 3,0,0,0,1,1,0,0
In the context of Spring Web Flow two key state types are action state and decision state An action state executes one or more actions when entered often used for tasks such as data processing or service invocations A decision state evaluates conditions to determine the flow s path facilitating branching logic based on runtime criteria These states are integral for controlling the flow of a web application guiding transitions between different states based on user interactions or system events As of version 2 0 1 documentation for these states is pending highlighting a need for clearer guidance on their implementation and use within the framework,0,0,0,1,1,0,0
In the Spring Web Flow project a request was made by Keith Donald to enhance the reference documentation by adding Java and XML syntax highlighting This improvement tracked under issue SWF 708 aims to make the documentation more readable and user friendly The enhancement affects version 2 0 1 By implementing syntax highlighting code examples in the documentation will be easier to understand helping developers quickly grasp the concepts and usage patterns This change is expected to enhance the overall developer experience by providing clearer and more visually appealing code snippets,0,0,0,1,1,0,0
The issue SWF 677 was opened by Keith Donald to address the need for documentation on accessing web flow artifacts from Maven 2 It suggests including details on the artifact naming scheme to enhance clarity This documentation would help users integrate and manage dependencies more effectively in their projects The request pertains to version 2 0 0 indicating that this is an area of improvement for users working with this version of the software Providing comprehensive guidance on this topic would streamline the development process and reduce potential confusion when working with web flow artifacts,0,0,0,1,1,0,0
The issue SWF 667 opened by Rossen Stoyanchev highlights a gap in the reference documentation for standalone validators While the documentation explains how to create a standalone validator component it fails to describe how the validator is identified Specifically it doesn t mention that the system looks for a bean named using the pattern ModelObjectTypeName Validator and a method named validate state ModelObjectType Errors This omission affects version 2 0 0 RC1 leaving users without guidance on how validators are located,0,0,0,1,1,0,0
The reference guide for expression languages in SWF 647 is concise lacking detailed explanations It needs a comparison of the two supported expression languages ELs to highlight their differences Additionally clarity is needed on which EL is used in the manual s examples and if these examples are applicable to both languages Information on the specific Maven2 dependencies and repositories required for implementing these ELs is also missing This guidance would aid users in effectively utilizing the ELs in their projects,0,0,0,1,1,0,0
In the documentation for importing projects into Eclipse it s essential to include instructions on linking to the IVY CACHE This step is crucial for managing dependencies effectively The issue identified as SWF 621 was raised by Keith Donald following a suggestion from Colin highlighting its importance for users working with version 2 0 0 RC1 Proper documentation ensures a smoother setup process and reduces potential configuration errors,0,0,0,1,1,0,0
The task involves enhancing the JavaDoc API for sample applications in the Spring Web Flow project This improvement is tracked under issue SWF 616 initiated by Keith Donald The goal is to provide clearer documentation which can assist developers in understanding and utilizing the API effectively The issue affects version 2 0 0 RC1 and further context or discussion about this improvement can be found in the linked forum thread This effort is part of ongoing maintenance to ensure the documentation aligns with best practices and user needs,0,0,0,1,1,0,0
The task involves renaming the booking samples to spring travel to incorporate Spring branding and facilitate future enhancements with domain modules like air and car The change affects version 2 0 0 RC1 Joshua Wilson asked whether only the project name or the package org springframework webflow samples booking should be refactored to org springframework webflow samples spring travel He also questioned whether class names using booking such as BookingDataRange java should be changed to TravelDataRange java He suggested that consistency is important but noted spring might be redundant Rossen Stoyanchev commented on the complexity of changing four sample variations and related documentation questioning the necessity,0,0,0,1,1,0,0
In the context of Web Flow adding tests to reference applications is crucial for showcasing best practices Keith Donald initiated a task to enhance testing impacting version 2 0 M4 Agim Emruli contributed by attaching patches that include renamed test cases such as BookingFlowExecutionStubTests and MainFlowExecutionStubTests The tests focus on key application components BookingServiceTest evaluates the persistence layer MainFlowExecutionTests uses stubs to minimize dependencies and BookingFlowExecutionsTests conducts system tests with real implementations Configuration files have been reorganized into three parts application security and web flow to avoid redundancy The updates ensure compatibility with the latest revisions streamlining the testing process and configuration management,0,0,0,1,1,0,0
Spring Faces is a module that enhances JavaServer Faces JSF integration within the Spring Framework providing a seamless experience for developers leveraging both technologies The initiative SWF 524 https jira spring io browse SWF 524 was opened to emphasize the substantial support provided for JSF ensuring developers are aware of the robust features and improvements available This includes better resource management integration with Spring Web Flow and enhanced UI component support By highlighting these capabilities Spring Faces aims to facilitate a more efficient development process for applications using JSF and Spring together,0,0,0,1,1,0,0
The update to the Web Flow reference manual involves incorporating initial coverage of all new features in version 2 x This task tracked under SWF 450 was initiated by Keith Donald The update affects version 2 0 M1 and is a work in progress until the final release on March 25th It aims to document enhancements and provide detailed guidance on the new functionalities introduced in this version The reference manual is crucial for developers to understand and implement the latest features effectively,0,0,0,1,1,0,0
The issue SWF 357 opened by Derek Alexander highlights the need to enhance the documentation on exception handling options in the Spring Web Flow reference manual The current material is insufficient and there s a request for a comprehensive section that outlines various methods of handling exceptions Additionally the sample applications lack examples of using exception handler and global transitions with transition on exception which are straightforward ways to declare a global exception handler This improvement would provide clearer guidance for developers on implementing robust exception handling strategies The issue affects version 1 0 4 and includes an attachment for further context,0,0,0,1,1,0,0
The proposal for SWF documentation restructuring suggests creating distinct sections an Intro Tutorial for practical introductions a User Guide for application developers and a Developer Guide for those extending the framework This aims to clarify the current overlap between user and developer content This separation is important as the primary audience consists of developers ensuring each group receives targeted information The change is intended to improve usability and focus for different user needs,0,0,0,1,1,0,0
In the issue SWF 119 Andreas Schildbach suggests enhancing a phonebook example by adding navigation controls in the detail view similar to JIRA s return to search previous next feature This would demonstrate a common use case involving navigation between search results and detailed entries Typically these scenarios are modeled with a search flow and a detail subflow requiring access to parent flow attributes like the index of the detail entry Erwin Vervaet expresses concerns about increasing complexity suggesting that contributions are welcome Keith Donald recommends looking at the hotel booking sample for a comprehensive application example,0,0,0,1,1,0,0
To fix the broken image links in the Spring WS documentation under the Runtime Environment section update the path from spring projects spring ws raw main src main asciidoctor spring deps png to spring projects spring ws raw main src main asciidoctor images spring deps png This corrects the image path issue However when viewed in dark mode the arrows in the diagram are not visible due to the transparent background To resolve this you can add CSS to set the background to white ensuring visibility in all modes You should also verify other image directives and consider opening a separate ticket to track similar issues,0,0,1,1,0,0,0
Version 3 0 11 of the Spring Web Services library caused unresolved import errors for packages like org springframework ws client core support and others which did not occur in version 3 0 10 The issue seems linked to the spring integration ws dependency versioning The build issues were resolved with version 3 0 12 which is available on Maven Central The artifacts affected included spring ws support and spring ws core A missing patch identified on GitHub was not backported to the 3 x branch but the problem was fixed in a subsequent commit,0,1,1,0,0,0,0
A minimal web flow project template was proposed to help teams easily start their own projects The current booking example is considered too complex potentially hindering adoption Simplifying the template could encourage more users to engage with the framework The suggestion aims to streamline the process by focusing on essential components making it easier for developers to understand and implement The issue was opened by Keith Donald on the Spring JIRA platform highlighting the need for a more accessible starting point in version 2 0 4,0,0,0,1,1,0,0
In Spring Web Flow exception handling can be complex due to the flexibility in implementation Detailed documentation is needed to clarify the various methods and best practices for handling exceptions Key strategies include 1 Transitions with on exception Attribute This method is useful for application wide error handling but may lack flexibility in certain scenarios such as when integrating with Spring Security for access control 2 exception handler Implementations Offers more flexibility than on exception transitions though it requires manual view rendering using flow APIs Documentation should clarify safe practices for state management transitions and external redirects 3 FlowExecutionListeners The exceptionThrown method allows handling exceptions by setting flow related variables but guidance is needed on safe and appropriate operations within this context 4 Spring MVC HandlerExceptionResolvers These handle exceptions not caught by flow handlers especially when exceptions occur outside a flow Care must be taken to allow certain exceptions like AccessDeniedException to propagate correctly for security purposes Overall documentation should provide examples and clarify the proper use of these techniques particularly in complex scenarios involving technologies like JSF,0,0,0,1,1,0,0
During an upgrade from WebFlow 1 0 5 to 2 0 3 an issue arose where an ended flow didn t commit a response leading to an IllegalStateException The suggested fix was to use context getExternalContext recordResponseComplete However this method is not documented in the reference manual The request is for documentation to be added explaining the purpose and usage of the recordResponseComplete method,0,0,0,1,1,0,0
The documentation request for SWF 714 highlights the need for more detailed guidance on using the Errors object for model validation in Spring Specifically users seek clarification on integrating existing Spring Validators with the Spring Web Flow Questions include whether these Validators implementing the Validator interface can be directly injected into a flow or how they might be invoked otherwise An example illustrating this process would be beneficial This enhancement is aimed at improving the usability of the framework for developers,0,0,0,1,1,0,0
In migrating to Spring Web Flow 2 0 1 it s essential to understand the shift from Spring s BeanWrapper to OGNL for data binding While BeanWrapper was used in version 1 0 5 and is still used with the old FormAction the new recommended approach employs OGNL for declarative model binding and validation This change in semantics affects several versions including 2 0 M1 through 2 0 0 RC1 For more details you can refer to the discussion thread linked in the original report,0,0,0,1,1,0,0
The document Using Scoped Spring Beans in SWF2 0 highlights the need for more detailed instructions on enabling webflow scopes It specifically calls for guidance on using import bean to apply webflow scopes to beans within the Spring context and employing ScopeRegistrar for beans outside the Spring context This enhancement is crucial for better integration and functionality The issue affects version 2 0 0 RC1 with further discussion available on the Spring forum,0,0,0,1,1,0,0
The task involves enhancing the reference manual for Spring Web Flow SWF by including a Getting Started guide This addition aims to provide users with a clear and concise introduction to SWF facilitating a smoother onboarding process for new users The issue identified as SWF 587 was opened by Keith Donald and affects version 2 0 0 RC1 This guide is intended to complement the existing documentation offering practical steps and examples to help users quickly understand and implement SWF in their projects,0,0,0,1,1,0,0
The proposal in SWF 311 suggests enhancing the system s ability to integrate a user defined login flow into other flows allowing for seamless login support from any point within an application Key components of this integration include adding a global transition to handle a login event introducing a subflow state to trigger the user defined login flow and supporting the tracking of the target state for transitions upon successful login This could be realized using a custom FlowBuilderPostProcessor The feature affects version 1 0 3 and depends on prior support for FlowBuilder post processing as noted in issue 165,0,0,0,1,1,0,0